{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/200.png","path":"200.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477892763766},{"_id":"source/404.html","hash":"82da21b0812c044108ffdf26be22a93cb6cc0da6","modified":1477981824857},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1477880691728},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1477880691728},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1477880691743},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1477880691743},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1477880691765},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1477880691761},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1477880691775},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1477880691770},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1477880691779},{"_id":"themes/next/gulpfile.coffee","hash":"d21430c020ad4b2ae195d8750c3865897e605d33","modified":1477880691779},{"_id":"themes/next/_config.yml","hash":"4f3d91a9a2b5100f48b4c71ebbd5ed6e7cef0b57","modified":1477986344390},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1477880692313},{"_id":"source/200.png","hash":"2064c91ebe67a61f166b5c629666821dee4c4462","modified":1477882882035},{"_id":"source/_posts/分类.txt","hash":"8f212abfa793ad151cdf9e15eab560c2c077ccd3","modified":1478188330048},{"_id":"source/categories/index.md","hash":"dc7d68e76f5eb64dadd6d9820ff04bb75fc0f42d","modified":1477887502261},{"_id":"source/tags/index.md","hash":"de118a71ad43647c776766399787c7c89bc90d18","modified":1477887564443},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1477880691779},{"_id":"themes/next/languages/en.yml","hash":"e46e5250c98ffb2b3e961f9639a706f42245cb7d","modified":1477880691794},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1477880691779},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1477880691794},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1477880691794},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1477880691794},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1477880691810},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c74cf512f300127bda30dcec1177e71cbaf8c9fb","modified":1477880691857},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1477880691810},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1477880691872},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1477880691888},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1477880691810},{"_id":"source/about/index.md","hash":"347303986f6d322b3e911d41658341ef15a72bd0","modified":1477983366344},{"_id":"themes/next/layout/_layout.swig","hash":"1f6adfced1db15b9cb5017a1a62ef85e7dde2463","modified":1477880691888},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1477880692298},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1477880692282},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1477880691810},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1477880692313},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1477880693657},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1477880692298},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1477880692298},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1477880693672},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1477880693688},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1477880692282},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692830},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1477880692298},{"_id":"source/_posts/VPN_墙/2016-11-01-穷人VPN.md","hash":"b22913fef9d2c99d6ebbddd96e322161e13a9dbf","modified":1478188330026},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1477880692298},{"_id":"source/_posts/web服务器/2016-10-21-OpenResty_install.md","hash":"1a2fbda36c4e258414cfc09d704bab2b480edf87","modified":1477982866065},{"_id":"source/_posts/Dev/2016-11-03-开发相关网页链接.md","hash":"af29abc6532ec1a2d97e90b7f9f43dcc0a98c84f","modified":1478139914997},{"_id":"source/_posts/文章阅读/2016-11-02-文章阅读链接更新页.md","hash":"60f71f75ce9411fae35146d7059336f43fcb5f1b","modified":1478073526758},{"_id":"source/_posts/数据库/2016-11-03-MySQL数据库.md","hash":"3e33f4c7d387ed31202995c117d2d4f9e2f8d3b6","modified":1478146745758},{"_id":"source/_posts/文章阅读/2016-11-02-Linux学习流程发展.md","hash":"b5a945a3db4f2d4a3cf72d64644977daaac09618","modified":1478068272464},{"_id":"source/_posts/杂项/2016-11-03-vim常用命令.md","hash":"a491ca258a0c73e2153d151725b0583420f47301","modified":1478240613083},{"_id":"source/_posts/杂项/2016-11-03-工具集.md","hash":"caf3244cdc51c6b2143d44039589ed4ebe1e8a25","modified":1478185949067},{"_id":"source/_posts/环境搭建/2016-10-21-Ruby开发环境搭建.md","hash":"9195eefcc1310c1acd70b503312f27b396e00909","modified":1477991001792},{"_id":"source/_posts/环境搭建/2016-11-02-CentOS-7安装配置LAMP服务器.md","hash":"87b9f19aad9a9049ec14b7cda9f2eb7bd665be17","modified":1478067501350},{"_id":"source/_posts/环境搭建/2016-11-02-CentOS搭建PHP环境.md","hash":"1d20cd1683a217e4f4da2b80a1de1742491a7fd6","modified":1478065863500},{"_id":"source/_posts/文章阅读/2016-11-02-用软文思维写工作总结.md","hash":"0f14ebab509208449fde4157b3ee5c38f2d51cb3","modified":1478072950124},{"_id":"source/_posts/系统管理/2016-11-02-Centos网络端口.md","hash":"1230542c45f04fb313e846977e2194b041df9de4","modified":1478080020948},{"_id":"source/_posts/系统管理/2016-11-02-Linux内核升级.md","hash":"de6e96316e93506567a86a6d5ca6c8f7ff47f66a","modified":1478095572246},{"_id":"source/_posts/文章阅读/2016-11-02-高并发系统之服务器降级.md","hash":"4330046c5a977ce01623599c372a869b080f9998","modified":1478078782534},{"_id":"source/_posts/文章阅读/2016-11-02-程序员怎样才能找到一个靠谱的创业公司.md","hash":"d929a7c875dc26d8674bce20f0fff7d187e3283d","modified":1478068534452},{"_id":"source/_posts/环境搭建/2016-11-02-Node-js开发环境搭建.md","hash":"b0311d8eee3ab26c6c69f6fa8ffd114d71daf9e5","modified":1478060130433},{"_id":"source/_posts/系统管理/2016-11-02-grub引导修复.md","hash":"2460ee53f6a2832e1cff56d429ff726c637a40b6","modified":1478078151192},{"_id":"source/_posts/系统管理/2016-11-02-SSH远程重装Centos系统.md","hash":"18b4d637cc42bbd29ce6d0f80b4aed94586445fd","modified":1478076423788},{"_id":"source/_posts/系统管理/2016-11-02-iptables防火墙.md","hash":"e2dfc5ffb7fe004e6c54fc622c86595fa79fc1d9","modified":1478074929748},{"_id":"source/_posts/虚拟化/2016-11-03-Docker安装.md","hash":"95f74df9dd7b3e2ab86532f9dfe43565a2d6908d","modified":1478161060263},{"_id":"source/_posts/虚拟化/2016-11-03-Docker常用命令.md","hash":"97766339e953cb34d8606d7a10d87c13b6268b68","modified":1478164980157},{"_id":"source/_posts/系统管理/2016-11-02-VNC服务.md","hash":"2d54db24efdfc743b3c58307ea63c43882b0e701","modified":1478075267479},{"_id":"source/_posts/集群自动化/2016-11-03-集群、自动化链接更新页.md","hash":"a8b2ec625c935459f5ec810bb0dca62c09a24bae","modified":1478166946116},{"_id":"source/_posts/虚拟化/2016-11-03-KVM虚拟化.md","hash":"a903d2e33f1f3cf326bcd7494c5716c50338588e","modified":1478140199303},{"_id":"source/_posts/虚拟化/2016-11-03-tomcat单机多实例.md","hash":"9d2382ceafcbcf8100d758627ab091c14846e775","modified":1478166951222},{"_id":"source/_posts/系统管理/2016-11-03-LVM磁盘管理.md","hash":"6a2ddf1af678445aab6294b3b8e416460ef76d58","modified":1478136724555},{"_id":"source/_posts/系统管理/2016-11-03-服务器入侵肉鸡发包.md","hash":"6b3d2dbc0dd5c05396943b66db3896e97f98662b","modified":1478139329836},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1c0e1418aace8d309fde8d4b26dd4b08493f666f","modified":1477880691888},{"_id":"themes/next/layout/_macro/post.swig","hash":"f299a9958aaea638bd971db5f0282de6b92ba903","modified":1477897277121},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1477880691904},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1477880691935},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f7138e4986b485119db84564cdeacda80ede8ad5","modified":1477880691919},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1477880691919},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1477880691935},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1477880691966},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1477880691966},{"_id":"themes/next/layout/_partials/head.swig","hash":"6448e1335922f255c846badff630b6d84a3aba21","modified":1477880691950},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1477880691950},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1477880692075},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1477880692313},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1477880692329},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1477880692329},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1477880692075},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1477880692075},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1477880692282},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1477880692830},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1477880692830},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1477880692846},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1477880692846},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1477880692846},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1477880692861},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477880692877},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477880692877},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1477880692861},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1477880692877},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1477880692877},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477880692830},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1477880692892},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692106},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692106},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477880692955},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1477880691919},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692656},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692656},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692672},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692799},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477880692830},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1477880691982},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1477880691950},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1477880691997},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1477880691966},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1477880691982},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1477880692106},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1477880692044},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1477880692106},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1477880692157},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1477880692028},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1477880692122},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1477880692028},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1477880692656},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1477880692656},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1477880692799},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1477880692251},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1477880692672},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1477880692266},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1477880692814},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1477880692830},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1477880692204},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1477880692986},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1477880692986},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1477880693002},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"c14b6f75f5b9ea2ca0069776a6b2f80b972123dc","modified":1477880692204},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1477880693017},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1477880693080},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1477880693142},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1477880693158},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1477880693111},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1477880693126},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1477880693314},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1477880692235},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1477880693298},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1477880693298},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1477880693360},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1477880693314},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1477880693360},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1477880693485},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1477880693532},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1477880693532},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1477880693532},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1477880693454},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1477880693563},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1477880693548},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1477880693360},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1477880693594},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1477880693594},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1477880693641},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1477880693641},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1477880693360},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1477880693345},{"_id":"themes/next/source/images/avatar.jpg","hash":"81e23483dfdb9c3b637180f216a5a412222bf51d","modified":1477460586840},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1477880693485},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1477880693657},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1477880692122},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1477880692140},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1477880692157},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1477880692142},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e21f3fb1f6cc03c4a58b8f08e1c304f04f4c4724","modified":1477880692173},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1477880692122},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1477880692188},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1477880692344},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1477880692142},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1477880692344},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1477880692344},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1477880692454},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1477880692563},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1477880692625},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1477880692625},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1477880692641},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1477880692625},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1477880692641},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1477880692688},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1477880692672},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1477880692688},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1477880692703},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1477880692719},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1477880692734},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1477880692734},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1477880692750},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1477880692641},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1477880692688},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1477880692750},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1477880692750},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1477880692768},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1477880692768},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1477880692783},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1477880692783},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1477880692799},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1477880692799},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1477880693080},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477880693158},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477880693173},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1477880692703},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1477880692768},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477880693173},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477880693173},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477880693173},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477880693173},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1477880693267},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1477880693282},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1477880693298},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477880693345},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1477880693329},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1477880693376},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1477880693376},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1477880693376},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1477880693563},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477880693454},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477880693392},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477880693438},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477880693407},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1477880693579},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1477880692344},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1477880692360},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1477880692360},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1477880692376},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1477880692376},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1477880692360},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"7894c355d323b25337f7ccc441be6cfe434fe523","modified":1477880692376},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1477880692391},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1477880692407},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1477880692391},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1477880692438},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1477880692438},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1477880692376},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1477880692360},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1477880692454},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1477880692454},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1477880692469},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1477880692500},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1477880692485},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1477880692485},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1477880692516},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1477880692485},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1477880692516},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1477880692500},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1477880692532},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1477880692516},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1477880692532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1477880692532},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1477880692516},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1477880692563},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1477880692532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1477880692547},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1477880692547},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1477880692563},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1477880692578},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1477880692563},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1477880692578},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1477880692578},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1477880692594},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1477880692578},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1477880692610},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1477880692610},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1477880692719},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1477880692719},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1477880692594},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1477880692750},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1477880692594},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1477880692610},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1477880692454},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477880693173},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1477880693220},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1477880693189},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477880693438},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1477880693204},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1477880693267},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1477880693220},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1477880693610},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1477880693423},{"_id":"source/_posts/2016-11-04-Git教程.md","hash":"8439e2ac0987542759797d8cc18c47a8cdaac501","modified":1478253844563}],"Category":[{"name":"VPN","_id":"civ39nnqy00060gpkwejmyvcp"},{"name":"web服务器","_id":"civ39nnr600090gpk9jdn4sux"},{"name":"Dev","_id":"civ39nnr7000c0gpk4nffkb3a"},{"name":"数据库","_id":"civ39nnth000p0gpkj4rbi4gr"},{"name":"杂项","_id":"civ39nnts000u0gpkl4jrapn6"},{"name":"文章阅读","_id":"civ39nntz00110gpk0k75ekp3"},{"name":"环境搭建","_id":"civ39nnuu001k0gpkf1mzhmwl"},{"name":"系统管理","_id":"civ39nnw500250gpkdirja7yn"},{"name":"虚拟化","_id":"civ39nnx0002w0gpktdg0wqum"},{"name":"集群自动化","_id":"civ39nnx000370gpkwmce2wv9"}],"Data":[],"Page":[{"layout":"false","title":"404","date":"2016-11-01T01:03:48.000Z","_content":"\n<!doctype html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://leolan.top\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n","source":"404.html","raw":"layout: false\ntitle: \"404\"\ndate: 2016-11-01 9:03:48\n---\n\n<!doctype html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://leolan.top\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n","updated":"2016-11-01T06:30:24.857Z","path":"404.html","comments":1,"_id":"civ39nn6q00000gpkerng4vls","content":"\n<!doctype html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://leolan.top\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>\n\n","excerpt":"","more":"\n<!doctype html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://leolan.top\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n"},{"title":"分类","date":"2016-10-30T04:39:04.000Z","type":"categories","comments":0,"_content":"\n这里是分类","source":"categories/index.md","raw":"title: 分类\ndate: 2016-10-30 12:39:04\ntype: \"categories\"\ncomments: false\n---\n\n这里是分类","updated":"2016-10-31T04:18:22.261Z","path":"categories/index.html","layout":"page","_id":"civ39nnf200010gpkg0wh8l3c","content":"<p>这里是分类</p>\n","excerpt":"","more":"<p>这里是分类</p>\n"},{"title":"标签","date":"2016-10-30T04:39:04.000Z","type":"tags","comments":0,"_content":"\n这里是标签","source":"tags/index.md","raw":"title: 标签\ndate: 2016-10-30 12:39:04\ntype: \"tags\"\ncomments: false\n---\n\n这里是标签","updated":"2016-10-31T04:19:24.443Z","path":"tags/index.html","layout":"page","_id":"civ39nnf200020gpkair6ejuz","content":"<p>这里是标签</p>\n","excerpt":"","more":"<p>这里是标签</p>\n"},{"title":"关于","date":"2016-10-30T04:39:04.000Z","type":"about","comments":0,"_content":"\n#感谢\n 感谢您的来访！","source":"about/index.md","raw":"title: 关于\ndate: 2016-10-30 12:39:04\ntype: \"about\"\ncomments: false\n---\n\n#感谢\n 感谢您的来访！","updated":"2016-11-01T06:56:06.344Z","path":"about/index.html","layout":"page","_id":"civ39nngs00030gpk8l857gss","content":"<p>#感谢<br> 感谢您的来访！</p>\n","excerpt":"","more":"<p>#感谢<br> 感谢您的来访！</p>\n"}],"Post":[{"title":"穷人VPN","date":"2016-11-01T08:08:50.000Z","_content":"\n# sshuttle：不需配置的 VPN\n\nsshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle。\n\n按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。\n\n---\n## 使用：\nsshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：\n\n安装：\n法1: \n\n`pip install sshuttle`\n\n法2:\n\n```python\ngit clone https://github.com/sshuttle/sshuttle.git\n./setup.py install\n```\n`sshuttle -r username@sshserver 0.0.0.0/0 -vv`\nStarting sshuttle proxy.\nBinding: 12300\nListening on ('127.0.0.1', 12300).\n[local sudo] Password: \nfirewall manager ready.\nc : connecting to server...\n...\n\n成功运行 sshuttle 后会在 Terminal 上看到一些运行时 log：\n![][image-1]\n\n[image-1]:\thttp://ofyfogrgx.bkt.clouddn.com//blog/%E7%A9%B7%E4%BA%BAvpn001.png","source":"_posts/VPN_墙/2016-11-01-穷人VPN.md","raw":"---\ntitle: 穷人VPN\ncategories:\n  - VPN\ntags:\n  - 穷人VPN\n  - 免安装VPN\ndate: 2016-11-01 16:08:50\n---\n\n# sshuttle：不需配置的 VPN\n\nsshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle。\n\n按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。\n\n---\n## 使用：\nsshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：\n\n安装：\n法1: \n\n`pip install sshuttle`\n\n法2:\n\n```python\ngit clone https://github.com/sshuttle/sshuttle.git\n./setup.py install\n```\n`sshuttle -r username@sshserver 0.0.0.0/0 -vv`\nStarting sshuttle proxy.\nBinding: 12300\nListening on ('127.0.0.1', 12300).\n[local sudo] Password: \nfirewall manager ready.\nc : connecting to server...\n...\n\n成功运行 sshuttle 后会在 Terminal 上看到一些运行时 log：\n![][image-1]\n\n[image-1]:\thttp://ofyfogrgx.bkt.clouddn.com//blog/%E7%A9%B7%E4%BA%BAvpn001.png","slug":"VPN-墙-2016-11-01-穷人VPN","published":1,"updated":"2016-11-03T15:52:10.026Z","_id":"civ39nnqq00040gpkkqc7qd25","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"sshuttle：不需配置的-VPN\"><a href=\"#sshuttle：不需配置的-VPN\" class=\"headerlink\" title=\"sshuttle：不需配置的 VPN\"></a>sshuttle：不需配置的 VPN</h1><p>sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle。</p>\n<p>按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。</p>\n<hr>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：</p>\n<p>安装：<br>法1: </p>\n<p><code>pip install sshuttle</code></p>\n<p>法2:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/sshuttle/sshuttle.git</div><div class=\"line\">./setup.py install</div></pre></td></tr></table></figure>\n<p><code>sshuttle -r username@sshserver 0.0.0.0/0 -vv</code><br>Starting sshuttle proxy.<br>Binding: 12300<br>Listening on (‘127.0.0.1’, 12300).<br>[local sudo] Password:<br>firewall manager ready.<br>c : connecting to server…<br>…</p>\n<p>成功运行 sshuttle 后会在 Terminal 上看到一些运行时 log：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%A9%B7%E4%BA%BAvpn001.png\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"sshuttle：不需配置的-VPN\"><a href=\"#sshuttle：不需配置的-VPN\" class=\"headerlink\" title=\"sshuttle：不需配置的 VPN\"></a>sshuttle：不需配置的 VPN</h1><p>sshuttle 被其作者称为 “穷人的 VPN”（A poor man’s instant VPN），甚至不需要远端服务器的 root 权限就可以用（只需要一个普通 SSH 帐号），和在 Mac/Linux 客户端直接用 ssh -D 的方式有点类似。如果不想花钱买 VPN，又懒得自己在 VPS 上安装和设置复杂的 VPN 服务，又不想用 ssh -D 这么朴素的技巧的话可以试一下这个 sshuttle。</p>\n<p>按照作者的说法 sshuttle 比 sshd -D 的方式快一点，因为 It’s just data-over-TCP，而不是 TCP-over-TCP，TCP-over-TCP 的方式会带来不必要的性能问题，因为 TCP 本身就是可靠传输协议，保证了包的有序性和无差错，并确保包被接受，如果有包丢失的话 TCP 协议可以自己立即重传弥补，所以没必要两层都 TCP，一层 TCP 就比较安全了。</p>\n<hr>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>sshuttle 的用法很简单，在客户端下载和运行就可以了（需要有 Python 的支持），无需在服务器端做任何配置（但是需要一个 ssh 帐号和 Python 支持）：</p>\n<p>安装：<br>法1: </p>\n<p><code>pip install sshuttle</code></p>\n<p>法2:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/sshuttle/sshuttle.git</div><div class=\"line\">./setup.py install</div></pre></td></tr></table></figure>\n<p><code>sshuttle -r username@sshserver 0.0.0.0/0 -vv</code><br>Starting sshuttle proxy.<br>Binding: 12300<br>Listening on (‘127.0.0.1’, 12300).<br>[local sudo] Password:<br>firewall manager ready.<br>c : connecting to server…<br>…</p>\n<p>成功运行 sshuttle 后会在 Terminal 上看到一些运行时 log：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%A9%B7%E4%BA%BAvpn001.png\" alt=\"\"></p>\n"},{"layout":"post","title":"OpenResty（高性能web服务器）","_content":"\n# OpenResty#\n\n参考资料：\n\n官方: http://openresty.org/\nGithub: https://github.com/agentzh/ngx_openresty      https://github.com/openresty/\n\n视频学习：http://www.stuq.org/course/detail/1015\n\nOpenResty最佳实践：https://moonbingbing.gitbooks.io/openresty-best-practices/content/ （https://github.com/moonbingbing/openresty-best-practices）\n\n---\n\n# 安装OpenResty #\n默认安装路径如下\n\n* /usr/local/openresty/\n\nOpenResty，也被称为“ngx_openresty”，是一个基于Nginx的核心Web应用程序服务器，它包含了大量的第三方的Nginx模块和大部分系统依赖包。 OpenResty不是Nginx的分支，它只是一个软件包。主要有章亦春维护。\n为什么是OpenResty？\nOpenResty允许开发人员使用lua编程语言构建现有的Nginx的C模块，支持高流量的应用程序。\n\n依赖的软件包：\n> * perl 5.6.1+\n> * libreadline\n> * libpcre\n> * libssl\n\nDebian 和 Ubuntu系统：\n```\napt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make\n```\n\nFedora 、RedHat 和 centos系统：\n```\nyum install readline-devel pcre-devel openssl-devel gc-c++ -y\n```\n\n下载OpenResty、解压、编译、安装：\n版本选择：https://openresty.org/en/download.html\n```\nwget http://openresty.org/download/ngx_openresty-1.5.8.1.tar.gz\ntar xzvf ngx_openresty-1.5.8.1.tar.gz\ncd ngx_openresty-1.5.8.1/\n./configure --with-luajit\nmake\nmake install\n```\n另外的配置选项：\n```\n./configure --prefix=/opt/openresty \n--with-luajit \n--without-http_redis2_module \n--with-http_iconv_module \n--with-http_postgres_module \n-j2\n--help to see more options\n```\n此时安装完成，打开localhost就可以看到nginx页面了。\n\n","source":"_posts/web服务器/2016-10-21-OpenResty_install.md","raw":"---\nlayout: post\ntitle: \"OpenResty（高性能web服务器）\"\ncategories:\n- web服务器\ntags:\n- OpenResty\n- 高性能web服务器\n\n\n---\n\n# OpenResty#\n\n参考资料：\n\n官方: http://openresty.org/\nGithub: https://github.com/agentzh/ngx_openresty      https://github.com/openresty/\n\n视频学习：http://www.stuq.org/course/detail/1015\n\nOpenResty最佳实践：https://moonbingbing.gitbooks.io/openresty-best-practices/content/ （https://github.com/moonbingbing/openresty-best-practices）\n\n---\n\n# 安装OpenResty #\n默认安装路径如下\n\n* /usr/local/openresty/\n\nOpenResty，也被称为“ngx_openresty”，是一个基于Nginx的核心Web应用程序服务器，它包含了大量的第三方的Nginx模块和大部分系统依赖包。 OpenResty不是Nginx的分支，它只是一个软件包。主要有章亦春维护。\n为什么是OpenResty？\nOpenResty允许开发人员使用lua编程语言构建现有的Nginx的C模块，支持高流量的应用程序。\n\n依赖的软件包：\n> * perl 5.6.1+\n> * libreadline\n> * libpcre\n> * libssl\n\nDebian 和 Ubuntu系统：\n```\napt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make\n```\n\nFedora 、RedHat 和 centos系统：\n```\nyum install readline-devel pcre-devel openssl-devel gc-c++ -y\n```\n\n下载OpenResty、解压、编译、安装：\n版本选择：https://openresty.org/en/download.html\n```\nwget http://openresty.org/download/ngx_openresty-1.5.8.1.tar.gz\ntar xzvf ngx_openresty-1.5.8.1.tar.gz\ncd ngx_openresty-1.5.8.1/\n./configure --with-luajit\nmake\nmake install\n```\n另外的配置选项：\n```\n./configure --prefix=/opt/openresty \n--with-luajit \n--without-http_redis2_module \n--with-http_iconv_module \n--with-http_postgres_module \n-j2\n--help to see more options\n```\n此时安装完成，打开localhost就可以看到nginx页面了。\n\n","slug":"web服务器-2016-10-21-OpenResty-install","published":1,"date":"2016-10-31T04:22:53.243Z","updated":"2016-11-01T06:47:46.065Z","comments":1,"photos":[],"link":"","_id":"civ39nnqv00050gpkmzodduxq","content":"<h1 id=\"OpenResty\"><a href=\"#OpenResty\" class=\"headerlink\" title=\"OpenResty\"></a>OpenResty</h1><p>参考资料：</p>\n<p>官方: <a href=\"http://openresty.org/\" target=\"_blank\" rel=\"external\">http://openresty.org/</a><br>Github: <a href=\"https://github.com/agentzh/ngx_openresty\" target=\"_blank\" rel=\"external\">https://github.com/agentzh/ngx_openresty</a>      <a href=\"https://github.com/openresty/\" target=\"_blank\" rel=\"external\">https://github.com/openresty/</a></p>\n<p>视频学习：<a href=\"http://www.stuq.org/course/detail/1015\" target=\"_blank\" rel=\"external\">http://www.stuq.org/course/detail/1015</a></p>\n<p>OpenResty最佳实践：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/\" target=\"_blank\" rel=\"external\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/</a> （<a href=\"https://github.com/moonbingbing/openresty-best-practices）\" target=\"_blank\" rel=\"external\">https://github.com/moonbingbing/openresty-best-practices）</a></p>\n<hr>\n<h1 id=\"安装OpenResty\"><a href=\"#安装OpenResty\" class=\"headerlink\" title=\"安装OpenResty\"></a>安装OpenResty</h1><p>默认安装路径如下</p>\n<ul>\n<li>/usr/local/openresty/</li>\n</ul>\n<p>OpenResty，也被称为“ngx_openresty”，是一个基于Nginx的核心Web应用程序服务器，它包含了大量的第三方的Nginx模块和大部分系统依赖包。 OpenResty不是Nginx的分支，它只是一个软件包。主要有章亦春维护。<br>为什么是OpenResty？<br>OpenResty允许开发人员使用lua编程语言构建现有的Nginx的C模块，支持高流量的应用程序。</p>\n<p>依赖的软件包：</p>\n<blockquote>\n<ul>\n<li>perl 5.6.1+</li>\n<li>libreadline</li>\n<li>libpcre</li>\n<li>libssl</li>\n</ul>\n</blockquote>\n<p>Debian 和 Ubuntu系统：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> install libreadline-<span class=\"built_in\">dev</span> libncurses5-<span class=\"built_in\">dev</span> libpcre3-<span class=\"built_in\">dev</span> libssl-<span class=\"built_in\">dev</span> perl make</div></pre></td></tr></table></figure></p>\n<p>Fedora 、RedHat 和 centos系统：<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"comment\">readline</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gc</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">-</span><span class=\"comment\">y</span></div></pre></td></tr></table></figure></p>\n<p>下载OpenResty、解压、编译、安装：<br>版本选择：<a href=\"https://openresty.org/en/download.html\" target=\"_blank\" rel=\"external\">https://openresty.org/en/download.html</a><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://openresty.org/download/ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>.tar.gz</div><div class=\"line\">tar xzvf ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>.tar.gz</div><div class=\"line\">cd ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>/</div><div class=\"line\">./configure --with-luajit</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>另外的配置选项：<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/opt/openresty </div><div class=\"line\">-<span class=\"ruby\">-with-luajit </span></div><div class=\"line\">-<span class=\"ruby\">-without-http_redis2_module </span></div><div class=\"line\">-<span class=\"ruby\">-with-http_iconv_module </span></div><div class=\"line\">-<span class=\"ruby\">-with-http_postgres_module </span></div><div class=\"line\">-<span class=\"ruby\">j2</span></div><div class=\"line\">-<span class=\"ruby\">-help to see more options</span></div></pre></td></tr></table></figure></p>\n<p>此时安装完成，打开localhost就可以看到nginx页面了。</p>\n","excerpt":"","more":"<h1 id=\"OpenResty\"><a href=\"#OpenResty\" class=\"headerlink\" title=\"OpenResty\"></a>OpenResty</h1><p>参考资料：</p>\n<p>官方: <a href=\"http://openresty.org/\">http://openresty.org/</a><br>Github: <a href=\"https://github.com/agentzh/ngx_openresty\">https://github.com/agentzh/ngx_openresty</a>      <a href=\"https://github.com/openresty/\">https://github.com/openresty/</a></p>\n<p>视频学习：<a href=\"http://www.stuq.org/course/detail/1015\">http://www.stuq.org/course/detail/1015</a></p>\n<p>OpenResty最佳实践：<a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/\">https://moonbingbing.gitbooks.io/openresty-best-practices/content/</a> （<a href=\"https://github.com/moonbingbing/openresty-best-practices）\">https://github.com/moonbingbing/openresty-best-practices）</a></p>\n<hr>\n<h1 id=\"安装OpenResty\"><a href=\"#安装OpenResty\" class=\"headerlink\" title=\"安装OpenResty\"></a>安装OpenResty</h1><p>默认安装路径如下</p>\n<ul>\n<li>/usr/local/openresty/</li>\n</ul>\n<p>OpenResty，也被称为“ngx_openresty”，是一个基于Nginx的核心Web应用程序服务器，它包含了大量的第三方的Nginx模块和大部分系统依赖包。 OpenResty不是Nginx的分支，它只是一个软件包。主要有章亦春维护。<br>为什么是OpenResty？<br>OpenResty允许开发人员使用lua编程语言构建现有的Nginx的C模块，支持高流量的应用程序。</p>\n<p>依赖的软件包：</p>\n<blockquote>\n<ul>\n<li>perl 5.6.1+</li>\n<li>libreadline</li>\n<li>libpcre</li>\n<li>libssl</li>\n</ul>\n</blockquote>\n<p>Debian 和 Ubuntu系统：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> install libreadline-<span class=\"built_in\">dev</span> libncurses5-<span class=\"built_in\">dev</span> libpcre3-<span class=\"built_in\">dev</span> libssl-<span class=\"built_in\">dev</span> perl make</div></pre></td></tr></table></figure></p>\n<p>Fedora 、RedHat 和 centos系统：<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"comment\">readline</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gc</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"literal\">-</span><span class=\"comment\">y</span></div></pre></td></tr></table></figure></p>\n<p>下载OpenResty、解压、编译、安装：<br>版本选择：<a href=\"https://openresty.org/en/download.html\">https://openresty.org/en/download.html</a><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://openresty.org/download/ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>.tar.gz</div><div class=\"line\">tar xzvf ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>.tar.gz</div><div class=\"line\">cd ngx_openresty-<span class=\"number\">1.5</span><span class=\"meta\">.8</span><span class=\"meta\">.1</span>/</div><div class=\"line\">./configure --with-luajit</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>另外的配置选项：<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/opt/openresty </div><div class=\"line\">-<span class=\"ruby\">-with-luajit </div><div class=\"line\"></span>-<span class=\"ruby\">-without-http_redis2_module </div><div class=\"line\"></span>-<span class=\"ruby\">-with-http_iconv_module </div><div class=\"line\"></span>-<span class=\"ruby\">-with-http_postgres_module </div><div class=\"line\"></span>-<span class=\"ruby\">j2</div><div class=\"line\"></span>-<span class=\"ruby\">-help to see more options</span></div></pre></td></tr></table></figure></p>\n<p>此时安装完成，打开localhost就可以看到nginx页面了。</p>\n"},{"title":"开发相关网页链接","date":"2016-11-03T02:17:39.000Z","_content":"\n\n## 基于HTML5的APP\nhttp://www.wex5.com/\n\n---\n## 微信\n\n* 微信小程序 (应用号) 微信 web 开发者工具破解版\n\nhttp://www.diycode.cc/topics/308?\n\n* 微信小程序\n\nhttps://git.oschina.net/codebean/wechat-demo?from=20160925","source":"_posts/Dev/2016-11-03-开发相关网页链接.md","raw":"---\ntitle: 开发相关网页链接\ncategories:\n  - Dev\ntags:\n  - 网页链接更新页\ndate: 2016-11-03 10:17:39\n---\n\n\n## 基于HTML5的APP\nhttp://www.wex5.com/\n\n---\n## 微信\n\n* 微信小程序 (应用号) 微信 web 开发者工具破解版\n\nhttp://www.diycode.cc/topics/308?\n\n* 微信小程序\n\nhttps://git.oschina.net/codebean/wechat-demo?from=20160925","slug":"Dev-2016-11-03-开发相关网页链接","published":1,"updated":"2016-11-03T02:25:14.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnr300080gpkpmx5b4by","content":"<h2 id=\"基于HTML5的APP\"><a href=\"#基于HTML5的APP\" class=\"headerlink\" title=\"基于HTML5的APP\"></a>基于HTML5的APP</h2><p><a href=\"http://www.wex5.com/\" target=\"_blank\" rel=\"external\">http://www.wex5.com/</a></p>\n<hr>\n<h2 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h2><ul>\n<li>微信小程序 (应用号) 微信 web 开发者工具破解版</li>\n</ul>\n<p><a href=\"http://www.diycode.cc/topics/308?\" target=\"_blank\" rel=\"external\">http://www.diycode.cc/topics/308?</a></p>\n<ul>\n<li>微信小程序</li>\n</ul>\n<p><a href=\"https://git.oschina.net/codebean/wechat-demo?from=20160925\" target=\"_blank\" rel=\"external\">https://git.oschina.net/codebean/wechat-demo?from=20160925</a></p>\n","excerpt":"","more":"<h2 id=\"基于HTML5的APP\"><a href=\"#基于HTML5的APP\" class=\"headerlink\" title=\"基于HTML5的APP\"></a>基于HTML5的APP</h2><p><a href=\"http://www.wex5.com/\">http://www.wex5.com/</a></p>\n<hr>\n<h2 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h2><ul>\n<li>微信小程序 (应用号) 微信 web 开发者工具破解版</li>\n</ul>\n<p><a href=\"http://www.diycode.cc/topics/308?\">http://www.diycode.cc/topics/308?</a></p>\n<ul>\n<li>微信小程序</li>\n</ul>\n<p><a href=\"https://git.oschina.net/codebean/wechat-demo?from=20160925\">https://git.oschina.net/codebean/wechat-demo?from=20160925</a></p>\n"},{"title":"MySQL数据库","date":"2016-11-03T02:46:10.000Z","_content":"\nMySql\n### 特别要注意大小写和命令后的英文;号。\n**新安装默认密码为空**`mysql -u root` 即可进入，不要`mysql -u root -p `进不去的\n大于5.7的版本默认有随机密码，执行`cat  /var/log/mysqld.log | grep password | grep 'root@localhost' | awk -F 'root@localhost: ' '{print $2}'`查看随机生成的密码。\n\n\n## 查看数据库\n`SHOW DATABASES;`\n\n## 查看表\n\tUSE blog;\n\tSHOW TABLES;\n## 查看表中的列\n\tSHOW COLUMNS FROM auth_user; 或：DESCRIBE auth_user;\n**describe 表名** 是 **show columns from 表名** 的一种快捷方式。\n\n## 创建数据库\n```mysql\nmysql> CREATE DATABASE 库名;\nmysql> USE 库名;\nmysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));```\n例：\n## 创建表\n```\nuse demo;\ncreate table pet(\n        name varchar(20),        #名字\n        owner varchar(20),       #主人\n        species varchar(20),     #种类\n        sex char(1),             #性别\n        birth date,              #出生日期\n        death date               #死亡日期\n)```\n\n为了验证你的表是按你期望的方式创建，使用一个**DESCRIBE**语句：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/mysql%E6%95%B0%E6%8D%AE%E5%BA%93001.jpg)\n\n## 删除数据库：\nmysql> `DROP DATABASE 库名;`\n## 删除数据表：\nmysql> `DROP TABLE 表名；`\n## 将表中记录清空：\nmysql> `DELETE FROM 表名;`\n\n## 创建表(复杂形式)：\n### 创建customer表：\n```\ncreate table customers(\n    id int not null auto_increment,\n    name char(20) not null,\n    address char(50) null,\n    city char(50) null,\n    age int not null,\n    love char(50) not null default 'No habbit',\n    primary key(id)\n)engine=InnoDB;```\n\n**SELECT last_insert_id();**这个函数可以获得返回最后一个**auto_increment**值。默认值为：default 'No habbit',\n引擎类型，多为**engine = InnoDB**，如果省略了**engine=**语句，则使用默认的引擎(MyISAM)\n\n## 更改表结构：\n\n- 增加一列：\n\t`alter table pet add des char(100) null;`\n- 删除：\n    `alter table pet drop column des;`\n- 重命名表：\n\t`rename table pet to animals;`\n- 添加id字段：\n```\nalter table pet add id int not null\nprimary key auto_increment first;```\n详见：http://www.cnblogs.com/beginman/p/3249472.html\n\n\n\n## 查看密码\n* 1.用root 进入mysql后\nmysql>`set password =password('你的密码');`\nmysql>`flush privileges;`\n\n* 2.使用GRANT语句 \nmysql>`grant all on *.* to 'root'@'localhost' IDENTIFIED BY '你的密码'with grant option ;`\nmysql>`flush privileges;`\n\n* 3.进入mysql库修改user表\nmysql>`use mysql;`\nmysql>`update user set password=password('你的密码') where user='root'; `\nmysql>`flush privileges;`\n\n## 设置数据库密码\n```\nmysql -u root -p\n> （输入密码）\n> create user '用户名'@'localhost' identified by '密码';\n> grant all privileges on 库名.* to '用户名'@'localhost';\n> flush privileges;\n> exit;```\n\n## 修改Mysql密码\n- 方法一：\n使用phpmyadmin，直接修改Mysql库的user 表。或者使用Navicat for Mysql 直接修改连接属性。\n【据说可以用直接修改user表文件的方法：\n**法一：**关闭MySQL，Windows下打开Mysql\\data\\mysql，有三个文件user.frm,user.MYD,user.MYI找个知道密码的MySQL，替换相应的这三个文件，如果user表结构没改过，一般也没人去改，替换user.MYD就可以了。\n**法二：**也可以直接编辑user.MYD，找个十六进制编辑器，UltraEdit就有这个功能。关闭MySQL，打开user.MYD。将用户名root后面的八个字符改为565491d704013245，新密码就是123456。或者将它们对应的十六进制数字，（左边那里，一个字符对应两个数字），改为 00 02 02 02 02 02 02 02,这就是空密码，在编辑器右边看到的都是星号*，看起来很象小数点。重开MySQL，输入root和你的新密码。】\n\n- 方法二：使用mysqladmin\ncd到mysql的bin文件夹，然后执行如下\nD:\\Mysql\\bin>`mysqladmin -u root -p password 新密码`\nEnter password:(在此输入原密码)\n格式：**mysqladmin -u用户名 -p旧密码 password 新密码。**\n\n#### 忘记密码：\n- 1.用root或者运行mysqld的用户登录系统； \n- 2．利用kill命令结束掉mysqld的进程； \n- 3．使用**--skip-grant-tables**参数启动MySQL Server \n- shell>`mysqld_safe --skip-grant-tables &` \n- UPDATE user SET password=PASSWORD(\"new password\") WHERE user='root';\n- 4.为root@localhost设置新密码 \n- shell>`mysqladmin -u root flush-privileges password \"newpassword\"`\n- 5．重启MySQL Server\n\n---\n\n看提示，PHP执行时看错误，是用mysql还是mysqli\n语法\n**mysql_connect(servername,username,password);**\n\n参数描述servername可选。规定要连接的服务器。默认是 \"localhost:3306\"。username可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。password可选。规定登录所用的密码。默认是 \"\"。\n\n语法\n**CREATE DATABASE database_name**\n\n|参数|描述|\n|-----|-------|\n|servername|可选。规定要连接的服务器。默认是 \"localhost:3306\"。|\n|username|可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。|\n|passwd|可选。规定登录所用的密码。默认是 \"\"。|\n\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。\n连接：\n例子:\n```php\n<?php\n//在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 \"die\" 部分：\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }```\n\n\n创建：\n```mysql\n// Create database\n//创建了一个名为 \"my_db\" 的数据库：\nif (mysql_query(\"CREATE DATABASE my_db\",$con))\n  {\n  echo \"Database created\";\n  }\nelse\n  {\n  echo \"Error creating database: \" . mysql_error();\n  }\n\n// Create table in my_db database\n//创建一个名为 \"Persons\" 的表，此表有三列。列名是 \"FirstName\", \"LastName\" 以及 \"Age\"：\n//重要事项：在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。\n//注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。\nmysql_select_db(\"my_db\", $con);\n$sql = \"CREATE TABLE Persons \n(\nFirstName varchar(15),\nLastName varchar(15),\nAge int\n)\";\nmysql_query($sql,$con);\n\nmysql_close($con);   //提前关闭连接，请使用 mysql_close() 函数,不加此句则脚本结束后关闭。\n?>```\n\n---\n\nMySQL 数据类型\n下面的可使用的各种 MySQL 数据类型：\n\n|数值类型|描述|\n|---|---|\n| int(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| smallint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| tinyint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| mediumint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| bigint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n|---|---|\n| decimal(size,d)|支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n| double(size,d)|支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n| float(size,d) |支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n\n\n|文本数据类型|描述|\n|-------|-----|\n|char(size)|支持固定长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定固定长度。|\n|varchar(size)|支持可变长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定最大长度。|\n|tinytext|支持可变长度的字符串，最大长度是 255 个字符。|\n|text blob|支持可变长度的字符串，最大长度是 65535 个字符。|\n|mediumtext mediumblob|支持可变长度的字符串，最大长度是 16777215 个字符。|\n|longtext longblob|支持可变长度的字符串，最大长度是 4294967295 个字符。|\n\n|日期数据类型|描述|\n|----|----|\n|date(yyyy-mm-dd)|支持日期或时间|\n|datetime(yyyy-mm-dd hh:mm:ss)|支持日期或时间|\n|timestamp(yyyymmddhhmmss)|支持日期或时间|\n|time(hh:mm:ss)|支持日期或时间|\n\n|杂项数据类型|描述|\n|---|---|\n|enum(value1,value2,ect)|ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。|\n|set|SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice|\n\n#### 主键和自动递增字段\n每个表都应有一个主键字段。\n主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。\n主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。\n下面的例子把 **personID** 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 **AUTO_INCREMENT** 设置。**AUTO_INCREMENT** 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 **NOT NULL** 设置。\n例：\n```mysql\n$sql = \"CREATE TABLE Persons \n(\npersonID int NOT NULL AUTO_INCREMENT, \nPRIMARY KEY(personID),\nFirstName varchar(15),\nLastName varchar(15),\nAge int\n)\";\n\nmysql_query($sql,$con);```\n\n#### 插入：\n语法\n```\nINSERT INTO table_name\nVALUES (value1, value2,....)```\n您还可以规定希望在其中插入数据的列：\n```\nINSERT INTO table_name (column1, column2,...)\nVALUES (value1, value2,....)```\n注释：SQL 语句对大小写不敏感。**INSERT INTO 与 insert into** 相同。\n\n\n为了让 PHP 执行该语句，我们必须使用 **mysql_query()** 函数。该函数用于向 MySQL 连接发送查询或命令。\n例子\n在前面的章节，我们创建了一个名为 \"Persons\" 的表，有三个列：\"Firstname\", \"Lastname\" 以及 \"Age\"。我们将在本例中使用同样的表。下面的例子向 \"Persons\" 表添加了两个新记录：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"INSERT INTO Persons (FirstName, LastName, Age) \nVALUES ('Peter', 'Griffin', '35')\");\n\nmysql_query(\"INSERT INTO Persons (FirstName, LastName, Age) \nVALUES ('Glenn', 'Quagmire', '33')\");\n\nmysql_close($con);\n?>```\n\n#### 把来自表单的数据插入数据库\n现在，我们创建一个 HTML 表单，这个表单可把新记录插入 \"Persons\" 表。\n这是这个 HTML 表单：\n```html\n<html>\n<body>\n\n<form action=\"insert.php\" method=\"post\">\nFirstname: <input type=\"text\" name=\"firstname\" />\nLastname: <input type=\"text\" name=\"lastname\" />\nAge: <input type=\"text\" name=\"age\" />\n<input type=\"submit\" />\n</form>\n\n</body>\n</html>```\n\n当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 \"insert.php\"。\"insert.php\" 文件连接数据库，并通过 **$_POST** 变量从表单取回值。然后，mysql_query() 函数执行 **INSERT INTO** 语句，一条新的记录会添加到数据库表中。\n下面是 \"insert.php\" 页面的代码：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$sql=\"INSERT INTO Persons (FirstName, LastName, Age)\nVALUES\n('$_POST[firstname]','$_POST[lastname]','$_POST[age]')\";\n\nif (!mysql_query($sql,$con))\n  {\n  die('Error: ' . mysql_error());\n  }\necho \"1 record added\";\n\nmysql_close($con)\n?>```\n\n\n#### 修改：\n`UPDATE` 语句用于修改数据库表中的数据。\n语法\n```mysql\nUPDATE table_name\nSET column_name = new_value\nWHERE column_name = some_value```\n\n注释：SQL 对大小写不敏感。UPDATE 与 update 等效。\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。\n例子\n稍早时，我们在本教程中创建了一个名为 \"Persons\" 的表。它看起来类似这样：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|35|\n|Glenn|Quagmire|33|\n下面的例子更新 \"Persons\" 表的一些数据：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"UPDATE Persons SET Age = '36'\nWHERE FirstName = 'Peter' AND LastName = 'Griffin'\");\n\nmysql_close($con);\n?>```\n在这次更新后，\"Persons\" 表格是这样的：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|36|\n|Glenn|Quagmire|33|\n\n#### 删除：\n删除数据库中的数据\n`DELETE FROM` 语句用于从数据库表中删除记录。\n语法\n```mysql\nDELETE FROM table_name\nWHERE column_name = some_value```\n\n注释：SQL 对大小写不敏感。DELETE FROM 与 delete from 等效。\n为了让 PHP 执行上面的语句，我们必须使用 **mysql_query**( 函数。该函数用于向 SQL 连接发送查询和命令。\n例子\n稍早时，我们在本教程中创建了一个名为 \"Persons\" 的表。它看起来类似这样：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|35|\n|Glenn|Quagmire|33|\n下面的例子删除 \"Persons\" 表中所有 LastName='Griffin' 的记录：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"DELETE FROM Persons WHERE LastName='Griffin'\");\n\nmysql_close($con);\n?>```\n在这次删除之后，表是这样的：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Glenn|Quagmire|33|\n\n#### 查询：\n`SELECT` 语句用于从数据库中选取数据。\n语法\nSELECT column_name(s) FROM table_name\n注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。\n为了让 PHP 执行上面的语句，我们必须使用** mysql_query()** 函数。该函数用于向 MySQL 发送查询或命令。\n例子\n下面的例子选取存储在 \"Persons\" 表中的所有数据（* 字符选取表中所有数据）：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$result = mysql_query(\"SELECT * FROM Persons\");\n\nwhile($row = mysql_fetch_array($result))\n  {\n  echo $row['FirstName'] . \" \" . $row['LastName'];\n  echo \"<br />\";\n  }\n\nmysql_close($con);\n?>```\n上面这个例子在 $result 变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array() 函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop 语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row 变量 ($row['FirstName'] 和 $row['LastName'])。\n以上代码的输出：\nPeter Griffin\nGlenn Quagmire\n\n#### 在 HTML 表格中显示结果\n下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$result = mysql_query(\"SELECT * FROM Persons\");\n\necho \"<table border='1'>\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n</tr>\";\n\nwhile($row = mysql_fetch_array($result))\n  {\n  echo \"<tr>\";\n  echo \"<td>\" . $row['FirstName'] . \"</td>\";\n  echo \"<td>\" . $row['LastName'] . \"</td>\";\n  echo \"</tr>\";\n  }\necho \"</table>\";\n\nmysql_close($con);\n?>```\n以上代码的输出：\n\n|FirstName|LastName|\n|---|---|\n|Peter|Griffin|\n|Glenn|Quagmire|\n\n\n","source":"_posts/数据库/2016-11-03-MySQL数据库.md","raw":"---\ntitle: MySQL数据库\ncategories:\n  - 数据库\ntags:\n  - MySQL常用命令\ndate: 2016-11-03 10:46:10\n---\n\nMySql\n### 特别要注意大小写和命令后的英文;号。\n**新安装默认密码为空**`mysql -u root` 即可进入，不要`mysql -u root -p `进不去的\n大于5.7的版本默认有随机密码，执行`cat  /var/log/mysqld.log | grep password | grep 'root@localhost' | awk -F 'root@localhost: ' '{print $2}'`查看随机生成的密码。\n\n\n## 查看数据库\n`SHOW DATABASES;`\n\n## 查看表\n\tUSE blog;\n\tSHOW TABLES;\n## 查看表中的列\n\tSHOW COLUMNS FROM auth_user; 或：DESCRIBE auth_user;\n**describe 表名** 是 **show columns from 表名** 的一种快捷方式。\n\n## 创建数据库\n```mysql\nmysql> CREATE DATABASE 库名;\nmysql> USE 库名;\nmysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));```\n例：\n## 创建表\n```\nuse demo;\ncreate table pet(\n        name varchar(20),        #名字\n        owner varchar(20),       #主人\n        species varchar(20),     #种类\n        sex char(1),             #性别\n        birth date,              #出生日期\n        death date               #死亡日期\n)```\n\n为了验证你的表是按你期望的方式创建，使用一个**DESCRIBE**语句：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/mysql%E6%95%B0%E6%8D%AE%E5%BA%93001.jpg)\n\n## 删除数据库：\nmysql> `DROP DATABASE 库名;`\n## 删除数据表：\nmysql> `DROP TABLE 表名；`\n## 将表中记录清空：\nmysql> `DELETE FROM 表名;`\n\n## 创建表(复杂形式)：\n### 创建customer表：\n```\ncreate table customers(\n    id int not null auto_increment,\n    name char(20) not null,\n    address char(50) null,\n    city char(50) null,\n    age int not null,\n    love char(50) not null default 'No habbit',\n    primary key(id)\n)engine=InnoDB;```\n\n**SELECT last_insert_id();**这个函数可以获得返回最后一个**auto_increment**值。默认值为：default 'No habbit',\n引擎类型，多为**engine = InnoDB**，如果省略了**engine=**语句，则使用默认的引擎(MyISAM)\n\n## 更改表结构：\n\n- 增加一列：\n\t`alter table pet add des char(100) null;`\n- 删除：\n    `alter table pet drop column des;`\n- 重命名表：\n\t`rename table pet to animals;`\n- 添加id字段：\n```\nalter table pet add id int not null\nprimary key auto_increment first;```\n详见：http://www.cnblogs.com/beginman/p/3249472.html\n\n\n\n## 查看密码\n* 1.用root 进入mysql后\nmysql>`set password =password('你的密码');`\nmysql>`flush privileges;`\n\n* 2.使用GRANT语句 \nmysql>`grant all on *.* to 'root'@'localhost' IDENTIFIED BY '你的密码'with grant option ;`\nmysql>`flush privileges;`\n\n* 3.进入mysql库修改user表\nmysql>`use mysql;`\nmysql>`update user set password=password('你的密码') where user='root'; `\nmysql>`flush privileges;`\n\n## 设置数据库密码\n```\nmysql -u root -p\n> （输入密码）\n> create user '用户名'@'localhost' identified by '密码';\n> grant all privileges on 库名.* to '用户名'@'localhost';\n> flush privileges;\n> exit;```\n\n## 修改Mysql密码\n- 方法一：\n使用phpmyadmin，直接修改Mysql库的user 表。或者使用Navicat for Mysql 直接修改连接属性。\n【据说可以用直接修改user表文件的方法：\n**法一：**关闭MySQL，Windows下打开Mysql\\data\\mysql，有三个文件user.frm,user.MYD,user.MYI找个知道密码的MySQL，替换相应的这三个文件，如果user表结构没改过，一般也没人去改，替换user.MYD就可以了。\n**法二：**也可以直接编辑user.MYD，找个十六进制编辑器，UltraEdit就有这个功能。关闭MySQL，打开user.MYD。将用户名root后面的八个字符改为565491d704013245，新密码就是123456。或者将它们对应的十六进制数字，（左边那里，一个字符对应两个数字），改为 00 02 02 02 02 02 02 02,这就是空密码，在编辑器右边看到的都是星号*，看起来很象小数点。重开MySQL，输入root和你的新密码。】\n\n- 方法二：使用mysqladmin\ncd到mysql的bin文件夹，然后执行如下\nD:\\Mysql\\bin>`mysqladmin -u root -p password 新密码`\nEnter password:(在此输入原密码)\n格式：**mysqladmin -u用户名 -p旧密码 password 新密码。**\n\n#### 忘记密码：\n- 1.用root或者运行mysqld的用户登录系统； \n- 2．利用kill命令结束掉mysqld的进程； \n- 3．使用**--skip-grant-tables**参数启动MySQL Server \n- shell>`mysqld_safe --skip-grant-tables &` \n- UPDATE user SET password=PASSWORD(\"new password\") WHERE user='root';\n- 4.为root@localhost设置新密码 \n- shell>`mysqladmin -u root flush-privileges password \"newpassword\"`\n- 5．重启MySQL Server\n\n---\n\n看提示，PHP执行时看错误，是用mysql还是mysqli\n语法\n**mysql_connect(servername,username,password);**\n\n参数描述servername可选。规定要连接的服务器。默认是 \"localhost:3306\"。username可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。password可选。规定登录所用的密码。默认是 \"\"。\n\n语法\n**CREATE DATABASE database_name**\n\n|参数|描述|\n|-----|-------|\n|servername|可选。规定要连接的服务器。默认是 \"localhost:3306\"。|\n|username|可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。|\n|passwd|可选。规定登录所用的密码。默认是 \"\"。|\n\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。\n连接：\n例子:\n```php\n<?php\n//在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 \"die\" 部分：\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }```\n\n\n创建：\n```mysql\n// Create database\n//创建了一个名为 \"my_db\" 的数据库：\nif (mysql_query(\"CREATE DATABASE my_db\",$con))\n  {\n  echo \"Database created\";\n  }\nelse\n  {\n  echo \"Error creating database: \" . mysql_error();\n  }\n\n// Create table in my_db database\n//创建一个名为 \"Persons\" 的表，此表有三列。列名是 \"FirstName\", \"LastName\" 以及 \"Age\"：\n//重要事项：在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。\n//注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。\nmysql_select_db(\"my_db\", $con);\n$sql = \"CREATE TABLE Persons \n(\nFirstName varchar(15),\nLastName varchar(15),\nAge int\n)\";\nmysql_query($sql,$con);\n\nmysql_close($con);   //提前关闭连接，请使用 mysql_close() 函数,不加此句则脚本结束后关闭。\n?>```\n\n---\n\nMySQL 数据类型\n下面的可使用的各种 MySQL 数据类型：\n\n|数值类型|描述|\n|---|---|\n| int(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| smallint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| tinyint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| mediumint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n| bigint(size)|仅支持整数。在 size 参数中规定数字的最大值。|\n|---|---|\n| decimal(size,d)|支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n| double(size,d)|支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n| float(size,d) |支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。|\n\n\n|文本数据类型|描述|\n|-------|-----|\n|char(size)|支持固定长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定固定长度。|\n|varchar(size)|支持可变长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定最大长度。|\n|tinytext|支持可变长度的字符串，最大长度是 255 个字符。|\n|text blob|支持可变长度的字符串，最大长度是 65535 个字符。|\n|mediumtext mediumblob|支持可变长度的字符串，最大长度是 16777215 个字符。|\n|longtext longblob|支持可变长度的字符串，最大长度是 4294967295 个字符。|\n\n|日期数据类型|描述|\n|----|----|\n|date(yyyy-mm-dd)|支持日期或时间|\n|datetime(yyyy-mm-dd hh:mm:ss)|支持日期或时间|\n|timestamp(yyyymmddhhmmss)|支持日期或时间|\n|time(hh:mm:ss)|支持日期或时间|\n\n|杂项数据类型|描述|\n|---|---|\n|enum(value1,value2,ect)|ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。|\n|set|SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice|\n\n#### 主键和自动递增字段\n每个表都应有一个主键字段。\n主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。\n主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。\n下面的例子把 **personID** 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 **AUTO_INCREMENT** 设置。**AUTO_INCREMENT** 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 **NOT NULL** 设置。\n例：\n```mysql\n$sql = \"CREATE TABLE Persons \n(\npersonID int NOT NULL AUTO_INCREMENT, \nPRIMARY KEY(personID),\nFirstName varchar(15),\nLastName varchar(15),\nAge int\n)\";\n\nmysql_query($sql,$con);```\n\n#### 插入：\n语法\n```\nINSERT INTO table_name\nVALUES (value1, value2,....)```\n您还可以规定希望在其中插入数据的列：\n```\nINSERT INTO table_name (column1, column2,...)\nVALUES (value1, value2,....)```\n注释：SQL 语句对大小写不敏感。**INSERT INTO 与 insert into** 相同。\n\n\n为了让 PHP 执行该语句，我们必须使用 **mysql_query()** 函数。该函数用于向 MySQL 连接发送查询或命令。\n例子\n在前面的章节，我们创建了一个名为 \"Persons\" 的表，有三个列：\"Firstname\", \"Lastname\" 以及 \"Age\"。我们将在本例中使用同样的表。下面的例子向 \"Persons\" 表添加了两个新记录：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"INSERT INTO Persons (FirstName, LastName, Age) \nVALUES ('Peter', 'Griffin', '35')\");\n\nmysql_query(\"INSERT INTO Persons (FirstName, LastName, Age) \nVALUES ('Glenn', 'Quagmire', '33')\");\n\nmysql_close($con);\n?>```\n\n#### 把来自表单的数据插入数据库\n现在，我们创建一个 HTML 表单，这个表单可把新记录插入 \"Persons\" 表。\n这是这个 HTML 表单：\n```html\n<html>\n<body>\n\n<form action=\"insert.php\" method=\"post\">\nFirstname: <input type=\"text\" name=\"firstname\" />\nLastname: <input type=\"text\" name=\"lastname\" />\nAge: <input type=\"text\" name=\"age\" />\n<input type=\"submit\" />\n</form>\n\n</body>\n</html>```\n\n当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 \"insert.php\"。\"insert.php\" 文件连接数据库，并通过 **$_POST** 变量从表单取回值。然后，mysql_query() 函数执行 **INSERT INTO** 语句，一条新的记录会添加到数据库表中。\n下面是 \"insert.php\" 页面的代码：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$sql=\"INSERT INTO Persons (FirstName, LastName, Age)\nVALUES\n('$_POST[firstname]','$_POST[lastname]','$_POST[age]')\";\n\nif (!mysql_query($sql,$con))\n  {\n  die('Error: ' . mysql_error());\n  }\necho \"1 record added\";\n\nmysql_close($con)\n?>```\n\n\n#### 修改：\n`UPDATE` 语句用于修改数据库表中的数据。\n语法\n```mysql\nUPDATE table_name\nSET column_name = new_value\nWHERE column_name = some_value```\n\n注释：SQL 对大小写不敏感。UPDATE 与 update 等效。\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。\n例子\n稍早时，我们在本教程中创建了一个名为 \"Persons\" 的表。它看起来类似这样：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|35|\n|Glenn|Quagmire|33|\n下面的例子更新 \"Persons\" 表的一些数据：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"UPDATE Persons SET Age = '36'\nWHERE FirstName = 'Peter' AND LastName = 'Griffin'\");\n\nmysql_close($con);\n?>```\n在这次更新后，\"Persons\" 表格是这样的：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|36|\n|Glenn|Quagmire|33|\n\n#### 删除：\n删除数据库中的数据\n`DELETE FROM` 语句用于从数据库表中删除记录。\n语法\n```mysql\nDELETE FROM table_name\nWHERE column_name = some_value```\n\n注释：SQL 对大小写不敏感。DELETE FROM 与 delete from 等效。\n为了让 PHP 执行上面的语句，我们必须使用 **mysql_query**( 函数。该函数用于向 SQL 连接发送查询和命令。\n例子\n稍早时，我们在本教程中创建了一个名为 \"Persons\" 的表。它看起来类似这样：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Peter|Griffin|35|\n|Glenn|Quagmire|33|\n下面的例子删除 \"Persons\" 表中所有 LastName='Griffin' 的记录：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\nmysql_query(\"DELETE FROM Persons WHERE LastName='Griffin'\");\n\nmysql_close($con);\n?>```\n在这次删除之后，表是这样的：\n\n|FirstName|LastName|Age|\n|---|---|---|\n|Glenn|Quagmire|33|\n\n#### 查询：\n`SELECT` 语句用于从数据库中选取数据。\n语法\nSELECT column_name(s) FROM table_name\n注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。\n为了让 PHP 执行上面的语句，我们必须使用** mysql_query()** 函数。该函数用于向 MySQL 发送查询或命令。\n例子\n下面的例子选取存储在 \"Persons\" 表中的所有数据（* 字符选取表中所有数据）：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$result = mysql_query(\"SELECT * FROM Persons\");\n\nwhile($row = mysql_fetch_array($result))\n  {\n  echo $row['FirstName'] . \" \" . $row['LastName'];\n  echo \"<br />\";\n  }\n\nmysql_close($con);\n?>```\n上面这个例子在 $result 变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array() 函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop 语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row 变量 ($row['FirstName'] 和 $row['LastName'])。\n以上代码的输出：\nPeter Griffin\nGlenn Quagmire\n\n#### 在 HTML 表格中显示结果\n下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：\n```php\n<?php\n$con = mysql_connect(\"localhost\",\"peter\",\"abc123\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n\nmysql_select_db(\"my_db\", $con);\n\n$result = mysql_query(\"SELECT * FROM Persons\");\n\necho \"<table border='1'>\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n</tr>\";\n\nwhile($row = mysql_fetch_array($result))\n  {\n  echo \"<tr>\";\n  echo \"<td>\" . $row['FirstName'] . \"</td>\";\n  echo \"<td>\" . $row['LastName'] . \"</td>\";\n  echo \"</tr>\";\n  }\necho \"</table>\";\n\nmysql_close($con);\n?>```\n以上代码的输出：\n\n|FirstName|LastName|\n|---|---|\n|Peter|Griffin|\n|Glenn|Quagmire|\n\n\n","slug":"数据库-2016-11-03-MySQL数据库","published":1,"updated":"2016-11-03T04:19:05.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnsx000n0gpk7l1bj95u","content":"<p>MySql</p>\n<h3 id=\"特别要注意大小写和命令后的英文-号。\"><a href=\"#特别要注意大小写和命令后的英文-号。\" class=\"headerlink\" title=\"特别要注意大小写和命令后的英文;号。\"></a>特别要注意大小写和命令后的英文;号。</h3><p><strong>新安装默认密码为空</strong><code>mysql -u root</code> 即可进入，不要<code>mysql -u root -p</code>进不去的<br>大于5.7的版本默认有随机密码，执行<code>cat  /var/log/mysqld.log | grep password | grep &#39;root@localhost&#39; | awk -F &#39;root@localhost: &#39; &#39;{print $2}&#39;</code>查看随机生成的密码。</p>\n<h2 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h2><p><code>SHOW DATABASES;</code></p>\n<h2 id=\"查看表\"><a href=\"#查看表\" class=\"headerlink\" title=\"查看表\"></a>查看表</h2><pre><code>USE blog;\nSHOW TABLES;\n</code></pre><h2 id=\"查看表中的列\"><a href=\"#查看表中的列\" class=\"headerlink\" title=\"查看表中的列\"></a>查看表中的列</h2><pre><code>SHOW COLUMNS FROM auth_user; 或：DESCRIBE auth_user;\n</code></pre><p><strong>describe 表名</strong> 是 <strong>show columns from 表名</strong> 的一种快捷方式。</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE DATABASE 库名;</div><div class=\"line\">mysql&gt; USE 库名;</div><div class=\"line\">mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));</div></pre></td></tr></table></figure>\n<p>例：</p>\n<h2 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> demo;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> pet(</div><div class=\"line\">        <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),        #名字</div><div class=\"line\">        owner <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),       #主人</div><div class=\"line\">        species <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),     #种类</div><div class=\"line\">        sex <span class=\"built_in\">char</span>(<span class=\"number\">1</span>),             #性别</div><div class=\"line\">        birth <span class=\"built_in\">date</span>,              #出生日期</div><div class=\"line\">        death <span class=\"built_in\">date</span>               #死亡日期</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>为了验证你的表是按你期望的方式创建，使用一个<strong>DESCRIBE</strong>语句：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/mysql%E6%95%B0%E6%8D%AE%E5%BA%93001.jpg\" alt=\"\"></p>\n<h2 id=\"删除数据库：\"><a href=\"#删除数据库：\" class=\"headerlink\" title=\"删除数据库：\"></a>删除数据库：</h2><p>mysql&gt; <code>DROP DATABASE 库名;</code></p>\n<h2 id=\"删除数据表：\"><a href=\"#删除数据表：\" class=\"headerlink\" title=\"删除数据表：\"></a>删除数据表：</h2><p>mysql&gt; <code>DROP TABLE 表名；</code></p>\n<h2 id=\"将表中记录清空：\"><a href=\"#将表中记录清空：\" class=\"headerlink\" title=\"将表中记录清空：\"></a>将表中记录清空：</h2><p>mysql&gt; <code>DELETE FROM 表名;</code></p>\n<h2 id=\"创建表-复杂形式-：\"><a href=\"#创建表-复杂形式-：\" class=\"headerlink\" title=\"创建表(复杂形式)：\"></a>创建表(复杂形式)：</h2><h3 id=\"创建customer表：\"><a href=\"#创建customer表：\" class=\"headerlink\" title=\"创建customer表：\"></a>创建customer表：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> customers(</div><div class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    address <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>,</div><div class=\"line\">    city <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>,</div><div class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    love <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">'No habbit'</span>,</div><div class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</div><div class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">InnoDB</span>;</div></pre></td></tr></table></figure>\n<p><strong>SELECT last_insert_id();</strong>这个函数可以获得返回最后一个<strong>auto_increment</strong>值。默认值为：default ‘No habbit’,<br>引擎类型，多为<strong>engine = InnoDB</strong>，如果省略了<strong>engine=</strong>语句，则使用默认的引擎(MyISAM)</p>\n<h2 id=\"更改表结构：\"><a href=\"#更改表结构：\" class=\"headerlink\" title=\"更改表结构：\"></a>更改表结构：</h2><ul>\n<li>增加一列：<br>  <code>alter table pet add des char(100) null;</code></li>\n<li>删除：<br>  <code>alter table pet drop column des;</code></li>\n<li>重命名表：<br>  <code>rename table pet to animals;</code></li>\n<li>添加id字段：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> pet <span class=\"keyword\">add</span> <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></div><div class=\"line\">primary <span class=\"keyword\">key</span> auto_increment <span class=\"keyword\">first</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>详见：<a href=\"http://www.cnblogs.com/beginman/p/3249472.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beginman/p/3249472.html</a></p>\n<h2 id=\"查看密码\"><a href=\"#查看密码\" class=\"headerlink\" title=\"查看密码\"></a>查看密码</h2><ul>\n<li><p>1.用root 进入mysql后<br>mysql&gt;<code>set password =password(&#39;你的密码&#39;);</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n<li><p>2.使用GRANT语句<br>mysql&gt;<code>grant all on *.* to &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的密码&#39;with grant option ;</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n<li><p>3.进入mysql库修改user表<br>mysql&gt;<code>use mysql;</code><br>mysql&gt;<code>update user set password=password(&#39;你的密码&#39;) where user=&#39;root&#39;;</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n</ul>\n<h2 id=\"设置数据库密码\"><a href=\"#设置数据库密码\" class=\"headerlink\" title=\"设置数据库密码\"></a>设置数据库密码</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div><div class=\"line\">&gt; （输入密码）</div><div class=\"line\">&gt; create user <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span> identified by <span class=\"string\">'密码'</span>;</div><div class=\"line\">&gt; grant all privileges on 库名.* to <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span>;</div><div class=\"line\">&gt; flush privileges;</div><div class=\"line\">&gt; <span class=\"keyword\">exit</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"修改Mysql密码\"><a href=\"#修改Mysql密码\" class=\"headerlink\" title=\"修改Mysql密码\"></a>修改Mysql密码</h2><ul>\n<li><p>方法一：<br>使用phpmyadmin，直接修改Mysql库的user 表。或者使用Navicat for Mysql 直接修改连接属性。<br>【据说可以用直接修改user表文件的方法：<br><strong>法一：</strong>关闭MySQL，Windows下打开Mysql\\data\\mysql，有三个文件user.frm,user.MYD,user.MYI找个知道密码的MySQL，替换相应的这三个文件，如果user表结构没改过，一般也没人去改，替换user.MYD就可以了。<br><strong>法二：</strong>也可以直接编辑user.MYD，找个十六进制编辑器，UltraEdit就有这个功能。关闭MySQL，打开user.MYD。将用户名root后面的八个字符改为565491d704013245，新密码就是123456。或者将它们对应的十六进制数字，（左边那里，一个字符对应两个数字），改为 00 02 02 02 02 02 02 02,这就是空密码，在编辑器右边看到的都是星号*，看起来很象小数点。重开MySQL，输入root和你的新密码。】</p>\n</li>\n<li><p>方法二：使用mysqladmin<br>cd到mysql的bin文件夹，然后执行如下<br>D:\\Mysql\\bin&gt;<code>mysqladmin -u root -p password 新密码</code><br>Enter password:(在此输入原密码)<br>格式：<strong>mysqladmin -u用户名 -p旧密码 password 新密码。</strong></p>\n</li>\n</ul>\n<h4 id=\"忘记密码：\"><a href=\"#忘记密码：\" class=\"headerlink\" title=\"忘记密码：\"></a>忘记密码：</h4><ul>\n<li>1.用root或者运行mysqld的用户登录系统； </li>\n<li>2．利用kill命令结束掉mysqld的进程； </li>\n<li>3．使用<strong>–skip-grant-tables</strong>参数启动MySQL Server </li>\n<li>shell&gt;<code>mysqld_safe --skip-grant-tables &amp;</code> </li>\n<li>UPDATE user SET password=PASSWORD(“new password”) WHERE user=’root’;</li>\n<li>4.为root@localhost设置新密码 </li>\n<li>shell&gt;<code>mysqladmin -u root flush-privileges password &quot;newpassword&quot;</code></li>\n<li>5．重启MySQL Server</li>\n</ul>\n<hr>\n<p>看提示，PHP执行时看错误，是用mysql还是mysqli<br>语法<br><strong>mysql_connect(servername,username,password);</strong></p>\n<p>参数描述servername可选。规定要连接的服务器。默认是 “localhost:3306”。username可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。password可选。规定登录所用的密码。默认是 “”。</p>\n<p>语法<br><strong>CREATE DATABASE database_name</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>servername</td>\n<td>可选。规定要连接的服务器。默认是 “localhost:3306”。</td>\n</tr>\n<tr>\n<td>username</td>\n<td>可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。</td>\n</tr>\n<tr>\n<td>passwd</td>\n<td>可选。规定登录所用的密码。默认是 “”。</td>\n</tr>\n</tbody>\n</table>\n<p>为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。<br>连接：<br>例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 \"die\" 部分：</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Create database</div><div class=\"line\">//创建了一个名为 &quot;my_db&quot; 的数据库：</div><div class=\"line\">if (mysql_query(&quot;CREATE DATABASE my_db&quot;,$con))</div><div class=\"line\">  &#123;</div><div class=\"line\">  echo &quot;Database created&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">else</div><div class=\"line\">  &#123;</div><div class=\"line\">  echo &quot;Error creating database: &quot; . mysql_error();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">// Create table in my_db database</div><div class=\"line\">//创建一个名为 &quot;Persons&quot; 的表，此表有三列。列名是 &quot;FirstName&quot;, &quot;LastName&quot; 以及 &quot;Age&quot;：</div><div class=\"line\">//重要事项：在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。</div><div class=\"line\">//注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。</div><div class=\"line\">mysql_select_db(&quot;my_db&quot;, $con);</div><div class=\"line\">$sql = &quot;CREATE TABLE Persons </div><div class=\"line\">(</div><div class=\"line\">FirstName varchar(15),</div><div class=\"line\">LastName varchar(15),</div><div class=\"line\">Age int</div><div class=\"line\">)&quot;;</div><div class=\"line\">mysql_query($sql,$con);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);   //提前关闭连接，请使用 mysql_close() 函数,不加此句则脚本结束后关闭。</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>MySQL 数据类型<br>下面的可使用的各种 MySQL 数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>数值类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>smallint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>tinyint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>mediumint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>bigint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>decimal(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n<tr>\n<td>double(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n<tr>\n<td>float(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>文本数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char(size)</td>\n<td>支持固定长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定固定长度。</td>\n</tr>\n<tr>\n<td>varchar(size)</td>\n<td>支持可变长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定最大长度。</td>\n</tr>\n<tr>\n<td>tinytext</td>\n<td>支持可变长度的字符串，最大长度是 255 个字符。</td>\n</tr>\n<tr>\n<td>text blob</td>\n<td>支持可变长度的字符串，最大长度是 65535 个字符。</td>\n</tr>\n<tr>\n<td>mediumtext mediumblob</td>\n<td>支持可变长度的字符串，最大长度是 16777215 个字符。</td>\n</tr>\n<tr>\n<td>longtext longblob</td>\n<td>支持可变长度的字符串，最大长度是 4294967295 个字符。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>日期数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date(yyyy-mm-dd)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>datetime(yyyy-mm-dd hh:mm:ss)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>timestamp(yyyymmddhhmmss)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>time(hh:mm:ss)</td>\n<td>支持日期或时间</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>杂项数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enum(value1,value2,ect)</td>\n<td>ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。</td>\n</tr>\n<tr>\n<td>set</td>\n<td>SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"主键和自动递增字段\"><a href=\"#主键和自动递增字段\" class=\"headerlink\" title=\"主键和自动递增字段\"></a>主键和自动递增字段</h4><p>每个表都应有一个主键字段。<br>主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。<br>主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。<br>下面的例子把 <strong>personID</strong> 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 <strong>AUTO_INCREMENT</strong> 设置。<strong>AUTO_INCREMENT</strong> 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 <strong>NOT NULL</strong> 设置。<br>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sql = &quot;CREATE TABLE Persons </div><div class=\"line\">(</div><div class=\"line\">personID int NOT NULL AUTO_INCREMENT, </div><div class=\"line\">PRIMARY KEY(personID),</div><div class=\"line\">FirstName varchar(15),</div><div class=\"line\">LastName varchar(15),</div><div class=\"line\">Age int</div><div class=\"line\">)&quot;;</div><div class=\"line\"></div><div class=\"line\">mysql_query($sql,$con);</div></pre></td></tr></table></figure></p>\n<h4 id=\"插入：\"><a href=\"#插入：\" class=\"headerlink\" title=\"插入：\"></a>插入：</h4><p>语法<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name</div><div class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2,....)</div></pre></td></tr></table></figure></p>\n<p>您还可以规定希望在其中插入数据的列：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">INSERT</span></span> INTO table_name (column1, column2,...)</div><div class=\"line\"><span class=\"function\"><span class=\"title\">VALUES</span></span> (value1, value2,....)</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 语句对大小写不敏感。<strong>INSERT INTO 与 insert into</strong> 相同。</p>\n<p>为了让 PHP 执行该语句，我们必须使用 <strong>mysql_query()</strong> 函数。该函数用于向 MySQL 连接发送查询或命令。<br>例子<br>在前面的章节，我们创建了一个名为 “Persons” 的表，有三个列：”Firstname”, “Lastname” 以及 “Age”。我们将在本例中使用同样的表。下面的例子向 “Persons” 表添加了两个新记录：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age) </span></div><div class=\"line\">VALUES ('Peter', 'Griffin', '35')\");</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age) </span></div><div class=\"line\">VALUES ('Glenn', 'Quagmire', '33')\");</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"把来自表单的数据插入数据库\"><a href=\"#把来自表单的数据插入数据库\" class=\"headerlink\" title=\"把来自表单的数据插入数据库\"></a>把来自表单的数据插入数据库</h4><p>现在，我们创建一个 HTML 表单，这个表单可把新记录插入 “Persons” 表。<br>这是这个 HTML 表单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"insert.php\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">Firstname: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> /&gt;</span></div><div class=\"line\">Lastname: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span> /&gt;</span></div><div class=\"line\">Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 “insert.php”。”insert.php” 文件连接数据库，并通过 <strong>$_POST</strong> 变量从表单取回值。然后，mysql_query() 函数执行 <strong>INSERT INTO</strong> 语句，一条新的记录会添加到数据库表中。<br>下面是 “insert.php” 页面的代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$sql=<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age)</span></div><div class=\"line\">VALUES</div><div class=\"line\">('$_POST[firstname]','$_POST[lastname]','$_POST[age]')\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!mysql_query($sql,$con))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Error: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"1 record added\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con)</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改：\"><a href=\"#修改：\" class=\"headerlink\" title=\"修改：\"></a>修改：</h4><p><code>UPDATE</code> 语句用于修改数据库表中的数据。<br>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE table_name</div><div class=\"line\">SET column_name = new_value</div><div class=\"line\">WHERE column_name = some_value</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 对大小写不敏感。UPDATE 与 update 等效。<br>为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。<br>例子<br>稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>35</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<p>下面的例子更新 “Persons” 表的一些数据：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"UPDATE Persons SET Age = '36'</span></div><div class=\"line\">WHERE FirstName = 'Peter' AND LastName = 'Griffin'\");</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这次更新后，”Persons” 表格是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>36</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"删除：\"><a href=\"#删除：\" class=\"headerlink\" title=\"删除：\"></a>删除：</h4><p>删除数据库中的数据<br><code>DELETE FROM</code> 语句用于从数据库表中删除记录。<br>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM table_name</div><div class=\"line\">WHERE column_name = some_value</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 对大小写不敏感。DELETE FROM 与 delete from 等效。<br>为了让 PHP 执行上面的语句，我们必须使用 <strong>mysql_query</strong>( 函数。该函数用于向 SQL 连接发送查询和命令。<br>例子<br>稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>35</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<p>下面的例子删除 “Persons” 表中所有 LastName=’Griffin’ 的记录：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"DELETE FROM Persons WHERE LastName='Griffin'\"</span>);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这次删除之后，表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询：\"><a href=\"#查询：\" class=\"headerlink\" title=\"查询：\"></a>查询：</h4><p><code>SELECT</code> 语句用于从数据库中选取数据。<br>语法<br>SELECT column_name(s) FROM table_name<br>注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。<br>为了让 PHP 执行上面的语句，我们必须使用<strong> mysql_query()</strong> 函数。该函数用于向 MySQL 发送查询或命令。<br>例子<br>下面的例子选取存储在 “Persons” 表中的所有数据（* 字符选取表中所有数据）：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM Persons\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> $row[<span class=\"string\">'FirstName'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'LastName'</span>];</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面这个例子在 $result 变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array() 函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop 语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row 变量 ($row[‘FirstName’] 和 $row[‘LastName’])。<br>以上代码的输出：<br>Peter Griffin<br>Glenn Quagmire</p>\n<h4 id=\"在-HTML-表格中显示结果\"><a href=\"#在-HTML-表格中显示结果\" class=\"headerlink\" title=\"在 HTML 表格中显示结果\"></a>在 HTML 表格中显示结果</h4><p>下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM Persons\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;table border='1'&gt;</span></div><div class=\"line\">&lt;tr&gt;</div><div class=\"line\">&lt;th&gt;Firstname&lt;/th&gt;</div><div class=\"line\">&lt;th&gt;Lastname&lt;/th&gt;</div><div class=\"line\">&lt;/tr&gt;\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;tr&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;td&gt;\"</span> . $row[<span class=\"string\">'FirstName'</span>] . <span class=\"string\">\"&lt;/td&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;td&gt;\"</span> . $row[<span class=\"string\">'LastName'</span>] . <span class=\"string\">\"&lt;/td&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/tr&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/table&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以上代码的输出：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>MySql</p>\n<h3 id=\"特别要注意大小写和命令后的英文-号。\"><a href=\"#特别要注意大小写和命令后的英文-号。\" class=\"headerlink\" title=\"特别要注意大小写和命令后的英文;号。\"></a>特别要注意大小写和命令后的英文;号。</h3><p><strong>新安装默认密码为空</strong><code>mysql -u root</code> 即可进入，不要<code>mysql -u root -p</code>进不去的<br>大于5.7的版本默认有随机密码，执行<code>cat  /var/log/mysqld.log | grep password | grep &#39;root@localhost&#39; | awk -F &#39;root@localhost: &#39; &#39;{print $2}&#39;</code>查看随机生成的密码。</p>\n<h2 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h2><p><code>SHOW DATABASES;</code></p>\n<h2 id=\"查看表\"><a href=\"#查看表\" class=\"headerlink\" title=\"查看表\"></a>查看表</h2><pre><code>USE blog;\nSHOW TABLES;\n</code></pre><h2 id=\"查看表中的列\"><a href=\"#查看表中的列\" class=\"headerlink\" title=\"查看表中的列\"></a>查看表中的列</h2><pre><code>SHOW COLUMNS FROM auth_user; 或：DESCRIBE auth_user;\n</code></pre><p><strong>describe 表名</strong> 是 <strong>show columns from 表名</strong> 的一种快捷方式。</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE DATABASE 库名;</div><div class=\"line\">mysql&gt; USE 库名;</div><div class=\"line\">mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));</div></pre></td></tr></table></figure>\n<p>例：</p>\n<h2 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> demo;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> pet(</div><div class=\"line\">        <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),        #名字</div><div class=\"line\">        owner <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),       #主人</div><div class=\"line\">        species <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),     #种类</div><div class=\"line\">        sex <span class=\"built_in\">char</span>(<span class=\"number\">1</span>),             #性别</div><div class=\"line\">        birth <span class=\"built_in\">date</span>,              #出生日期</div><div class=\"line\">        death <span class=\"built_in\">date</span>               #死亡日期</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>为了验证你的表是按你期望的方式创建，使用一个<strong>DESCRIBE</strong>语句：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/mysql%E6%95%B0%E6%8D%AE%E5%BA%93001.jpg\" alt=\"\"></p>\n<h2 id=\"删除数据库：\"><a href=\"#删除数据库：\" class=\"headerlink\" title=\"删除数据库：\"></a>删除数据库：</h2><p>mysql&gt; <code>DROP DATABASE 库名;</code></p>\n<h2 id=\"删除数据表：\"><a href=\"#删除数据表：\" class=\"headerlink\" title=\"删除数据表：\"></a>删除数据表：</h2><p>mysql&gt; <code>DROP TABLE 表名；</code></p>\n<h2 id=\"将表中记录清空：\"><a href=\"#将表中记录清空：\" class=\"headerlink\" title=\"将表中记录清空：\"></a>将表中记录清空：</h2><p>mysql&gt; <code>DELETE FROM 表名;</code></p>\n<h2 id=\"创建表-复杂形式-：\"><a href=\"#创建表-复杂形式-：\" class=\"headerlink\" title=\"创建表(复杂形式)：\"></a>创建表(复杂形式)：</h2><h3 id=\"创建customer表：\"><a href=\"#创建customer表：\" class=\"headerlink\" title=\"创建customer表：\"></a>创建customer表：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> customers(</div><div class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    address <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>,</div><div class=\"line\">    city <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>,</div><div class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    love <span class=\"built_in\">char</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">'No habbit'</span>,</div><div class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</div><div class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">InnoDB</span>;</div></pre></td></tr></table></figure>\n<p><strong>SELECT last_insert_id();</strong>这个函数可以获得返回最后一个<strong>auto_increment</strong>值。默认值为：default ‘No habbit’,<br>引擎类型，多为<strong>engine = InnoDB</strong>，如果省略了<strong>engine=</strong>语句，则使用默认的引擎(MyISAM)</p>\n<h2 id=\"更改表结构：\"><a href=\"#更改表结构：\" class=\"headerlink\" title=\"更改表结构：\"></a>更改表结构：</h2><ul>\n<li>增加一列：<br>  <code>alter table pet add des char(100) null;</code></li>\n<li>删除：<br>  <code>alter table pet drop column des;</code></li>\n<li>重命名表：<br>  <code>rename table pet to animals;</code></li>\n<li>添加id字段：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> pet <span class=\"keyword\">add</span> <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></div><div class=\"line\">primary <span class=\"keyword\">key</span> auto_increment <span class=\"keyword\">first</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>详见：<a href=\"http://www.cnblogs.com/beginman/p/3249472.html\">http://www.cnblogs.com/beginman/p/3249472.html</a></p>\n<h2 id=\"查看密码\"><a href=\"#查看密码\" class=\"headerlink\" title=\"查看密码\"></a>查看密码</h2><ul>\n<li><p>1.用root 进入mysql后<br>mysql&gt;<code>set password =password(&#39;你的密码&#39;);</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n<li><p>2.使用GRANT语句<br>mysql&gt;<code>grant all on *.* to &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的密码&#39;with grant option ;</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n<li><p>3.进入mysql库修改user表<br>mysql&gt;<code>use mysql;</code><br>mysql&gt;<code>update user set password=password(&#39;你的密码&#39;) where user=&#39;root&#39;;</code><br>mysql&gt;<code>flush privileges;</code></p>\n</li>\n</ul>\n<h2 id=\"设置数据库密码\"><a href=\"#设置数据库密码\" class=\"headerlink\" title=\"设置数据库密码\"></a>设置数据库密码</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div><div class=\"line\">&gt; （输入密码）</div><div class=\"line\">&gt; create user <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span> identified by <span class=\"string\">'密码'</span>;</div><div class=\"line\">&gt; grant all privileges on 库名.* to <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span>;</div><div class=\"line\">&gt; flush privileges;</div><div class=\"line\">&gt; <span class=\"keyword\">exit</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"修改Mysql密码\"><a href=\"#修改Mysql密码\" class=\"headerlink\" title=\"修改Mysql密码\"></a>修改Mysql密码</h2><ul>\n<li><p>方法一：<br>使用phpmyadmin，直接修改Mysql库的user 表。或者使用Navicat for Mysql 直接修改连接属性。<br>【据说可以用直接修改user表文件的方法：<br><strong>法一：</strong>关闭MySQL，Windows下打开Mysql\\data\\mysql，有三个文件user.frm,user.MYD,user.MYI找个知道密码的MySQL，替换相应的这三个文件，如果user表结构没改过，一般也没人去改，替换user.MYD就可以了。<br><strong>法二：</strong>也可以直接编辑user.MYD，找个十六进制编辑器，UltraEdit就有这个功能。关闭MySQL，打开user.MYD。将用户名root后面的八个字符改为565491d704013245，新密码就是123456。或者将它们对应的十六进制数字，（左边那里，一个字符对应两个数字），改为 00 02 02 02 02 02 02 02,这就是空密码，在编辑器右边看到的都是星号*，看起来很象小数点。重开MySQL，输入root和你的新密码。】</p>\n</li>\n<li><p>方法二：使用mysqladmin<br>cd到mysql的bin文件夹，然后执行如下<br>D:\\Mysql\\bin&gt;<code>mysqladmin -u root -p password 新密码</code><br>Enter password:(在此输入原密码)<br>格式：<strong>mysqladmin -u用户名 -p旧密码 password 新密码。</strong></p>\n</li>\n</ul>\n<h4 id=\"忘记密码：\"><a href=\"#忘记密码：\" class=\"headerlink\" title=\"忘记密码：\"></a>忘记密码：</h4><ul>\n<li>1.用root或者运行mysqld的用户登录系统； </li>\n<li>2．利用kill命令结束掉mysqld的进程； </li>\n<li>3．使用<strong>–skip-grant-tables</strong>参数启动MySQL Server </li>\n<li>shell&gt;<code>mysqld_safe --skip-grant-tables &amp;</code> </li>\n<li>UPDATE user SET password=PASSWORD(“new password”) WHERE user=’root’;</li>\n<li>4.为root@localhost设置新密码 </li>\n<li>shell&gt;<code>mysqladmin -u root flush-privileges password &quot;newpassword&quot;</code></li>\n<li>5．重启MySQL Server</li>\n</ul>\n<hr>\n<p>看提示，PHP执行时看错误，是用mysql还是mysqli<br>语法<br><strong>mysql_connect(servername,username,password);</strong></p>\n<p>参数描述servername可选。规定要连接的服务器。默认是 “localhost:3306”。username可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。password可选。规定登录所用的密码。默认是 “”。</p>\n<p>语法<br><strong>CREATE DATABASE database_name</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>servername</td>\n<td>可选。规定要连接的服务器。默认是 “localhost:3306”。</td>\n</tr>\n<tr>\n<td>username</td>\n<td>可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。</td>\n</tr>\n<tr>\n<td>passwd</td>\n<td>可选。规定登录所用的密码。默认是 “”。</td>\n</tr>\n</tbody>\n</table>\n<p>为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。<br>连接：<br>例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 \"die\" 部分：</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Create database</div><div class=\"line\">//创建了一个名为 &quot;my_db&quot; 的数据库：</div><div class=\"line\">if (mysql_query(&quot;CREATE DATABASE my_db&quot;,$con))</div><div class=\"line\">  &#123;</div><div class=\"line\">  echo &quot;Database created&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">else</div><div class=\"line\">  &#123;</div><div class=\"line\">  echo &quot;Error creating database: &quot; . mysql_error();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">// Create table in my_db database</div><div class=\"line\">//创建一个名为 &quot;Persons&quot; 的表，此表有三列。列名是 &quot;FirstName&quot;, &quot;LastName&quot; 以及 &quot;Age&quot;：</div><div class=\"line\">//重要事项：在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。</div><div class=\"line\">//注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。</div><div class=\"line\">mysql_select_db(&quot;my_db&quot;, $con);</div><div class=\"line\">$sql = &quot;CREATE TABLE Persons </div><div class=\"line\">(</div><div class=\"line\">FirstName varchar(15),</div><div class=\"line\">LastName varchar(15),</div><div class=\"line\">Age int</div><div class=\"line\">)&quot;;</div><div class=\"line\">mysql_query($sql,$con);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);   //提前关闭连接，请使用 mysql_close() 函数,不加此句则脚本结束后关闭。</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>MySQL 数据类型<br>下面的可使用的各种 MySQL 数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>数值类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>smallint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>tinyint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>mediumint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>bigint(size)</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>decimal(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n<tr>\n<td>double(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n<tr>\n<td>float(size,d)</td>\n<td>支持带有小数的数字。在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>文本数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char(size)</td>\n<td>支持固定长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定固定长度。</td>\n</tr>\n<tr>\n<td>varchar(size)</td>\n<td>支持可变长度的字符串。（可包含字母、数字以及特殊符号）。在 size 参数中规定最大长度。</td>\n</tr>\n<tr>\n<td>tinytext</td>\n<td>支持可变长度的字符串，最大长度是 255 个字符。</td>\n</tr>\n<tr>\n<td>text blob</td>\n<td>支持可变长度的字符串，最大长度是 65535 个字符。</td>\n</tr>\n<tr>\n<td>mediumtext mediumblob</td>\n<td>支持可变长度的字符串，最大长度是 16777215 个字符。</td>\n</tr>\n<tr>\n<td>longtext longblob</td>\n<td>支持可变长度的字符串，最大长度是 4294967295 个字符。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>日期数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date(yyyy-mm-dd)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>datetime(yyyy-mm-dd hh:mm:ss)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>timestamp(yyyymmddhhmmss)</td>\n<td>支持日期或时间</td>\n</tr>\n<tr>\n<td>time(hh:mm:ss)</td>\n<td>支持日期或时间</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>杂项数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enum(value1,value2,ect)</td>\n<td>ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。</td>\n</tr>\n<tr>\n<td>set</td>\n<td>SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"主键和自动递增字段\"><a href=\"#主键和自动递增字段\" class=\"headerlink\" title=\"主键和自动递增字段\"></a>主键和自动递增字段</h4><p>每个表都应有一个主键字段。<br>主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。<br>主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。<br>下面的例子把 <strong>personID</strong> 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 <strong>AUTO_INCREMENT</strong> 设置。<strong>AUTO_INCREMENT</strong> 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 <strong>NOT NULL</strong> 设置。<br>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sql = &quot;CREATE TABLE Persons </div><div class=\"line\">(</div><div class=\"line\">personID int NOT NULL AUTO_INCREMENT, </div><div class=\"line\">PRIMARY KEY(personID),</div><div class=\"line\">FirstName varchar(15),</div><div class=\"line\">LastName varchar(15),</div><div class=\"line\">Age int</div><div class=\"line\">)&quot;;</div><div class=\"line\"></div><div class=\"line\">mysql_query($sql,$con);</div></pre></td></tr></table></figure></p>\n<h4 id=\"插入：\"><a href=\"#插入：\" class=\"headerlink\" title=\"插入：\"></a>插入：</h4><p>语法<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name</div><div class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2,....)</div></pre></td></tr></table></figure></p>\n<p>您还可以规定希望在其中插入数据的列：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">INSERT</span></span> INTO table_name (column1, column2,...)</div><div class=\"line\"><span class=\"function\"><span class=\"title\">VALUES</span></span> (value1, value2,....)</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 语句对大小写不敏感。<strong>INSERT INTO 与 insert into</strong> 相同。</p>\n<p>为了让 PHP 执行该语句，我们必须使用 <strong>mysql_query()</strong> 函数。该函数用于向 MySQL 连接发送查询或命令。<br>例子<br>在前面的章节，我们创建了一个名为 “Persons” 的表，有三个列：”Firstname”, “Lastname” 以及 “Age”。我们将在本例中使用同样的表。下面的例子向 “Persons” 表添加了两个新记录：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age) </div><div class=\"line\">VALUES ('Peter', 'Griffin', '35')\"</span>);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age) </div><div class=\"line\">VALUES ('Glenn', 'Quagmire', '33')\"</span>);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"把来自表单的数据插入数据库\"><a href=\"#把来自表单的数据插入数据库\" class=\"headerlink\" title=\"把来自表单的数据插入数据库\"></a>把来自表单的数据插入数据库</h4><p>现在，我们创建一个 HTML 表单，这个表单可把新记录插入 “Persons” 表。<br>这是这个 HTML 表单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"insert.php\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">Firstname: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> /&gt;</span></div><div class=\"line\">Lastname: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span> /&gt;</span></div><div class=\"line\">Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 “insert.php”。”insert.php” 文件连接数据库，并通过 <strong>$_POST</strong> 变量从表单取回值。然后，mysql_query() 函数执行 <strong>INSERT INTO</strong> 语句，一条新的记录会添加到数据库表中。<br>下面是 “insert.php” 页面的代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$sql=<span class=\"string\">\"INSERT INTO Persons (FirstName, LastName, Age)</div><div class=\"line\">VALUES</div><div class=\"line\">('$_POST[firstname]','$_POST[lastname]','$_POST[age]')\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!mysql_query($sql,$con))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Error: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"1 record added\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con)</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"修改：\"><a href=\"#修改：\" class=\"headerlink\" title=\"修改：\"></a>修改：</h4><p><code>UPDATE</code> 语句用于修改数据库表中的数据。<br>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE table_name</div><div class=\"line\">SET column_name = new_value</div><div class=\"line\">WHERE column_name = some_value</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 对大小写不敏感。UPDATE 与 update 等效。<br>为了让 PHP 执行上面的语句，我们必须使用 mysql_query( 函数。该函数用于向 SQL 连接发送查询和命令。<br>例子<br>稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>35</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<p>下面的例子更新 “Persons” 表的一些数据：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"UPDATE Persons SET Age = '36'</div><div class=\"line\">WHERE FirstName = 'Peter' AND LastName = 'Griffin'\"</span>);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这次更新后，”Persons” 表格是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>36</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"删除：\"><a href=\"#删除：\" class=\"headerlink\" title=\"删除：\"></a>删除：</h4><p>删除数据库中的数据<br><code>DELETE FROM</code> 语句用于从数据库表中删除记录。<br>语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM table_name</div><div class=\"line\">WHERE column_name = some_value</div></pre></td></tr></table></figure></p>\n<p>注释：SQL 对大小写不敏感。DELETE FROM 与 delete from 等效。<br>为了让 PHP 执行上面的语句，我们必须使用 <strong>mysql_query</strong>( 函数。该函数用于向 SQL 连接发送查询和命令。<br>例子<br>稍早时，我们在本教程中创建了一个名为 “Persons” 的表。它看起来类似这样：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n<td>35</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<p>下面的例子删除 “Persons” 表中所有 LastName=’Griffin’ 的记录：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">mysql_query(<span class=\"string\">\"DELETE FROM Persons WHERE LastName='Griffin'\"</span>);</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在这次删除之后，表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n<td>33</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查询：\"><a href=\"#查询：\" class=\"headerlink\" title=\"查询：\"></a>查询：</h4><p><code>SELECT</code> 语句用于从数据库中选取数据。<br>语法<br>SELECT column_name(s) FROM table_name<br>注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。<br>为了让 PHP 执行上面的语句，我们必须使用<strong> mysql_query()</strong> 函数。该函数用于向 MySQL 发送查询或命令。<br>例子<br>下面的例子选取存储在 “Persons” 表中的所有数据（* 字符选取表中所有数据）：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM Persons\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> $row[<span class=\"string\">'FirstName'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'LastName'</span>];</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面这个例子在 $result 变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array() 函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop 语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row 变量 ($row[‘FirstName’] 和 $row[‘LastName’])。<br>以上代码的输出：<br>Peter Griffin<br>Glenn Quagmire</p>\n<h4 id=\"在-HTML-表格中显示结果\"><a href=\"#在-HTML-表格中显示结果\" class=\"headerlink\" title=\"在 HTML 表格中显示结果\"></a>在 HTML 表格中显示结果</h4><p>下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"abc123\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">mysql_select_db(<span class=\"string\">\"my_db\"</span>, $con);</div><div class=\"line\"></div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM Persons\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;table border='1'&gt;</div><div class=\"line\">&lt;tr&gt;</div><div class=\"line\">&lt;th&gt;Firstname&lt;/th&gt;</div><div class=\"line\">&lt;th&gt;Lastname&lt;/th&gt;</div><div class=\"line\">&lt;/tr&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;tr&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;td&gt;\"</span> . $row[<span class=\"string\">'FirstName'</span>] . <span class=\"string\">\"&lt;/td&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;td&gt;\"</span> . $row[<span class=\"string\">'LastName'</span>] . <span class=\"string\">\"&lt;/td&gt;\"</span>;</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/tr&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/table&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以上代码的输出：</p>\n<table>\n<thead>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Peter</td>\n<td>Griffin</td>\n</tr>\n<tr>\n<td>Glenn</td>\n<td>Quagmire</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vim常用命令","date":"2016-11-03T15:31:47.000Z","_content":"\n![][image-1]\n\n# 插入模式\n按「i」切换进入插入模式「insert mode」，按\"i\"进入插入模式后是从光标\n当前位置开始输入文件；\n  \n### 按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\n### 按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\n  : **w filename** （输入 「w filename」将文章以指定的文件名filename保存）\n  : **wq** (输入「wq」，存盘并退出vim)\n  : **q!** (输入q!， 不存盘强制退出vim)\n  :**ZZ** (输入「ZZ」，存盘并退出vim)\n\n---\n# 移动光标\nvi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母\n「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。\n* 按数字「0」：移到行首。\n* 按「G」：移动到文章的开头。\n* 按「w」：光标跳到下个字符串的开头\n* 按「e」：光标跳到下个字符串的字尾\n* 按「b」：光标回到上个字符串的开头\n* 按「#」：光标移到某个字符串后，按#会高亮所有的这个字符串。\n\n# 删除文字\n* 「x」：每按一次，删除光标所在位置的\"后面\"一个字符。\n* 「\\*x」：例如，「6x」表示删除光标所在位置的\"后面\"6个字符。\n* 「X」：大写的X，每按一次，删除光标所在位置的\"前面\"一个字符。\n* 「\\*X」：例如，「20X」表示删除光标所在位置的\"前面\"20个字符。\n* 「dd」：删除光标所在行。\n* 「\\*dd」：从光标所在行开始删除#行\n\n# 复制\n* 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。\n* 「\\*yw」：复制#个字到缓冲区\n* 「yy」：复制光标所在行到缓冲区。\n* 「\\*yy」：例如，「6yy」表示拷贝从光标所在的该行\"往下数\"6行文字。\n* 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制\n  命令都必须与\"p\"配合才能完成复制与粘贴功能。\n\n# 替换\n* 「r」：替换光标所在处的字符。\n* 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。\n\n# 撤销\n* 「u」：如果您误执行一个命令，可以马上按下「u」撤销，回到上一个操作。按多\n 次\"u\"可以执行多次回复。\n\n# 更改\n* 「cw」：更改光标所在处的字到字尾处[更改某个字符串]()\n* 「c\\*w」：例如，「c3w」表示更改3个字\n\n# 跳至指定的行\n* 「ctrl」+「g」列出光标所在行的行号，及总行数。\n* 「\\*G」：例如，「15G」，表示移动光标至文章的第15行行首。\n\n---\n\n先按「ESC」键确定您已经处于「command mode」下后，\n再按「：」冒号即可进入「last line mode」。\n# 列出行号\n  :**set nu** 会在文件中的每一行前面列出行号。\n# 跳到文件中的某一行\n :**行号**  在冒号后输入一个数字，再按回车键就会跳到该行了。\n# 查找字符\n :**/关键字**  可以一直按「n」会往后寻找到您要的关键字为止。\n\n\n\n\n\n\n\n[image-1]:\thttp://ofyfogrgx.bkt.clouddn.com//blog/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4001.jpeg","source":"_posts/杂项/2016-11-03-vim常用命令.md","raw":"---\ntitle: vim常用命令\ncategories:\n  - 杂项\ntags:\n  - vim常用命令\ndate: 2016-11-03 23:31:47\n---\n\n![][image-1]\n\n# 插入模式\n按「i」切换进入插入模式「insert mode」，按\"i\"进入插入模式后是从光标\n当前位置开始输入文件；\n  \n### 按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\n### 按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\n  : **w filename** （输入 「w filename」将文章以指定的文件名filename保存）\n  : **wq** (输入「wq」，存盘并退出vim)\n  : **q!** (输入q!， 不存盘强制退出vim)\n  :**ZZ** (输入「ZZ」，存盘并退出vim)\n\n---\n# 移动光标\nvi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母\n「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。\n* 按数字「0」：移到行首。\n* 按「G」：移动到文章的开头。\n* 按「w」：光标跳到下个字符串的开头\n* 按「e」：光标跳到下个字符串的字尾\n* 按「b」：光标回到上个字符串的开头\n* 按「#」：光标移到某个字符串后，按#会高亮所有的这个字符串。\n\n# 删除文字\n* 「x」：每按一次，删除光标所在位置的\"后面\"一个字符。\n* 「\\*x」：例如，「6x」表示删除光标所在位置的\"后面\"6个字符。\n* 「X」：大写的X，每按一次，删除光标所在位置的\"前面\"一个字符。\n* 「\\*X」：例如，「20X」表示删除光标所在位置的\"前面\"20个字符。\n* 「dd」：删除光标所在行。\n* 「\\*dd」：从光标所在行开始删除#行\n\n# 复制\n* 「yw」：将光标所在之处到字尾的字符复制到缓冲区中。\n* 「\\*yw」：复制#个字到缓冲区\n* 「yy」：复制光标所在行到缓冲区。\n* 「\\*yy」：例如，「6yy」表示拷贝从光标所在的该行\"往下数\"6行文字。\n* 「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与\"y\"有关的复制\n  命令都必须与\"p\"配合才能完成复制与粘贴功能。\n\n# 替换\n* 「r」：替换光标所在处的字符。\n* 「R」：替换光标所到之处的字符，直到按下「ESC」键为止。\n\n# 撤销\n* 「u」：如果您误执行一个命令，可以马上按下「u」撤销，回到上一个操作。按多\n 次\"u\"可以执行多次回复。\n\n# 更改\n* 「cw」：更改光标所在处的字到字尾处[更改某个字符串]()\n* 「c\\*w」：例如，「c3w」表示更改3个字\n\n# 跳至指定的行\n* 「ctrl」+「g」列出光标所在行的行号，及总行数。\n* 「\\*G」：例如，「15G」，表示移动光标至文章的第15行行首。\n\n---\n\n先按「ESC」键确定您已经处于「command mode」下后，\n再按「：」冒号即可进入「last line mode」。\n# 列出行号\n  :**set nu** 会在文件中的每一行前面列出行号。\n# 跳到文件中的某一行\n :**行号**  在冒号后输入一个数字，再按回车键就会跳到该行了。\n# 查找字符\n :**/关键字**  可以一直按「n」会往后寻找到您要的关键字为止。\n\n\n\n\n\n\n\n[image-1]:\thttp://ofyfogrgx.bkt.clouddn.com//blog/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4001.jpeg","slug":"杂项-2016-11-03-vim常用命令","published":1,"updated":"2016-11-04T06:23:33.083Z","_id":"civ39nnsx000o0gpk0h1ijywn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4001.jpeg\" alt=\"\"></p>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><p>按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标<br>当前位置开始输入文件；</p>\n<h3 id=\"按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\"><a href=\"#按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\" class=\"headerlink\" title=\"按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\"></a>按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。</h3><h3 id=\"按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\"><a href=\"#按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\" class=\"headerlink\" title=\"按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\"></a>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</h3><p>  : <strong>w filename</strong> （输入 「w filename」将文章以指定的文件名filename保存）<br>  : <strong>wq</strong> (输入「wq」，存盘并退出vim)<br>  : <strong>q!</strong> (输入q!， 不存盘强制退出vim)<br>  :<strong>ZZ</strong> (输入「ZZ」，存盘并退出vim)</p>\n<hr>\n<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母<br>「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p>\n<ul>\n<li>按数字「0」：移到行首。</li>\n<li>按「G」：移动到文章的开头。</li>\n<li>按「w」：光标跳到下个字符串的开头</li>\n<li>按「e」：光标跳到下个字符串的字尾</li>\n<li>按「b」：光标回到上个字符串的开头</li>\n<li>按「#」：光标移到某个字符串后，按#会高亮所有的这个字符串。</li>\n</ul>\n<h1 id=\"删除文字\"><a href=\"#删除文字\" class=\"headerlink\" title=\"删除文字\"></a>删除文字</h1><ul>\n<li>「x」：每按一次，删除光标所在位置的”后面”一个字符。</li>\n<li>「*x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。</li>\n<li>「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。</li>\n<li>「*X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。</li>\n<li>「dd」：删除光标所在行。</li>\n<li>「*dd」：从光标所在行开始删除#行</li>\n</ul>\n<h1 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h1><ul>\n<li>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</li>\n<li>「*yw」：复制#个字到缓冲区</li>\n<li>「yy」：复制光标所在行到缓冲区。</li>\n<li>「*yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。</li>\n<li>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制<br>命令都必须与”p”配合才能完成复制与粘贴功能。</li>\n</ul>\n<h1 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h1><ul>\n<li>「r」：替换光标所在处的字符。</li>\n<li>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</li>\n</ul>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><ul>\n<li>「u」：如果您误执行一个命令，可以马上按下「u」撤销，回到上一个操作。按多<br>次”u”可以执行多次回复。</li>\n</ul>\n<h1 id=\"更改\"><a href=\"#更改\" class=\"headerlink\" title=\"更改\"></a>更改</h1><ul>\n<li>「cw」：更改光标所在处的字到字尾处<a href=\"\">更改某个字符串</a></li>\n<li>「c*w」：例如，「c3w」表示更改3个字</li>\n</ul>\n<h1 id=\"跳至指定的行\"><a href=\"#跳至指定的行\" class=\"headerlink\" title=\"跳至指定的行\"></a>跳至指定的行</h1><ul>\n<li>「ctrl」+「g」列出光标所在行的行号，及总行数。</li>\n<li>「*G」：例如，「15G」，表示移动光标至文章的第15行行首。</li>\n</ul>\n<hr>\n<p>先按「ESC」键确定您已经处于「command mode」下后，<br>再按「：」冒号即可进入「last line mode」。</p>\n<h1 id=\"列出行号\"><a href=\"#列出行号\" class=\"headerlink\" title=\"列出行号\"></a>列出行号</h1><p>  :<strong>set nu</strong> 会在文件中的每一行前面列出行号。</p>\n<h1 id=\"跳到文件中的某一行\"><a href=\"#跳到文件中的某一行\" class=\"headerlink\" title=\"跳到文件中的某一行\"></a>跳到文件中的某一行</h1><p> :<strong>行号</strong>  在冒号后输入一个数字，再按回车键就会跳到该行了。</p>\n<h1 id=\"查找字符\"><a href=\"#查找字符\" class=\"headerlink\" title=\"查找字符\"></a>查找字符</h1><p> :<strong>/关键字</strong>  可以一直按「n」会往后寻找到您要的关键字为止。</p>\n","excerpt":"","more":"<p><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4001.jpeg\" alt=\"\"></p>\n<h1 id=\"插入模式\"><a href=\"#插入模式\" class=\"headerlink\" title=\"插入模式\"></a>插入模式</h1><p>按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标<br>当前位置开始输入文件；</p>\n<h3 id=\"按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\"><a href=\"#按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\" class=\"headerlink\" title=\"按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。\"></a>按「a」进入插入模式后，从当前光标所在位置的下一个位置开始输入文字。</h3><h3 id=\"按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\"><a href=\"#按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\" class=\"headerlink\" title=\"按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。\"></a>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</h3><p>  : <strong>w filename</strong> （输入 「w filename」将文章以指定的文件名filename保存）<br>  : <strong>wq</strong> (输入「wq」，存盘并退出vim)<br>  : <strong>q!</strong> (输入q!， 不存盘强制退出vim)<br>  :<strong>ZZ</strong> (输入「ZZ」，存盘并退出vim)</p>\n<hr>\n<h1 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h1><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母<br>「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p>\n<ul>\n<li>按数字「0」：移到行首。</li>\n<li>按「G」：移动到文章的开头。</li>\n<li>按「w」：光标跳到下个字符串的开头</li>\n<li>按「e」：光标跳到下个字符串的字尾</li>\n<li>按「b」：光标回到上个字符串的开头</li>\n<li>按「#」：光标移到某个字符串后，按#会高亮所有的这个字符串。</li>\n</ul>\n<h1 id=\"删除文字\"><a href=\"#删除文字\" class=\"headerlink\" title=\"删除文字\"></a>删除文字</h1><ul>\n<li>「x」：每按一次，删除光标所在位置的”后面”一个字符。</li>\n<li>「*x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。</li>\n<li>「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。</li>\n<li>「*X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。</li>\n<li>「dd」：删除光标所在行。</li>\n<li>「*dd」：从光标所在行开始删除#行</li>\n</ul>\n<h1 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h1><ul>\n<li>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</li>\n<li>「*yw」：复制#个字到缓冲区</li>\n<li>「yy」：复制光标所在行到缓冲区。</li>\n<li>「*yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。</li>\n<li>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制<br>命令都必须与”p”配合才能完成复制与粘贴功能。</li>\n</ul>\n<h1 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h1><ul>\n<li>「r」：替换光标所在处的字符。</li>\n<li>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</li>\n</ul>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><ul>\n<li>「u」：如果您误执行一个命令，可以马上按下「u」撤销，回到上一个操作。按多<br>次”u”可以执行多次回复。</li>\n</ul>\n<h1 id=\"更改\"><a href=\"#更改\" class=\"headerlink\" title=\"更改\"></a>更改</h1><ul>\n<li>「cw」：更改光标所在处的字到字尾处<a href=\"\">更改某个字符串</a></li>\n<li>「c*w」：例如，「c3w」表示更改3个字</li>\n</ul>\n<h1 id=\"跳至指定的行\"><a href=\"#跳至指定的行\" class=\"headerlink\" title=\"跳至指定的行\"></a>跳至指定的行</h1><ul>\n<li>「ctrl」+「g」列出光标所在行的行号，及总行数。</li>\n<li>「*G」：例如，「15G」，表示移动光标至文章的第15行行首。</li>\n</ul>\n<hr>\n<p>先按「ESC」键确定您已经处于「command mode」下后，<br>再按「：」冒号即可进入「last line mode」。</p>\n<h1 id=\"列出行号\"><a href=\"#列出行号\" class=\"headerlink\" title=\"列出行号\"></a>列出行号</h1><p>  :<strong>set nu</strong> 会在文件中的每一行前面列出行号。</p>\n<h1 id=\"跳到文件中的某一行\"><a href=\"#跳到文件中的某一行\" class=\"headerlink\" title=\"跳到文件中的某一行\"></a>跳到文件中的某一行</h1><p> :<strong>行号</strong>  在冒号后输入一个数字，再按回车键就会跳到该行了。</p>\n<h1 id=\"查找字符\"><a href=\"#查找字符\" class=\"headerlink\" title=\"查找字符\"></a>查找字符</h1><p> :<strong>/关键字</strong>  可以一直按「n」会往后寻找到您要的关键字为止。</p>\n"},{"title":"Linux学习流程发展","date":"2016-11-02T06:20:45.000Z","_content":"\n## 网上看到的网文，摘录学习\n\n#### 1、推荐的发行版如下：\n  \n● UBUNTU 适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。\n\n  ● Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。\n\n  ● Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。\n\n  ● Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。\n  ● Slackware与Gentoo类似。\n\n  ● CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。\n\n  ● LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。\n\n\n\n#### 2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]\n再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。 同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs， 我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。 Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。\n虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化， 容易让你忽略一些你应该注意的问题。 IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好， 如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容， 这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。\n我推荐的书如下：C语言程序设计。 C语言，白皮书当然更好。 C++推荐C++ Primer Plus， Java我不喜欢，就不推荐了，附一个别人的书单：java 入门书籍。 工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书）， 汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。\n如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。 不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的， 不可能像Bash，VIM这些神品一样。 所以做不好干脆离开。\n\n#### 3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\n**UNIX环境高级编程**堪称神作，经典中的经典。\n接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看， 看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强， 你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分， Google创始人的案头书籍，扎尔伯克的床头读物。）\n\n这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？ 它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容， 想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。 Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。 而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。 所以Linux平台的开发大多是专注于底层的或服务器编程。如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术， 世界顶级黑客将同你分享他的看法。\n\n亚马逊书店：https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&camp=536&creative=3132&creativeASIN=B008Z1IEQ8&linkCode=as2&tag=cfjh-23\n\n#### 4、选择方向：网络，图形，嵌入式，设备驱动\n现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。\n\n**网络方向：**服务器软件编写及高性能的并发程序编写\n如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。 相对来说这是网络编程中技术含量最高的，也是底层的。 需要很多的经验，看很多的书，做很多的项目。\n我的看法是以下面的顺序来看书：\n\n  1. APUE再深读 – 尤其是进程，线程，IPC，套接字\n  2. 多核程序设计 - Pthread一定得吃透了，你很NB\n  3. UNIX网络编程 – 卷一，卷二\n  4. TCP/IP网络详解 – 卷一 再看上面两本书时就该看了\n  5. TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了\n  6. Lighttpd源代码 - 这个服务器也很有名了\n  7. Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。\n  8. Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现\n如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡， 网络设备的驱动及嵌入式系统软件应该也不成问题了。\n当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。 只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！\n\n**图形方向：**我觉得图形方向也是很有前途的，以下几个方面。\n\n  1. Opengl的工业及游戏开发，国外较成熟。\n  2. 影视动画特效，如皮克斯，也是国外较成熟。\n  3. GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。\n\n**嵌入式方向：**嵌入式方向没说的，Linux很重要。\n掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。 硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法， 我连学电子的那帮学生都竞争不过。 奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运， 不要碰上像Nokia，Hp这样的公司，否则你会很惨的。\n\n**驱动程序设计：**软件开发周期是很长的，硬件不同，很快。 每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。 由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大， 因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了， 所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。\n可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/文章阅读/2016-11-02-Linux学习流程发展.md","raw":"---\ntitle: Linux学习流程发展\ncategories:\n  - 文章阅读\ntags:\n  - Linux学习流程发展\ndate: 2016-11-02 14:20:45\n---\n\n## 网上看到的网文，摘录学习\n\n#### 1、推荐的发行版如下：\n  \n● UBUNTU 适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。\n\n  ● Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。\n\n  ● Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。\n\n  ● Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。\n  ● Slackware与Gentoo类似。\n\n  ● CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。\n\n  ● LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。\n\n\n\n#### 2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]\n再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。 同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs， 我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。 Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。\n虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化， 容易让你忽略一些你应该注意的问题。 IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好， 如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容， 这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。\n我推荐的书如下：C语言程序设计。 C语言，白皮书当然更好。 C++推荐C++ Primer Plus， Java我不喜欢，就不推荐了，附一个别人的书单：java 入门书籍。 工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书）， 汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。\n如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。 不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的， 不可能像Bash，VIM这些神品一样。 所以做不好干脆离开。\n\n#### 3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\n**UNIX环境高级编程**堪称神作，经典中的经典。\n接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看， 看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强， 你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分， Google创始人的案头书籍，扎尔伯克的床头读物。）\n\n这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？ 它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容， 想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。 Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。 而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。 所以Linux平台的开发大多是专注于底层的或服务器编程。如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术， 世界顶级黑客将同你分享他的看法。\n\n亚马逊书店：https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&camp=536&creative=3132&creativeASIN=B008Z1IEQ8&linkCode=as2&tag=cfjh-23\n\n#### 4、选择方向：网络，图形，嵌入式，设备驱动\n现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。\n\n**网络方向：**服务器软件编写及高性能的并发程序编写\n如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。 相对来说这是网络编程中技术含量最高的，也是底层的。 需要很多的经验，看很多的书，做很多的项目。\n我的看法是以下面的顺序来看书：\n\n  1. APUE再深读 – 尤其是进程，线程，IPC，套接字\n  2. 多核程序设计 - Pthread一定得吃透了，你很NB\n  3. UNIX网络编程 – 卷一，卷二\n  4. TCP/IP网络详解 – 卷一 再看上面两本书时就该看了\n  5. TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了\n  6. Lighttpd源代码 - 这个服务器也很有名了\n  7. Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。\n  8. Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现\n如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡， 网络设备的驱动及嵌入式系统软件应该也不成问题了。\n当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。 只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！\n\n**图形方向：**我觉得图形方向也是很有前途的，以下几个方面。\n\n  1. Opengl的工业及游戏开发，国外较成熟。\n  2. 影视动画特效，如皮克斯，也是国外较成熟。\n  3. GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。\n\n**嵌入式方向：**嵌入式方向没说的，Linux很重要。\n掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。 硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法， 我连学电子的那帮学生都竞争不过。 奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运， 不要碰上像Nokia，Hp这样的公司，否则你会很惨的。\n\n**驱动程序设计：**软件开发周期是很长的，硬件不同，很快。 每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。 由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大， 因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了， 所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。\n可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的\n\n\n\n\n\n\n\n\n\n\n\n","slug":"文章阅读-2016-11-02-Linux学习流程发展","published":1,"updated":"2016-11-02T06:31:12.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nntk000r0gpkneu8okkl","content":"<h2 id=\"网上看到的网文，摘录学习\"><a href=\"#网上看到的网文，摘录学习\" class=\"headerlink\" title=\"网上看到的网文，摘录学习\"></a>网上看到的网文，摘录学习</h2><h4 id=\"1、推荐的发行版如下：\"><a href=\"#1、推荐的发行版如下：\" class=\"headerlink\" title=\"1、推荐的发行版如下：\"></a>1、推荐的发行版如下：</h4><p>● UBUNTU 适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。</p>\n<p>  ● Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。</p>\n<p>  ● Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。</p>\n<p>  ● Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。<br>  ● Slackware与Gentoo类似。</p>\n<p>  ● CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。</p>\n<p>  ● LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。</p>\n<h4 id=\"2、Linux平台的C-C-开发，同时还有Bash脚本编程-JAVA\"><a href=\"#2、Linux平台的C-C-开发，同时还有Bash脚本编程-JAVA\" class=\"headerlink\" title=\"2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]\"></a>2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]</h4><p>再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。 同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs， 我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。 Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。<br>虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化， 容易让你忽略一些你应该注意的问题。 IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好， 如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容， 这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。<br>我推荐的书如下：C语言程序设计。 C语言，白皮书当然更好。 C++推荐C++ Primer Plus， Java我不喜欢，就不推荐了，附一个别人的书单：java 入门书籍。 工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书）， 汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。<br>如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。 不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的， 不可能像Bash，VIM这些神品一样。 所以做不好干脆离开。</p>\n<h4 id=\"3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\"><a href=\"#3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\" class=\"headerlink\" title=\"3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\"></a>3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）</h4><p><strong>UNIX环境高级编程</strong>堪称神作，经典中的经典。<br>接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看， 看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强， 你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分， Google创始人的案头书籍，扎尔伯克的床头读物。）</p>\n<p>这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？ 它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容， 想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。 Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。 而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。 所以Linux平台的开发大多是专注于底层的或服务器编程。如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术， 世界顶级黑客将同你分享他的看法。</p>\n<p>亚马逊书店：<a href=\"https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;creative=3132&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=cfjh-23\" target=\"_blank\" rel=\"external\">https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;creative=3132&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=cfjh-23</a></p>\n<h4 id=\"4、选择方向：网络，图形，嵌入式，设备驱动\"><a href=\"#4、选择方向：网络，图形，嵌入式，设备驱动\" class=\"headerlink\" title=\"4、选择方向：网络，图形，嵌入式，设备驱动\"></a>4、选择方向：网络，图形，嵌入式，设备驱动</h4><p>现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。</p>\n<p><strong>网络方向：</strong>服务器软件编写及高性能的并发程序编写<br>如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。 相对来说这是网络编程中技术含量最高的，也是底层的。 需要很多的经验，看很多的书，做很多的项目。<br>我的看法是以下面的顺序来看书：</p>\n<ol>\n<li>APUE再深读 – 尤其是进程，线程，IPC，套接字</li>\n<li>多核程序设计 - Pthread一定得吃透了，你很NB</li>\n<li>UNIX网络编程 – 卷一，卷二</li>\n<li>TCP/IP网络详解 – 卷一 再看上面两本书时就该看了</li>\n<li>TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了</li>\n<li>Lighttpd源代码 - 这个服务器也很有名了</li>\n<li>Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。</li>\n<li>Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现<br>如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡， 网络设备的驱动及嵌入式系统软件应该也不成问题了。<br>当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。 只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！</li>\n</ol>\n<p><strong>图形方向：</strong>我觉得图形方向也是很有前途的，以下几个方面。</p>\n<ol>\n<li>Opengl的工业及游戏开发，国外较成熟。</li>\n<li>影视动画特效，如皮克斯，也是国外较成熟。</li>\n<li>GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。</li>\n</ol>\n<p><strong>嵌入式方向：</strong>嵌入式方向没说的，Linux很重要。<br>掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。 硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法， 我连学电子的那帮学生都竞争不过。 奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运， 不要碰上像Nokia，Hp这样的公司，否则你会很惨的。</p>\n<p><strong>驱动程序设计：</strong>软件开发周期是很长的，硬件不同，很快。 每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。 由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大， 因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了， 所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。<br>可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的</p>\n","excerpt":"","more":"<h2 id=\"网上看到的网文，摘录学习\"><a href=\"#网上看到的网文，摘录学习\" class=\"headerlink\" title=\"网上看到的网文，摘录学习\"></a>网上看到的网文，摘录学习</h2><h4 id=\"1、推荐的发行版如下：\"><a href=\"#1、推荐的发行版如下：\" class=\"headerlink\" title=\"1、推荐的发行版如下：\"></a>1、推荐的发行版如下：</h4><p>● UBUNTU 适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。</p>\n<p>  ● Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。</p>\n<p>  ● Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。</p>\n<p>  ● Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。<br>  ● Slackware与Gentoo类似。</p>\n<p>  ● CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。</p>\n<p>  ● LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。</p>\n<h4 id=\"2、Linux平台的C-C-开发，同时还有Bash脚本编程-JAVA\"><a href=\"#2、Linux平台的C-C-开发，同时还有Bash脚本编程-JAVA\" class=\"headerlink\" title=\"2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]\"></a>2、Linux平台的C/C++开发，同时还有Bash脚本编程[JAVA]</h4><p>再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。 同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs， 我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。 Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。<br>虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化， 容易让你忽略一些你应该注意的问题。 IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好， 如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容， 这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。<br>我推荐的书如下：C语言程序设计。 C语言，白皮书当然更好。 C++推荐C++ Primer Plus， Java我不喜欢，就不推荐了，附一个别人的书单：java 入门书籍。 工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书）， 汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。<br>如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。 不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的， 不可能像Bash，VIM这些神品一样。 所以做不好干脆离开。</p>\n<h4 id=\"3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\"><a href=\"#3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\" class=\"headerlink\" title=\"3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）\"></a>3、UNIX环境高级编程（作者英年早逝，第3版即将出版，稍等）</h4><p><strong>UNIX环境高级编程</strong>堪称神作，经典中的经典。<br>接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看， 看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强， 你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分， Google创始人的案头书籍，扎尔伯克的床头读物。）</p>\n<p>这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？ 它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容， 想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。 Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。 而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。 所以Linux平台的开发大多是专注于底层的或服务器编程。如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术， 世界顶级黑客将同你分享他的看法。</p>\n<p>亚马逊书店：<a href=\"https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;creative=3132&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=cfjh-23\">https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;creative=3132&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=cfjh-23</a></p>\n<h4 id=\"4、选择方向：网络，图形，嵌入式，设备驱动\"><a href=\"#4、选择方向：网络，图形，嵌入式，设备驱动\" class=\"headerlink\" title=\"4、选择方向：网络，图形，嵌入式，设备驱动\"></a>4、选择方向：网络，图形，嵌入式，设备驱动</h4><p>现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。</p>\n<p><strong>网络方向：</strong>服务器软件编写及高性能的并发程序编写<br>如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。 相对来说这是网络编程中技术含量最高的，也是底层的。 需要很多的经验，看很多的书，做很多的项目。<br>我的看法是以下面的顺序来看书：</p>\n<ol>\n<li>APUE再深读 – 尤其是进程，线程，IPC，套接字</li>\n<li>多核程序设计 - Pthread一定得吃透了，你很NB</li>\n<li>UNIX网络编程 – 卷一，卷二</li>\n<li>TCP/IP网络详解 – 卷一 再看上面两本书时就该看了</li>\n<li>TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了</li>\n<li>Lighttpd源代码 - 这个服务器也很有名了</li>\n<li>Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。</li>\n<li>Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现<br>如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡， 网络设备的驱动及嵌入式系统软件应该也不成问题了。<br>当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。 只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！</li>\n</ol>\n<p><strong>图形方向：</strong>我觉得图形方向也是很有前途的，以下几个方面。</p>\n<ol>\n<li>Opengl的工业及游戏开发，国外较成熟。</li>\n<li>影视动画特效，如皮克斯，也是国外较成熟。</li>\n<li>GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。</li>\n</ol>\n<p><strong>嵌入式方向：</strong>嵌入式方向没说的，Linux很重要。<br>掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。 硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法， 我连学电子的那帮学生都竞争不过。 奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运， 不要碰上像Nokia，Hp这样的公司，否则你会很惨的。</p>\n<p><strong>驱动程序设计：</strong>软件开发周期是很长的，硬件不同，很快。 每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。 由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大， 因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了， 所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。<br>可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的</p>\n"},{"title":"文章阅读链接更新页","date":"2016-11-02T07:53:58.000Z","_content":"\n##### 1、我的算法学习之路（Google工程师）\nhttp://zh.lucida.me/blog/on-learning-algorithms/","source":"_posts/文章阅读/2016-11-02-文章阅读链接更新页.md","raw":"---\ntitle: 文章阅读链接更新页\ncategories:\n  - 文章阅读\ntags:\n  - 网页链接更新页\ndate: 2016-11-02 15:53:58\n---\n\n##### 1、我的算法学习之路（Google工程师）\nhttp://zh.lucida.me/blog/on-learning-algorithms/","slug":"文章阅读-2016-11-02-文章阅读链接更新页","published":1,"updated":"2016-11-02T07:58:46.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nntm000s0gpk2s2s1zfg","content":"<h5 id=\"1、我的算法学习之路（Google工程师）\"><a href=\"#1、我的算法学习之路（Google工程师）\" class=\"headerlink\" title=\"1、我的算法学习之路（Google工程师）\"></a>1、我的算法学习之路（Google工程师）</h5><p><a href=\"http://zh.lucida.me/blog/on-learning-algorithms/\" target=\"_blank\" rel=\"external\">http://zh.lucida.me/blog/on-learning-algorithms/</a></p>\n","excerpt":"","more":"<h5 id=\"1、我的算法学习之路（Google工程师）\"><a href=\"#1、我的算法学习之路（Google工程师）\" class=\"headerlink\" title=\"1、我的算法学习之路（Google工程师）\"></a>1、我的算法学习之路（Google工程师）</h5><p><a href=\"http://zh.lucida.me/blog/on-learning-algorithms/\">http://zh.lucida.me/blog/on-learning-algorithms/</a></p>\n"},{"title":"工具集","date":"2016-11-03T14:22:03.000Z","_content":"\n# 备份\n### 备份软件\n  ● Amanda -客户端-服务器模型备份工具\n  ● Bacula – 另一个客户端-服务器模型备份工具\n  ● Backupninja -轻量级，可扩展的元数据备份系统\n  ● Backuppc -客户端-服务器模型备份工具和文件共享方案。\n  ● Burp -网络备份和还原程序\n  ● Duplicity -使用rsync算法加密的带宽-效率备份\n  ● Lsyncd -监控一个本地目录树的变化,然后产生一个进程去同步变化。默认使用rsync。\n  ● Rsnapshot -文件系统快照工具\n  ● SafeKeep -使用rdiff-backup，集中的，基于pull的备份\n  ● TarSnap – 具有一个开源客户端的安全备份服务\n  ● UrBackup -另一个客户端-服务器备份系统\n  ● DREBS – AWS EBS支持策略的备份脚本\n# 克隆\n### 克隆软件\n  ● Clonezilla -分区和磁盘镜像/克隆程序\n  ● Fog – 另一个计算机克隆解决方案\n  ● Redo Backup -简单的备份，恢复和还原\n### 云计算\n  ● AppScale – 兼容Google App引擎的开源云计算软件.\n  ● Archipel -使用Libvirt管理和监视虚拟机\n  ● CloudStack -创建，管理和部署基础云服务的云计算软件\n  ● Cobbler -Cobbler是一个Linux安装服务器，允许快速地构网络安装环境\n  ● Eucalyptus -兼容AWS的开源私有云软件\n  ● Mesos -开发和运行能效高的分布式系统。\n  ● OpenNebula -一个用于系统管理员和研发运维的用户驱动的云管理平台\n  ● OpenStack -构建私有和开放云的开源软件\n  ● The Foreman -Foreman是一个用于物理和虚拟服务器的全生命周期管理工具.FOSS.\n  ● Openstack Juno   云计算平台（类似阿里云，腾讯云这样的管理平台）\n云业务流程\n  ● BOSH -IaaS业务流程平台，最初用于部署和管理云计算平台PaaS,但也用于通用的分布式系统。\n  ● Cloudify -使用Python和YAML编写的开源TOSCA-based云业务流程软件平台。\n  ● Juju -云业务流程工具用于管理服务，比如charms，YAML配置和部署脚本集\n  ● MCollective -来自Puppet实验室的管理服务器业务流程和开发的Ruby框架\n  ● Overcast -在不同的云提供商上部署VMs，并在任何或所有（VM）上通过SSH并行运行命令行和脚本\n  ● Rundeck – 简单的业务流程工具\n  ● Salt -Python编写\n云存储\n  ● git-annex assistant -在你的每一个OSX和Linux电脑，Android设备，可移动驱动，NAS电器和云服务上一个同步文件夹\n  ● ownCloud -提供你的文件的统一访问，通过web，你的电脑和你的移动设备\n  ● Seafile -另一个开源的云存储解决方案\n  ● SparkleShare -提供云存储和文件同步服务。它默认使用Git作为存储后端\n  ● Swift -一个高可用，分布式，最终一致的对象/大数据存储\n  ● Syncthing -一个用于私有，加密和身份认证数据的开源系统\n代码审查\n基于Web的协作式代码审查系统\n  ● Gerrit -基于Git版本控制，它促进软件开发人员审查源代码修改和批准或拒绝这些变更。\n  ● Review Board – 基于MIT License的可用自由软件\n协作软件\n协作软件和群件套件\n  ● Citadel/UX -协同套件（消息和群件）继承于Citadel家族程序\n  ● EGroupware -PHP编写的群件软件\n  ● Horde Groupware -基于PHP的协作软件套件，包括邮件，日历，wiki，时间跟踪和文件管理\n  ● Kolab – 另一个群件套件\n  ● SOGo – 协作软件服务器，专注简单性和可伸缩性\n  ● Zimbra -协作软件套件，包括邮件服务和web客户端\n# 配置管理数据库\n### 配置管理数据库（CMDB）软件\n  ● i-doit – 开源的IT文档管理和CMDB\n  ● iTop -一个完全开源的，ITIL,基于web的服务管理工具\n  ● Ralph -用于大型数据中心或较小本地网络的资产管理，DICM和CMDB系统\n  ● Clusto -帮助跟踪你的库存，在哪，如何连接，同时提供一个和基础架构元素交互的抽象接口\n# 配置管理\n### 配置管理工具\n  ● Ansible -Python编写的，通过SSH管理节点\n  ● Jenkins+Ansible+Gitlab自动化部署三剑客 \n[http://www.showerlee.com/archives/1880][1]\n  ● CFEngine -轻量级代理系统。通过申明语言配置状态。\n  ● Chef -Rbuy和Erlang编写，使用纯RubyDSL\n  ● Fabric – Python库和cli工具，为应用程序部署或系统管理任务简化使用SSH。\n  ● Pallet -通过Clojure DSL进行架构定义，配置和管理\n  ● Puppet – Ruby编写，使用Puppet声明语言或Rbuy DSL\n  ● Salt – Python编写\n  ● Slaughter – Perl编写\n# 持续继承和持续部署\n### 持续集成/部署软件\n  ● Buildbot – 基于Python的持续集成工具\n  ● Drone – 构建在Docker，使用YAML文件配置的的持续集成服务器\n  ● GitLab CI -基于rbuy。他们也提供GitLab用于管理git存储库\n  ● Go – 开源的持续交付服务器\n  ● Jenkins – 一个可扩展的开源持续集成服务器\n  ● Vlad the Deployer -自动化部署\n# 分布式文件系统\n### 网络分布式文件系统\n  ● Ceph -分布式对象存储和文件系统\n  ● DRBD -分布式块设备复制\n  ● LeoFS -非结构化对象/数据存储和高可用性,分布,最终一致的存储系统。\n  ● GlusterFS – 可扩展，网络附加存储文件系统。\n  ● HDFS – Java编写的，用于Hadoop框架的分布式、可伸缩、可移植文件系统\n  ● Lustre -一种并行分布式文件系统,一般用于大规模集群计算。\n  ● MooseFS – 容错、网络分布式文件系统。\n  ● MogileFS -应用程序级别、网络分布式文件系统。\n  ● OpenAFS -只读副本和多操作系统支持的分布式网络文件系统\n  ● TahoeLAFS -安全、分散、容错、点对点分布式数据存储和分布式文件系统。\n  ● XtreemFS -XtreemFS是一个用于存储需求的容错式分布式文件系统。\n# DNS\n### DNS服务器\n  ● Bind -最广泛使用的域名服务软件\n  ● djbdns -DNS应用集合，包括tinydns\n  ● Designate – DNS REST API,支持多种DNS服务器的后端\n  ● dnsmasq -为小规模网络提供DNS,DHCP和TFTP服务的轻量级服务\n  ● Knot – 高性能，权威的DNS服务器\n  ● NSD – 权威的、高性能的、简单的域名服务器。\n  ● PowerDNS -具有各种数据存储后端和负载平衡功能的DNS服务器。\n  ● Unbound – 验证、递归和缓存DNS解析器。\n  ● Yadifa – 具有DNSSEC兼容的轻量级的权威域名服务器，支持.eu的顶级域名。\n# 主机控制面板\n### Web主机控制面板\n  ● Ajenti -Linux和BSD控制面板\n  ● Feathur – VPS供应和管理软件\n  ● ISPConfig -Linux主机控制面板\n  ● VestaCP -用于Linux和Nginx的主机面板\n  ● Virtualmin -基于webmin的Linux控制面板\n  ● ZPanel -Linux BSD和Windows控制面板\n# IMAP/POP3\n### IMAP/POP3邮件服务器\n  ● Courier IMAP/POP3 -快速，可伸缩，企业级IMAP和POP3服务器\n  ● Cyrus IMAP/POP3 -运行在密封服务器上,普通用户不允许登录。\n  ● Dovecot -主要考虑安全而编写的IMAP和POP3服务器\n  ● Qpopper – 一个古老且流行的POP3服务器实现\n# IT资产管理\n### IT资产管理软件\n  ● GLPI -带有额外管理接口的信息资源管理器\n  ● OCS Inventory NG -允许用户清算IT资产\n  ● RackTables -数据中心和服务器房间资产，比如将硬件资产,网络地址,在货架空间,网络配置文档化。\n  ● Ralph – 针对大型数据中心系统以及小型局域网网络的资产管理、DCIM和CMDB。\n  ● Snipe IT -资产和许可证管理软件\n# LDAP\n### LDAP服务器\n  ● 389 Directory Server – 通过Red Hat部署\n  ● Apache Directory Server -用Java编写的Apache软件基金会项目\n  ● Fusion Directory -基于OpenLDAP改善服务和公司目录的管理\n  ● OpenDJ – OpenDS分支\n  ● OpenDS -另一个用Java编写的目录服务器\n  ● OpenLDAP -由OpenLDAP项目开发\n# 日志管理\n### 日志管理工具：收集，解析，可视化\n  ● Elasticsearch – 一个基于Lucene的文档存储，主要用于日志索引、存储和分析。\n  ● Fluentd – 日志收集和发出\n  ● Flume -分布式日志收集和聚合系统\n  ● Graylog2 -具有报警选项的可插入日志和事件分析服务器\n  ● Heka -流处理系统，可用于日志聚合\n  ● Kibana – 可视化日志和时间戳数据\n  ● Logstash -管理事件和日志的工具\n  ● Octopussy -日志管理解决方案（可视化/报警/报告）\n# 监控\n### 监控软件\n  ● Cacti -基于Web的网络监控和图形工具\n  ● Cabot – 监控和报警，类似PagerDuty\n  ● check_mk -Nagios的扩展集合\n  ● Dash -一个用于GNU/Linux机器的低开销web仪表板监控。\n  ● Icinga – Nagios分支\n  ● LibreNMS – Observium分支\n  ● Monit – 管理和监控Unix系统的小型开源工具\n  ● Munin -网络资源监控工具\n  ● Naemon -基于Nagios4内核的网络监控工具，具有性能加强和新功能\n  ● Nagios -计算机系统，网络和基础架构监控软件\n  ● Observium -服务器和网络设备的SNMP监控，运行在linux\n  ● OMD -开放的监控分布\n  ● Opsview -基于Nagios4，Opsview核心，用于小型IT和测试环境\n  ● Riemann -灵活和快速的事件处理器，允许负责时间和度量分析\n  ● Sensu -开源的监控框架\n  ● Sentry – 应用监控，事件记录和聚合\n  ● Shinken – 另一个监控框架\n  ● Thruk – 多后台监控的web接口，支持Naemon，Nagios，Icinga和Shinken\n  ● Xymon -灵感来自Big Brother的网络监控\n  ● Zabbix – Enterprise-class software for monitoring of networks and applications.\n  ● Zabbix – 监控网络和应用的企业级软件\n  ● Zenoss -基于Zope的应用，服务器和网络管理平台\n# 度量和度量收集\n### 度量收集和显示软件\n  ● Collectd -系统统计收集守护进程\n  ● Collectl -高精度系统性能指标收集工具。\n  ● Dashing -Ruby gem,允许快速统计仪表板的开发。基于HTML5，允许在数据中心或会议室进行大屏幕显示。\n  ● Diamond -基于Python的统计收集守护进程\n  ● Ganglia – 基于RRD用于网格和/或集群的服务器的高性能、可伸缩监控设备。兼容Graphite，使用一个单一的收集进程。\n  ● Grafana -一个Graphite或InfluxDB仪表盘和图形编辑器\n  ● 开源的可伸缩绘图服务器\n  ● InfluxDB -开源的分布式时间序列数据库，没有外部依赖。\n  ● KairosDB -快速分布式可扩展的时间序列数据库,OpenTSDB 1. x的分支。\n  ● OpenTSDB -存储和服务大量的时间序列数据，不丢失粒度。\n  ● RRDtool – 开源企业标准，用于时间序列数据的高性能数据记录和绘图系统\n  ● Statsd -应用统计监听\n# 网络配置管理\n### 网络配置管理工具\n  ● GestióIP -一个自动的基于web的IPV4/IPV6地址管理工具\n  ● RANCID -监控网络设备配置和维护历史变更\n  ● rConfig -另一个网络配置管理工具\n# 时事通讯\n### 时事通讯软件\n  ● DadaMail -Perl编写的邮件列表管理器\n  ● phpList -PHP编写的时事通讯管理器\n# NOSQL\n### NOSQL数据库\n#### ● 列族\n  ○ Apache HBase – Hadoop数据库，一个分布式的大数据存储\n  ○ Cassandra -分布式数据库管理系统，设计用于处理大量数据跨多个服务器。\n  ○ Hypertable -基于c++的bigtable DBMS,节省通信，可独立或在Hadoop类似的分布式FS上运行。\n####  ● 文档存储\n  ○ CouchDB -易于使用,多主机复制的面向文档的数据库系统。\n  ○ ElasticSearch – 基于Java的数据库,受欢迎的日志聚合,和电子邮件归档项目。\n  ○ MongoDB – 另一个面向文档的数据库系统\n  ○ RavenDB – 具有ACID/事物功能的基于文档的数据库\n  ○ RethinkDB -开源分布式文档存储数据库，关注JSON\n#### ● 图\n  ○ FlockDB -Twitter分布式，容错图数据库\n  ○ Neo4j – 开源图数据库\n#### ● 键值\n  ○ LevelDB -Google高性能键值数据库\n  ○ Redis – 支持网络，基于内存，键值，亦可持久化数据库\n  ○ Riak -另一个容错的键值NoSQL数据库\nNoSQL服务器比较: [https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis][2]\n### 打包\n  ● fpm – 万能的多格式包创建器\n  ● omnibus-ruby – 全栈，跨发行版的包管理软件（Ruby）\n  ● packman -全栈，跨发行版的包管理软件（Python）\n  ● tito – 为git项目构建RPM\n### 队列\n  ● BeanstalkD – A simple, fast work queue.\n  ● BeanstalkD – 一个简单快速的工作队列\n  ● Gearman -快速的多语言队列或任务处理平台\n  ● NSQ – 实时分发的消息平台\n  ● RabbitMQ -健壮的，全功能，跨发行版的队列系统\n  ● ZeroMQ -轻量级队列系统\n# RDBMS\n### 关系数据库管理系统\n  ● Firebird – 真正的全球开源数据库\n  ● Galera -Galera MySQL集群是一个易于使用的高可用性解决方案，具有很高的系统正常运行时间,没有数据丢失,为未来的增长提供可伸缩性。\n  ● MariaDB -MySQL的社区开发分支\n  ● MySQL – 非常流行的RDBMS服务器\n  ● Percona Server -增强的，可替换MySQL\n  ● PostgreSQL – 对象关系数据库管理系统（ORDBMS)\n  ● PostgreSQL-XL – 基于PostgreSQL的可伸缩开源数据库集群\n  ● SQLite -自包容，弱服务器，零配置，支持事务的SQL DBS实现库\n# 安全\n### 安全工具\n  ● Denyhosts -阻止SSH字典攻击和暴力攻击\n  ● Fail2Ban – 扫描日志文件，并对具有恶意行为显示的IP采取措施\n  ● SpamAssassin -一个强大的和受欢迎的垃圾邮件过滤器，它采用多种检测技术。\n服务发现\n  ● Consul – Consule是伊戈尔服务发现，监控和配置的工具\n  ● Doozerd – Doozer是一个高可用，完全一致的存储，用于少量非常重要的数据\n  ● ZooKeeper – ZooKeeper是一个集中的服务，用于维护配置信息，命名，提供分布式同步和组服务\n# SMTP\n### SMTP服务器\n  ● Exim -由剑桥大学开发的消息传输代理（MTA)\n  ● Haraka – 用JavaScirpt编写的高性能，可插入的SMTP服务器\n  ● MailCatcher -Ruby gem部署一个简单的SMTP MTA网关，接收所有邮件并在web接口显示。对调试和开发有用。\n  ● Maildrop -开源的一次性邮件服务器，对开发也很有用\n  ● OpenSMTPD -从OpenBSD项目实现的安全的SMTP服务器\n  ● Postfix – 快速，易于管理和安全的Sendmail替代品\n  ● Qmail – 安全的Sendmail替代品\n  ● Sendmail -消息传输代理（MTA)\n# 软件容器\n### 操作系统级别的虚拟化\n  ● Bitnami -为web应用，开发栈和虚拟设备生产开源软件安装器或软件包\n  ● Docker – 给开发者和系统管理员构建，发布和运行分布式应用程序的开放平台\n  ● OpenVZ -Linux平台基于容器的虚拟化\n# SSH\n### SSH工具\n  ● autossh -网络中断后自动复位ssh会话。\n  ● Cluster SSH -通过一个图形化控制台控制多个xterm窗口。\n  ● DSH -Dancer的shell/分布式shell-从一个命令行包装执行多个远程shell命令。\n  ● Mosh – 移动shell\n  ● parallel-ssh -提供并行的OpenSSH版本和相关工具\n  ● SSH Power Tool -不使用pre-shared钥匙的情况下对多个服务器同时执行命令和上传文件\n# 统计\n### 分析软件\n  ● Analog – 世界上最流行的日志分析工具\n  ● GoAccess -在终端运行的开源的实时web日志分析和交互视图\n  ● Piwik -免费和开源的web分析应用\n  ● Webalizer – F快速免费的web服务器日志文件分析程序\n# 工单系统\n### 基于web的工单系统\n  ● Bugzilla -由Mozilla项目开发和使用过的通用缺陷跟踪和测试工具\n  ● Cerb – 基于商业开源许可的基于组的邮件管理项目\n  ● Flyspray – 使用PHP编写的缺陷跟踪系统\n  ● MantisBT -另一个基于web的缺陷跟踪系统\n  ● osTicket -开源的技术支持工单系统\n  ● Otrs -免费和开源故障通知单系统软件包,公司,组织,或其他实体可以使用它来基于询问分配工单并跟踪进一步的沟通。\n  ● Request Tracker -使用Perl编写的工单跟踪系统\n  ● TheBugGenie -开源的工单系统，具有非常完备的用户权限分配\n# 故障排除\n### 故障排除工具\n  ● mitmproxy -ython工具，用于拦截,查看和修改网络流量。在排除某些问题是非常重要的。\n  ● Sysdig -从一个运行的linux实例上捕获系统状态和活动，之后保存，过滤和分析\n  ● Wireshark -世界上著名的网络协议分析工具\n# 项目管理\n### 基于web的项目管理和缺陷跟踪系统\n  ● ChiliProject – Redmine分支\n  ● GitBucket 用Scala编写的GitHub的克隆，单独jar安装\n  ● GitLab -用Rbuy编写的GitHub的克隆\n  ● Gogs -用Go编写\n  ● OpenProject -开源的项目协作项目\n  ● Phabricator PHP编写\n  ● Redmine – 基于rails在rbuy编写\n  ● The Bug Genie -PHP编写\n  ● Trac -python编写\n  ● 阿里云持续交付https://crp.aliyun.com/#page6\nredmine项目管理系统\nhttps://bitnami.com/stack/redmine/installer\n\n\n# 版本控制\n### 软件版本和版本控制\n  ● Fossil -分布式版本控制，内建wiki和缺陷跟踪\n  ● Git -速度很快的分布式版本控制和源代码管理\n  ● GNU Bazaar -由Cannoicalzi赞助的分布式版本控制系统\n  ● Mercurial -另一个版本控制\n  ● Subversion -客户端-服务器版本控制系统\n  ● Coding\n  ● 码云\n  ● 阿里云 code.aliyun.com\n# 虚拟化\n### 虚拟化软件\n  ● Ganeti -在KVM和Xen上构建的集群虚拟服务器管理软件\n  ● KVM -Linux内核虚拟化架构\n  ● oVirt -管理虚拟机，存储和虚拟网络\n  ● Packer – 从单个源配置为多个平台创建相同的机器镜像\n  ● Vagrant – 创建完整开发环境的工具\n  ● VirtualBox -来自Oracle公司的虚拟化产品\n  ● Xen -用于32/64位Intel/AMD(IA 64）和PowerPC 970架构的虚拟机监控器\n  ● Docker\n  ● cockpit  (图形化管理Docker容器)\n# VPN\n### VPN软件\n  ● OpenVPN -使用一个定制的安全密钥交换协议,利用SSL / TLS。\n  ● Pritunl -基于OpenVPN的方案，易于设置\n  ● SoftEther – 具有高级特性的多协议VPN软件\n  ● sshuttle -穷人的VPN\n  ● strongSwan – Linux下完整的IPsec实现\n  ● tinc -分布式点对点VPN\n\n# 物联网\n● contiki   一开源物联网系统，支持tcp,vnc等协议\n● yeelink   物联网在线平台\n\n\n# 15款顶级开源人工智能工具推荐\nhttps://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009\n\n\n\n[1]:\thttp://www.showerlee.com/archives/1880\n[2]:\thttps://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis","source":"_posts/杂项/2016-11-03-工具集.md","raw":"---\ntitle: 工具集\ncategories:\n  - 杂项\ntags:\n  - 工具集\ndate: 2016-11-03 22:22:03\n---\n\n# 备份\n### 备份软件\n  ● Amanda -客户端-服务器模型备份工具\n  ● Bacula – 另一个客户端-服务器模型备份工具\n  ● Backupninja -轻量级，可扩展的元数据备份系统\n  ● Backuppc -客户端-服务器模型备份工具和文件共享方案。\n  ● Burp -网络备份和还原程序\n  ● Duplicity -使用rsync算法加密的带宽-效率备份\n  ● Lsyncd -监控一个本地目录树的变化,然后产生一个进程去同步变化。默认使用rsync。\n  ● Rsnapshot -文件系统快照工具\n  ● SafeKeep -使用rdiff-backup，集中的，基于pull的备份\n  ● TarSnap – 具有一个开源客户端的安全备份服务\n  ● UrBackup -另一个客户端-服务器备份系统\n  ● DREBS – AWS EBS支持策略的备份脚本\n# 克隆\n### 克隆软件\n  ● Clonezilla -分区和磁盘镜像/克隆程序\n  ● Fog – 另一个计算机克隆解决方案\n  ● Redo Backup -简单的备份，恢复和还原\n### 云计算\n  ● AppScale – 兼容Google App引擎的开源云计算软件.\n  ● Archipel -使用Libvirt管理和监视虚拟机\n  ● CloudStack -创建，管理和部署基础云服务的云计算软件\n  ● Cobbler -Cobbler是一个Linux安装服务器，允许快速地构网络安装环境\n  ● Eucalyptus -兼容AWS的开源私有云软件\n  ● Mesos -开发和运行能效高的分布式系统。\n  ● OpenNebula -一个用于系统管理员和研发运维的用户驱动的云管理平台\n  ● OpenStack -构建私有和开放云的开源软件\n  ● The Foreman -Foreman是一个用于物理和虚拟服务器的全生命周期管理工具.FOSS.\n  ● Openstack Juno   云计算平台（类似阿里云，腾讯云这样的管理平台）\n云业务流程\n  ● BOSH -IaaS业务流程平台，最初用于部署和管理云计算平台PaaS,但也用于通用的分布式系统。\n  ● Cloudify -使用Python和YAML编写的开源TOSCA-based云业务流程软件平台。\n  ● Juju -云业务流程工具用于管理服务，比如charms，YAML配置和部署脚本集\n  ● MCollective -来自Puppet实验室的管理服务器业务流程和开发的Ruby框架\n  ● Overcast -在不同的云提供商上部署VMs，并在任何或所有（VM）上通过SSH并行运行命令行和脚本\n  ● Rundeck – 简单的业务流程工具\n  ● Salt -Python编写\n云存储\n  ● git-annex assistant -在你的每一个OSX和Linux电脑，Android设备，可移动驱动，NAS电器和云服务上一个同步文件夹\n  ● ownCloud -提供你的文件的统一访问，通过web，你的电脑和你的移动设备\n  ● Seafile -另一个开源的云存储解决方案\n  ● SparkleShare -提供云存储和文件同步服务。它默认使用Git作为存储后端\n  ● Swift -一个高可用，分布式，最终一致的对象/大数据存储\n  ● Syncthing -一个用于私有，加密和身份认证数据的开源系统\n代码审查\n基于Web的协作式代码审查系统\n  ● Gerrit -基于Git版本控制，它促进软件开发人员审查源代码修改和批准或拒绝这些变更。\n  ● Review Board – 基于MIT License的可用自由软件\n协作软件\n协作软件和群件套件\n  ● Citadel/UX -协同套件（消息和群件）继承于Citadel家族程序\n  ● EGroupware -PHP编写的群件软件\n  ● Horde Groupware -基于PHP的协作软件套件，包括邮件，日历，wiki，时间跟踪和文件管理\n  ● Kolab – 另一个群件套件\n  ● SOGo – 协作软件服务器，专注简单性和可伸缩性\n  ● Zimbra -协作软件套件，包括邮件服务和web客户端\n# 配置管理数据库\n### 配置管理数据库（CMDB）软件\n  ● i-doit – 开源的IT文档管理和CMDB\n  ● iTop -一个完全开源的，ITIL,基于web的服务管理工具\n  ● Ralph -用于大型数据中心或较小本地网络的资产管理，DICM和CMDB系统\n  ● Clusto -帮助跟踪你的库存，在哪，如何连接，同时提供一个和基础架构元素交互的抽象接口\n# 配置管理\n### 配置管理工具\n  ● Ansible -Python编写的，通过SSH管理节点\n  ● Jenkins+Ansible+Gitlab自动化部署三剑客 \n[http://www.showerlee.com/archives/1880][1]\n  ● CFEngine -轻量级代理系统。通过申明语言配置状态。\n  ● Chef -Rbuy和Erlang编写，使用纯RubyDSL\n  ● Fabric – Python库和cli工具，为应用程序部署或系统管理任务简化使用SSH。\n  ● Pallet -通过Clojure DSL进行架构定义，配置和管理\n  ● Puppet – Ruby编写，使用Puppet声明语言或Rbuy DSL\n  ● Salt – Python编写\n  ● Slaughter – Perl编写\n# 持续继承和持续部署\n### 持续集成/部署软件\n  ● Buildbot – 基于Python的持续集成工具\n  ● Drone – 构建在Docker，使用YAML文件配置的的持续集成服务器\n  ● GitLab CI -基于rbuy。他们也提供GitLab用于管理git存储库\n  ● Go – 开源的持续交付服务器\n  ● Jenkins – 一个可扩展的开源持续集成服务器\n  ● Vlad the Deployer -自动化部署\n# 分布式文件系统\n### 网络分布式文件系统\n  ● Ceph -分布式对象存储和文件系统\n  ● DRBD -分布式块设备复制\n  ● LeoFS -非结构化对象/数据存储和高可用性,分布,最终一致的存储系统。\n  ● GlusterFS – 可扩展，网络附加存储文件系统。\n  ● HDFS – Java编写的，用于Hadoop框架的分布式、可伸缩、可移植文件系统\n  ● Lustre -一种并行分布式文件系统,一般用于大规模集群计算。\n  ● MooseFS – 容错、网络分布式文件系统。\n  ● MogileFS -应用程序级别、网络分布式文件系统。\n  ● OpenAFS -只读副本和多操作系统支持的分布式网络文件系统\n  ● TahoeLAFS -安全、分散、容错、点对点分布式数据存储和分布式文件系统。\n  ● XtreemFS -XtreemFS是一个用于存储需求的容错式分布式文件系统。\n# DNS\n### DNS服务器\n  ● Bind -最广泛使用的域名服务软件\n  ● djbdns -DNS应用集合，包括tinydns\n  ● Designate – DNS REST API,支持多种DNS服务器的后端\n  ● dnsmasq -为小规模网络提供DNS,DHCP和TFTP服务的轻量级服务\n  ● Knot – 高性能，权威的DNS服务器\n  ● NSD – 权威的、高性能的、简单的域名服务器。\n  ● PowerDNS -具有各种数据存储后端和负载平衡功能的DNS服务器。\n  ● Unbound – 验证、递归和缓存DNS解析器。\n  ● Yadifa – 具有DNSSEC兼容的轻量级的权威域名服务器，支持.eu的顶级域名。\n# 主机控制面板\n### Web主机控制面板\n  ● Ajenti -Linux和BSD控制面板\n  ● Feathur – VPS供应和管理软件\n  ● ISPConfig -Linux主机控制面板\n  ● VestaCP -用于Linux和Nginx的主机面板\n  ● Virtualmin -基于webmin的Linux控制面板\n  ● ZPanel -Linux BSD和Windows控制面板\n# IMAP/POP3\n### IMAP/POP3邮件服务器\n  ● Courier IMAP/POP3 -快速，可伸缩，企业级IMAP和POP3服务器\n  ● Cyrus IMAP/POP3 -运行在密封服务器上,普通用户不允许登录。\n  ● Dovecot -主要考虑安全而编写的IMAP和POP3服务器\n  ● Qpopper – 一个古老且流行的POP3服务器实现\n# IT资产管理\n### IT资产管理软件\n  ● GLPI -带有额外管理接口的信息资源管理器\n  ● OCS Inventory NG -允许用户清算IT资产\n  ● RackTables -数据中心和服务器房间资产，比如将硬件资产,网络地址,在货架空间,网络配置文档化。\n  ● Ralph – 针对大型数据中心系统以及小型局域网网络的资产管理、DCIM和CMDB。\n  ● Snipe IT -资产和许可证管理软件\n# LDAP\n### LDAP服务器\n  ● 389 Directory Server – 通过Red Hat部署\n  ● Apache Directory Server -用Java编写的Apache软件基金会项目\n  ● Fusion Directory -基于OpenLDAP改善服务和公司目录的管理\n  ● OpenDJ – OpenDS分支\n  ● OpenDS -另一个用Java编写的目录服务器\n  ● OpenLDAP -由OpenLDAP项目开发\n# 日志管理\n### 日志管理工具：收集，解析，可视化\n  ● Elasticsearch – 一个基于Lucene的文档存储，主要用于日志索引、存储和分析。\n  ● Fluentd – 日志收集和发出\n  ● Flume -分布式日志收集和聚合系统\n  ● Graylog2 -具有报警选项的可插入日志和事件分析服务器\n  ● Heka -流处理系统，可用于日志聚合\n  ● Kibana – 可视化日志和时间戳数据\n  ● Logstash -管理事件和日志的工具\n  ● Octopussy -日志管理解决方案（可视化/报警/报告）\n# 监控\n### 监控软件\n  ● Cacti -基于Web的网络监控和图形工具\n  ● Cabot – 监控和报警，类似PagerDuty\n  ● check_mk -Nagios的扩展集合\n  ● Dash -一个用于GNU/Linux机器的低开销web仪表板监控。\n  ● Icinga – Nagios分支\n  ● LibreNMS – Observium分支\n  ● Monit – 管理和监控Unix系统的小型开源工具\n  ● Munin -网络资源监控工具\n  ● Naemon -基于Nagios4内核的网络监控工具，具有性能加强和新功能\n  ● Nagios -计算机系统，网络和基础架构监控软件\n  ● Observium -服务器和网络设备的SNMP监控，运行在linux\n  ● OMD -开放的监控分布\n  ● Opsview -基于Nagios4，Opsview核心，用于小型IT和测试环境\n  ● Riemann -灵活和快速的事件处理器，允许负责时间和度量分析\n  ● Sensu -开源的监控框架\n  ● Sentry – 应用监控，事件记录和聚合\n  ● Shinken – 另一个监控框架\n  ● Thruk – 多后台监控的web接口，支持Naemon，Nagios，Icinga和Shinken\n  ● Xymon -灵感来自Big Brother的网络监控\n  ● Zabbix – Enterprise-class software for monitoring of networks and applications.\n  ● Zabbix – 监控网络和应用的企业级软件\n  ● Zenoss -基于Zope的应用，服务器和网络管理平台\n# 度量和度量收集\n### 度量收集和显示软件\n  ● Collectd -系统统计收集守护进程\n  ● Collectl -高精度系统性能指标收集工具。\n  ● Dashing -Ruby gem,允许快速统计仪表板的开发。基于HTML5，允许在数据中心或会议室进行大屏幕显示。\n  ● Diamond -基于Python的统计收集守护进程\n  ● Ganglia – 基于RRD用于网格和/或集群的服务器的高性能、可伸缩监控设备。兼容Graphite，使用一个单一的收集进程。\n  ● Grafana -一个Graphite或InfluxDB仪表盘和图形编辑器\n  ● 开源的可伸缩绘图服务器\n  ● InfluxDB -开源的分布式时间序列数据库，没有外部依赖。\n  ● KairosDB -快速分布式可扩展的时间序列数据库,OpenTSDB 1. x的分支。\n  ● OpenTSDB -存储和服务大量的时间序列数据，不丢失粒度。\n  ● RRDtool – 开源企业标准，用于时间序列数据的高性能数据记录和绘图系统\n  ● Statsd -应用统计监听\n# 网络配置管理\n### 网络配置管理工具\n  ● GestióIP -一个自动的基于web的IPV4/IPV6地址管理工具\n  ● RANCID -监控网络设备配置和维护历史变更\n  ● rConfig -另一个网络配置管理工具\n# 时事通讯\n### 时事通讯软件\n  ● DadaMail -Perl编写的邮件列表管理器\n  ● phpList -PHP编写的时事通讯管理器\n# NOSQL\n### NOSQL数据库\n#### ● 列族\n  ○ Apache HBase – Hadoop数据库，一个分布式的大数据存储\n  ○ Cassandra -分布式数据库管理系统，设计用于处理大量数据跨多个服务器。\n  ○ Hypertable -基于c++的bigtable DBMS,节省通信，可独立或在Hadoop类似的分布式FS上运行。\n####  ● 文档存储\n  ○ CouchDB -易于使用,多主机复制的面向文档的数据库系统。\n  ○ ElasticSearch – 基于Java的数据库,受欢迎的日志聚合,和电子邮件归档项目。\n  ○ MongoDB – 另一个面向文档的数据库系统\n  ○ RavenDB – 具有ACID/事物功能的基于文档的数据库\n  ○ RethinkDB -开源分布式文档存储数据库，关注JSON\n#### ● 图\n  ○ FlockDB -Twitter分布式，容错图数据库\n  ○ Neo4j – 开源图数据库\n#### ● 键值\n  ○ LevelDB -Google高性能键值数据库\n  ○ Redis – 支持网络，基于内存，键值，亦可持久化数据库\n  ○ Riak -另一个容错的键值NoSQL数据库\nNoSQL服务器比较: [https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis][2]\n### 打包\n  ● fpm – 万能的多格式包创建器\n  ● omnibus-ruby – 全栈，跨发行版的包管理软件（Ruby）\n  ● packman -全栈，跨发行版的包管理软件（Python）\n  ● tito – 为git项目构建RPM\n### 队列\n  ● BeanstalkD – A simple, fast work queue.\n  ● BeanstalkD – 一个简单快速的工作队列\n  ● Gearman -快速的多语言队列或任务处理平台\n  ● NSQ – 实时分发的消息平台\n  ● RabbitMQ -健壮的，全功能，跨发行版的队列系统\n  ● ZeroMQ -轻量级队列系统\n# RDBMS\n### 关系数据库管理系统\n  ● Firebird – 真正的全球开源数据库\n  ● Galera -Galera MySQL集群是一个易于使用的高可用性解决方案，具有很高的系统正常运行时间,没有数据丢失,为未来的增长提供可伸缩性。\n  ● MariaDB -MySQL的社区开发分支\n  ● MySQL – 非常流行的RDBMS服务器\n  ● Percona Server -增强的，可替换MySQL\n  ● PostgreSQL – 对象关系数据库管理系统（ORDBMS)\n  ● PostgreSQL-XL – 基于PostgreSQL的可伸缩开源数据库集群\n  ● SQLite -自包容，弱服务器，零配置，支持事务的SQL DBS实现库\n# 安全\n### 安全工具\n  ● Denyhosts -阻止SSH字典攻击和暴力攻击\n  ● Fail2Ban – 扫描日志文件，并对具有恶意行为显示的IP采取措施\n  ● SpamAssassin -一个强大的和受欢迎的垃圾邮件过滤器，它采用多种检测技术。\n服务发现\n  ● Consul – Consule是伊戈尔服务发现，监控和配置的工具\n  ● Doozerd – Doozer是一个高可用，完全一致的存储，用于少量非常重要的数据\n  ● ZooKeeper – ZooKeeper是一个集中的服务，用于维护配置信息，命名，提供分布式同步和组服务\n# SMTP\n### SMTP服务器\n  ● Exim -由剑桥大学开发的消息传输代理（MTA)\n  ● Haraka – 用JavaScirpt编写的高性能，可插入的SMTP服务器\n  ● MailCatcher -Ruby gem部署一个简单的SMTP MTA网关，接收所有邮件并在web接口显示。对调试和开发有用。\n  ● Maildrop -开源的一次性邮件服务器，对开发也很有用\n  ● OpenSMTPD -从OpenBSD项目实现的安全的SMTP服务器\n  ● Postfix – 快速，易于管理和安全的Sendmail替代品\n  ● Qmail – 安全的Sendmail替代品\n  ● Sendmail -消息传输代理（MTA)\n# 软件容器\n### 操作系统级别的虚拟化\n  ● Bitnami -为web应用，开发栈和虚拟设备生产开源软件安装器或软件包\n  ● Docker – 给开发者和系统管理员构建，发布和运行分布式应用程序的开放平台\n  ● OpenVZ -Linux平台基于容器的虚拟化\n# SSH\n### SSH工具\n  ● autossh -网络中断后自动复位ssh会话。\n  ● Cluster SSH -通过一个图形化控制台控制多个xterm窗口。\n  ● DSH -Dancer的shell/分布式shell-从一个命令行包装执行多个远程shell命令。\n  ● Mosh – 移动shell\n  ● parallel-ssh -提供并行的OpenSSH版本和相关工具\n  ● SSH Power Tool -不使用pre-shared钥匙的情况下对多个服务器同时执行命令和上传文件\n# 统计\n### 分析软件\n  ● Analog – 世界上最流行的日志分析工具\n  ● GoAccess -在终端运行的开源的实时web日志分析和交互视图\n  ● Piwik -免费和开源的web分析应用\n  ● Webalizer – F快速免费的web服务器日志文件分析程序\n# 工单系统\n### 基于web的工单系统\n  ● Bugzilla -由Mozilla项目开发和使用过的通用缺陷跟踪和测试工具\n  ● Cerb – 基于商业开源许可的基于组的邮件管理项目\n  ● Flyspray – 使用PHP编写的缺陷跟踪系统\n  ● MantisBT -另一个基于web的缺陷跟踪系统\n  ● osTicket -开源的技术支持工单系统\n  ● Otrs -免费和开源故障通知单系统软件包,公司,组织,或其他实体可以使用它来基于询问分配工单并跟踪进一步的沟通。\n  ● Request Tracker -使用Perl编写的工单跟踪系统\n  ● TheBugGenie -开源的工单系统，具有非常完备的用户权限分配\n# 故障排除\n### 故障排除工具\n  ● mitmproxy -ython工具，用于拦截,查看和修改网络流量。在排除某些问题是非常重要的。\n  ● Sysdig -从一个运行的linux实例上捕获系统状态和活动，之后保存，过滤和分析\n  ● Wireshark -世界上著名的网络协议分析工具\n# 项目管理\n### 基于web的项目管理和缺陷跟踪系统\n  ● ChiliProject – Redmine分支\n  ● GitBucket 用Scala编写的GitHub的克隆，单独jar安装\n  ● GitLab -用Rbuy编写的GitHub的克隆\n  ● Gogs -用Go编写\n  ● OpenProject -开源的项目协作项目\n  ● Phabricator PHP编写\n  ● Redmine – 基于rails在rbuy编写\n  ● The Bug Genie -PHP编写\n  ● Trac -python编写\n  ● 阿里云持续交付https://crp.aliyun.com/#page6\nredmine项目管理系统\nhttps://bitnami.com/stack/redmine/installer\n\n\n# 版本控制\n### 软件版本和版本控制\n  ● Fossil -分布式版本控制，内建wiki和缺陷跟踪\n  ● Git -速度很快的分布式版本控制和源代码管理\n  ● GNU Bazaar -由Cannoicalzi赞助的分布式版本控制系统\n  ● Mercurial -另一个版本控制\n  ● Subversion -客户端-服务器版本控制系统\n  ● Coding\n  ● 码云\n  ● 阿里云 code.aliyun.com\n# 虚拟化\n### 虚拟化软件\n  ● Ganeti -在KVM和Xen上构建的集群虚拟服务器管理软件\n  ● KVM -Linux内核虚拟化架构\n  ● oVirt -管理虚拟机，存储和虚拟网络\n  ● Packer – 从单个源配置为多个平台创建相同的机器镜像\n  ● Vagrant – 创建完整开发环境的工具\n  ● VirtualBox -来自Oracle公司的虚拟化产品\n  ● Xen -用于32/64位Intel/AMD(IA 64）和PowerPC 970架构的虚拟机监控器\n  ● Docker\n  ● cockpit  (图形化管理Docker容器)\n# VPN\n### VPN软件\n  ● OpenVPN -使用一个定制的安全密钥交换协议,利用SSL / TLS。\n  ● Pritunl -基于OpenVPN的方案，易于设置\n  ● SoftEther – 具有高级特性的多协议VPN软件\n  ● sshuttle -穷人的VPN\n  ● strongSwan – Linux下完整的IPsec实现\n  ● tinc -分布式点对点VPN\n\n# 物联网\n● contiki   一开源物联网系统，支持tcp,vnc等协议\n● yeelink   物联网在线平台\n\n\n# 15款顶级开源人工智能工具推荐\nhttps://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009\n\n\n\n[1]:\thttp://www.showerlee.com/archives/1880\n[2]:\thttps://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis","slug":"杂项-2016-11-03-工具集","published":1,"updated":"2016-11-03T15:12:29.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nntp000t0gpkmiptdkcn","content":"<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><h3 id=\"备份软件\"><a href=\"#备份软件\" class=\"headerlink\" title=\"备份软件\"></a>备份软件</h3><p>  ● Amanda -客户端-服务器模型备份工具<br>  ● Bacula – 另一个客户端-服务器模型备份工具<br>  ● Backupninja -轻量级，可扩展的元数据备份系统<br>  ● Backuppc -客户端-服务器模型备份工具和文件共享方案。<br>  ● Burp -网络备份和还原程序<br>  ● Duplicity -使用rsync算法加密的带宽-效率备份<br>  ● Lsyncd -监控一个本地目录树的变化,然后产生一个进程去同步变化。默认使用rsync。<br>  ● Rsnapshot -文件系统快照工具<br>  ● SafeKeep -使用rdiff-backup，集中的，基于pull的备份<br>  ● TarSnap – 具有一个开源客户端的安全备份服务<br>  ● UrBackup -另一个客户端-服务器备份系统<br>  ● DREBS – AWS EBS支持策略的备份脚本</p>\n<h1 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h1><h3 id=\"克隆软件\"><a href=\"#克隆软件\" class=\"headerlink\" title=\"克隆软件\"></a>克隆软件</h3><p>  ● Clonezilla -分区和磁盘镜像/克隆程序<br>  ● Fog – 另一个计算机克隆解决方案<br>  ● Redo Backup -简单的备份，恢复和还原</p>\n<h3 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h3><p>  ● AppScale – 兼容Google App引擎的开源云计算软件.<br>  ● Archipel -使用Libvirt管理和监视虚拟机<br>  ● CloudStack -创建，管理和部署基础云服务的云计算软件<br>  ● Cobbler -Cobbler是一个Linux安装服务器，允许快速地构网络安装环境<br>  ● Eucalyptus -兼容AWS的开源私有云软件<br>  ● Mesos -开发和运行能效高的分布式系统。<br>  ● OpenNebula -一个用于系统管理员和研发运维的用户驱动的云管理平台<br>  ● OpenStack -构建私有和开放云的开源软件<br>  ● The Foreman -Foreman是一个用于物理和虚拟服务器的全生命周期管理工具.FOSS.<br>  ● Openstack Juno   云计算平台（类似阿里云，腾讯云这样的管理平台）<br>云业务流程<br>  ● BOSH -IaaS业务流程平台，最初用于部署和管理云计算平台PaaS,但也用于通用的分布式系统。<br>  ● Cloudify -使用Python和YAML编写的开源TOSCA-based云业务流程软件平台。<br>  ● Juju -云业务流程工具用于管理服务，比如charms，YAML配置和部署脚本集<br>  ● MCollective -来自Puppet实验室的管理服务器业务流程和开发的Ruby框架<br>  ● Overcast -在不同的云提供商上部署VMs，并在任何或所有（VM）上通过SSH并行运行命令行和脚本<br>  ● Rundeck – 简单的业务流程工具<br>  ● Salt -Python编写<br>云存储<br>  ● git-annex assistant -在你的每一个OSX和Linux电脑，Android设备，可移动驱动，NAS电器和云服务上一个同步文件夹<br>  ● ownCloud -提供你的文件的统一访问，通过web，你的电脑和你的移动设备<br>  ● Seafile -另一个开源的云存储解决方案<br>  ● SparkleShare -提供云存储和文件同步服务。它默认使用Git作为存储后端<br>  ● Swift -一个高可用，分布式，最终一致的对象/大数据存储<br>  ● Syncthing -一个用于私有，加密和身份认证数据的开源系统<br>代码审查<br>基于Web的协作式代码审查系统<br>  ● Gerrit -基于Git版本控制，它促进软件开发人员审查源代码修改和批准或拒绝这些变更。<br>  ● Review Board – 基于MIT License的可用自由软件<br>协作软件<br>协作软件和群件套件<br>  ● Citadel/UX -协同套件（消息和群件）继承于Citadel家族程序<br>  ● EGroupware -PHP编写的群件软件<br>  ● Horde Groupware -基于PHP的协作软件套件，包括邮件，日历，wiki，时间跟踪和文件管理<br>  ● Kolab – 另一个群件套件<br>  ● SOGo – 协作软件服务器，专注简单性和可伸缩性<br>  ● Zimbra -协作软件套件，包括邮件服务和web客户端</p>\n<h1 id=\"配置管理数据库\"><a href=\"#配置管理数据库\" class=\"headerlink\" title=\"配置管理数据库\"></a>配置管理数据库</h1><h3 id=\"配置管理数据库（CMDB）软件\"><a href=\"#配置管理数据库（CMDB）软件\" class=\"headerlink\" title=\"配置管理数据库（CMDB）软件\"></a>配置管理数据库（CMDB）软件</h3><p>  ● i-doit – 开源的IT文档管理和CMDB<br>  ● iTop -一个完全开源的，ITIL,基于web的服务管理工具<br>  ● Ralph -用于大型数据中心或较小本地网络的资产管理，DICM和CMDB系统<br>  ● Clusto -帮助跟踪你的库存，在哪，如何连接，同时提供一个和基础架构元素交互的抽象接口</p>\n<h1 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h1><h3 id=\"配置管理工具\"><a href=\"#配置管理工具\" class=\"headerlink\" title=\"配置管理工具\"></a>配置管理工具</h3><p>  ● Ansible -Python编写的，通过SSH管理节点<br>  ● Jenkins+Ansible+Gitlab自动化部署三剑客<br><a href=\"http://www.showerlee.com/archives/1880\" target=\"_blank\" rel=\"external\">http://www.showerlee.com/archives/1880</a><br>  ● CFEngine -轻量级代理系统。通过申明语言配置状态。<br>  ● Chef -Rbuy和Erlang编写，使用纯RubyDSL<br>  ● Fabric – Python库和cli工具，为应用程序部署或系统管理任务简化使用SSH。<br>  ● Pallet -通过Clojure DSL进行架构定义，配置和管理<br>  ● Puppet – Ruby编写，使用Puppet声明语言或Rbuy DSL<br>  ● Salt – Python编写<br>  ● Slaughter – Perl编写</p>\n<h1 id=\"持续继承和持续部署\"><a href=\"#持续继承和持续部署\" class=\"headerlink\" title=\"持续继承和持续部署\"></a>持续继承和持续部署</h1><h3 id=\"持续集成-部署软件\"><a href=\"#持续集成-部署软件\" class=\"headerlink\" title=\"持续集成/部署软件\"></a>持续集成/部署软件</h3><p>  ● Buildbot – 基于Python的持续集成工具<br>  ● Drone – 构建在Docker，使用YAML文件配置的的持续集成服务器<br>  ● GitLab CI -基于rbuy。他们也提供GitLab用于管理git存储库<br>  ● Go – 开源的持续交付服务器<br>  ● Jenkins – 一个可扩展的开源持续集成服务器<br>  ● Vlad the Deployer -自动化部署</p>\n<h1 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h1><h3 id=\"网络分布式文件系统\"><a href=\"#网络分布式文件系统\" class=\"headerlink\" title=\"网络分布式文件系统\"></a>网络分布式文件系统</h3><p>  ● Ceph -分布式对象存储和文件系统<br>  ● DRBD -分布式块设备复制<br>  ● LeoFS -非结构化对象/数据存储和高可用性,分布,最终一致的存储系统。<br>  ● GlusterFS – 可扩展，网络附加存储文件系统。<br>  ● HDFS – Java编写的，用于Hadoop框架的分布式、可伸缩、可移植文件系统<br>  ● Lustre -一种并行分布式文件系统,一般用于大规模集群计算。<br>  ● MooseFS – 容错、网络分布式文件系统。<br>  ● MogileFS -应用程序级别、网络分布式文件系统。<br>  ● OpenAFS -只读副本和多操作系统支持的分布式网络文件系统<br>  ● TahoeLAFS -安全、分散、容错、点对点分布式数据存储和分布式文件系统。<br>  ● XtreemFS -XtreemFS是一个用于存储需求的容错式分布式文件系统。</p>\n<h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><h3 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h3><p>  ● Bind -最广泛使用的域名服务软件<br>  ● djbdns -DNS应用集合，包括tinydns<br>  ● Designate – DNS REST API,支持多种DNS服务器的后端<br>  ● dnsmasq -为小规模网络提供DNS,DHCP和TFTP服务的轻量级服务<br>  ● Knot – 高性能，权威的DNS服务器<br>  ● NSD – 权威的、高性能的、简单的域名服务器。<br>  ● PowerDNS -具有各种数据存储后端和负载平衡功能的DNS服务器。<br>  ● Unbound – 验证、递归和缓存DNS解析器。<br>  ● Yadifa – 具有DNSSEC兼容的轻量级的权威域名服务器，支持.eu的顶级域名。</p>\n<h1 id=\"主机控制面板\"><a href=\"#主机控制面板\" class=\"headerlink\" title=\"主机控制面板\"></a>主机控制面板</h1><h3 id=\"Web主机控制面板\"><a href=\"#Web主机控制面板\" class=\"headerlink\" title=\"Web主机控制面板\"></a>Web主机控制面板</h3><p>  ● Ajenti -Linux和BSD控制面板<br>  ● Feathur – VPS供应和管理软件<br>  ● ISPConfig -Linux主机控制面板<br>  ● VestaCP -用于Linux和Nginx的主机面板<br>  ● Virtualmin -基于webmin的Linux控制面板<br>  ● ZPanel -Linux BSD和Windows控制面板</p>\n<h1 id=\"IMAP-POP3\"><a href=\"#IMAP-POP3\" class=\"headerlink\" title=\"IMAP/POP3\"></a>IMAP/POP3</h1><h3 id=\"IMAP-POP3邮件服务器\"><a href=\"#IMAP-POP3邮件服务器\" class=\"headerlink\" title=\"IMAP/POP3邮件服务器\"></a>IMAP/POP3邮件服务器</h3><p>  ● Courier IMAP/POP3 -快速，可伸缩，企业级IMAP和POP3服务器<br>  ● Cyrus IMAP/POP3 -运行在密封服务器上,普通用户不允许登录。<br>  ● Dovecot -主要考虑安全而编写的IMAP和POP3服务器<br>  ● Qpopper – 一个古老且流行的POP3服务器实现</p>\n<h1 id=\"IT资产管理\"><a href=\"#IT资产管理\" class=\"headerlink\" title=\"IT资产管理\"></a>IT资产管理</h1><h3 id=\"IT资产管理软件\"><a href=\"#IT资产管理软件\" class=\"headerlink\" title=\"IT资产管理软件\"></a>IT资产管理软件</h3><p>  ● GLPI -带有额外管理接口的信息资源管理器<br>  ● OCS Inventory NG -允许用户清算IT资产<br>  ● RackTables -数据中心和服务器房间资产，比如将硬件资产,网络地址,在货架空间,网络配置文档化。<br>  ● Ralph – 针对大型数据中心系统以及小型局域网网络的资产管理、DCIM和CMDB。<br>  ● Snipe IT -资产和许可证管理软件</p>\n<h1 id=\"LDAP\"><a href=\"#LDAP\" class=\"headerlink\" title=\"LDAP\"></a>LDAP</h1><h3 id=\"LDAP服务器\"><a href=\"#LDAP服务器\" class=\"headerlink\" title=\"LDAP服务器\"></a>LDAP服务器</h3><p>  ● 389 Directory Server – 通过Red Hat部署<br>  ● Apache Directory Server -用Java编写的Apache软件基金会项目<br>  ● Fusion Directory -基于OpenLDAP改善服务和公司目录的管理<br>  ● OpenDJ – OpenDS分支<br>  ● OpenDS -另一个用Java编写的目录服务器<br>  ● OpenLDAP -由OpenLDAP项目开发</p>\n<h1 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h1><h3 id=\"日志管理工具：收集，解析，可视化\"><a href=\"#日志管理工具：收集，解析，可视化\" class=\"headerlink\" title=\"日志管理工具：收集，解析，可视化\"></a>日志管理工具：收集，解析，可视化</h3><p>  ● Elasticsearch – 一个基于Lucene的文档存储，主要用于日志索引、存储和分析。<br>  ● Fluentd – 日志收集和发出<br>  ● Flume -分布式日志收集和聚合系统<br>  ● Graylog2 -具有报警选项的可插入日志和事件分析服务器<br>  ● Heka -流处理系统，可用于日志聚合<br>  ● Kibana – 可视化日志和时间戳数据<br>  ● Logstash -管理事件和日志的工具<br>  ● Octopussy -日志管理解决方案（可视化/报警/报告）</p>\n<h1 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h1><h3 id=\"监控软件\"><a href=\"#监控软件\" class=\"headerlink\" title=\"监控软件\"></a>监控软件</h3><p>  ● Cacti -基于Web的网络监控和图形工具<br>  ● Cabot – 监控和报警，类似PagerDuty<br>  ● check_mk -Nagios的扩展集合<br>  ● Dash -一个用于GNU/Linux机器的低开销web仪表板监控。<br>  ● Icinga – Nagios分支<br>  ● LibreNMS – Observium分支<br>  ● Monit – 管理和监控Unix系统的小型开源工具<br>  ● Munin -网络资源监控工具<br>  ● Naemon -基于Nagios4内核的网络监控工具，具有性能加强和新功能<br>  ● Nagios -计算机系统，网络和基础架构监控软件<br>  ● Observium -服务器和网络设备的SNMP监控，运行在linux<br>  ● OMD -开放的监控分布<br>  ● Opsview -基于Nagios4，Opsview核心，用于小型IT和测试环境<br>  ● Riemann -灵活和快速的事件处理器，允许负责时间和度量分析<br>  ● Sensu -开源的监控框架<br>  ● Sentry – 应用监控，事件记录和聚合<br>  ● Shinken – 另一个监控框架<br>  ● Thruk – 多后台监控的web接口，支持Naemon，Nagios，Icinga和Shinken<br>  ● Xymon -灵感来自Big Brother的网络监控<br>  ● Zabbix – Enterprise-class software for monitoring of networks and applications.<br>  ● Zabbix – 监控网络和应用的企业级软件<br>  ● Zenoss -基于Zope的应用，服务器和网络管理平台</p>\n<h1 id=\"度量和度量收集\"><a href=\"#度量和度量收集\" class=\"headerlink\" title=\"度量和度量收集\"></a>度量和度量收集</h1><h3 id=\"度量收集和显示软件\"><a href=\"#度量收集和显示软件\" class=\"headerlink\" title=\"度量收集和显示软件\"></a>度量收集和显示软件</h3><p>  ● Collectd -系统统计收集守护进程<br>  ● Collectl -高精度系统性能指标收集工具。<br>  ● Dashing -Ruby gem,允许快速统计仪表板的开发。基于HTML5，允许在数据中心或会议室进行大屏幕显示。<br>  ● Diamond -基于Python的统计收集守护进程<br>  ● Ganglia – 基于RRD用于网格和/或集群的服务器的高性能、可伸缩监控设备。兼容Graphite，使用一个单一的收集进程。<br>  ● Grafana -一个Graphite或InfluxDB仪表盘和图形编辑器<br>  ● 开源的可伸缩绘图服务器<br>  ● InfluxDB -开源的分布式时间序列数据库，没有外部依赖。<br>  ● KairosDB -快速分布式可扩展的时间序列数据库,OpenTSDB 1. x的分支。<br>  ● OpenTSDB -存储和服务大量的时间序列数据，不丢失粒度。<br>  ● RRDtool – 开源企业标准，用于时间序列数据的高性能数据记录和绘图系统<br>  ● Statsd -应用统计监听</p>\n<h1 id=\"网络配置管理\"><a href=\"#网络配置管理\" class=\"headerlink\" title=\"网络配置管理\"></a>网络配置管理</h1><h3 id=\"网络配置管理工具\"><a href=\"#网络配置管理工具\" class=\"headerlink\" title=\"网络配置管理工具\"></a>网络配置管理工具</h3><p>  ● GestióIP -一个自动的基于web的IPV4/IPV6地址管理工具<br>  ● RANCID -监控网络设备配置和维护历史变更<br>  ● rConfig -另一个网络配置管理工具</p>\n<h1 id=\"时事通讯\"><a href=\"#时事通讯\" class=\"headerlink\" title=\"时事通讯\"></a>时事通讯</h1><h3 id=\"时事通讯软件\"><a href=\"#时事通讯软件\" class=\"headerlink\" title=\"时事通讯软件\"></a>时事通讯软件</h3><p>  ● DadaMail -Perl编写的邮件列表管理器<br>  ● phpList -PHP编写的时事通讯管理器</p>\n<h1 id=\"NOSQL\"><a href=\"#NOSQL\" class=\"headerlink\" title=\"NOSQL\"></a>NOSQL</h1><h3 id=\"NOSQL数据库\"><a href=\"#NOSQL数据库\" class=\"headerlink\" title=\"NOSQL数据库\"></a>NOSQL数据库</h3><h4 id=\"●-列族\"><a href=\"#●-列族\" class=\"headerlink\" title=\"● 列族\"></a>● 列族</h4><p>  ○ Apache HBase – Hadoop数据库，一个分布式的大数据存储<br>  ○ Cassandra -分布式数据库管理系统，设计用于处理大量数据跨多个服务器。<br>  ○ Hypertable -基于c++的bigtable DBMS,节省通信，可独立或在Hadoop类似的分布式FS上运行。</p>\n<h4 id=\"●-文档存储\"><a href=\"#●-文档存储\" class=\"headerlink\" title=\"● 文档存储\"></a>● 文档存储</h4><p>  ○ CouchDB -易于使用,多主机复制的面向文档的数据库系统。<br>  ○ ElasticSearch – 基于Java的数据库,受欢迎的日志聚合,和电子邮件归档项目。<br>  ○ MongoDB – 另一个面向文档的数据库系统<br>  ○ RavenDB – 具有ACID/事物功能的基于文档的数据库<br>  ○ RethinkDB -开源分布式文档存储数据库，关注JSON</p>\n<h4 id=\"●-图\"><a href=\"#●-图\" class=\"headerlink\" title=\"● 图\"></a>● 图</h4><p>  ○ FlockDB -Twitter分布式，容错图数据库<br>  ○ Neo4j – 开源图数据库</p>\n<h4 id=\"●-键值\"><a href=\"#●-键值\" class=\"headerlink\" title=\"● 键值\"></a>● 键值</h4><p>  ○ LevelDB -Google高性能键值数据库<br>  ○ Redis – 支持网络，基于内存，键值，亦可持久化数据库<br>  ○ Riak -另一个容错的键值NoSQL数据库<br>NoSQL服务器比较: <a href=\"https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis\" target=\"_blank\" rel=\"external\">https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>  ● fpm – 万能的多格式包创建器<br>  ● omnibus-ruby – 全栈，跨发行版的包管理软件（Ruby）<br>  ● packman -全栈，跨发行版的包管理软件（Python）<br>  ● tito – 为git项目构建RPM</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>  ● BeanstalkD – A simple, fast work queue.<br>  ● BeanstalkD – 一个简单快速的工作队列<br>  ● Gearman -快速的多语言队列或任务处理平台<br>  ● NSQ – 实时分发的消息平台<br>  ● RabbitMQ -健壮的，全功能，跨发行版的队列系统<br>  ● ZeroMQ -轻量级队列系统</p>\n<h1 id=\"RDBMS\"><a href=\"#RDBMS\" class=\"headerlink\" title=\"RDBMS\"></a>RDBMS</h1><h3 id=\"关系数据库管理系统\"><a href=\"#关系数据库管理系统\" class=\"headerlink\" title=\"关系数据库管理系统\"></a>关系数据库管理系统</h3><p>  ● Firebird – 真正的全球开源数据库<br>  ● Galera -Galera MySQL集群是一个易于使用的高可用性解决方案，具有很高的系统正常运行时间,没有数据丢失,为未来的增长提供可伸缩性。<br>  ● MariaDB -MySQL的社区开发分支<br>  ● MySQL – 非常流行的RDBMS服务器<br>  ● Percona Server -增强的，可替换MySQL<br>  ● PostgreSQL – 对象关系数据库管理系统（ORDBMS)<br>  ● PostgreSQL-XL – 基于PostgreSQL的可伸缩开源数据库集群<br>  ● SQLite -自包容，弱服务器，零配置，支持事务的SQL DBS实现库</p>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><h3 id=\"安全工具\"><a href=\"#安全工具\" class=\"headerlink\" title=\"安全工具\"></a>安全工具</h3><p>  ● Denyhosts -阻止SSH字典攻击和暴力攻击<br>  ● Fail2Ban – 扫描日志文件，并对具有恶意行为显示的IP采取措施<br>  ● SpamAssassin -一个强大的和受欢迎的垃圾邮件过滤器，它采用多种检测技术。<br>服务发现<br>  ● Consul – Consule是伊戈尔服务发现，监控和配置的工具<br>  ● Doozerd – Doozer是一个高可用，完全一致的存储，用于少量非常重要的数据<br>  ● ZooKeeper – ZooKeeper是一个集中的服务，用于维护配置信息，命名，提供分布式同步和组服务</p>\n<h1 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h1><h3 id=\"SMTP服务器\"><a href=\"#SMTP服务器\" class=\"headerlink\" title=\"SMTP服务器\"></a>SMTP服务器</h3><p>  ● Exim -由剑桥大学开发的消息传输代理（MTA)<br>  ● Haraka – 用JavaScirpt编写的高性能，可插入的SMTP服务器<br>  ● MailCatcher -Ruby gem部署一个简单的SMTP MTA网关，接收所有邮件并在web接口显示。对调试和开发有用。<br>  ● Maildrop -开源的一次性邮件服务器，对开发也很有用<br>  ● OpenSMTPD -从OpenBSD项目实现的安全的SMTP服务器<br>  ● Postfix – 快速，易于管理和安全的Sendmail替代品<br>  ● Qmail – 安全的Sendmail替代品<br>  ● Sendmail -消息传输代理（MTA)</p>\n<h1 id=\"软件容器\"><a href=\"#软件容器\" class=\"headerlink\" title=\"软件容器\"></a>软件容器</h1><h3 id=\"操作系统级别的虚拟化\"><a href=\"#操作系统级别的虚拟化\" class=\"headerlink\" title=\"操作系统级别的虚拟化\"></a>操作系统级别的虚拟化</h3><p>  ● Bitnami -为web应用，开发栈和虚拟设备生产开源软件安装器或软件包<br>  ● Docker – 给开发者和系统管理员构建，发布和运行分布式应用程序的开放平台<br>  ● OpenVZ -Linux平台基于容器的虚拟化</p>\n<h1 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h1><h3 id=\"SSH工具\"><a href=\"#SSH工具\" class=\"headerlink\" title=\"SSH工具\"></a>SSH工具</h3><p>  ● autossh -网络中断后自动复位ssh会话。<br>  ● Cluster SSH -通过一个图形化控制台控制多个xterm窗口。<br>  ● DSH -Dancer的shell/分布式shell-从一个命令行包装执行多个远程shell命令。<br>  ● Mosh – 移动shell<br>  ● parallel-ssh -提供并行的OpenSSH版本和相关工具<br>  ● SSH Power Tool -不使用pre-shared钥匙的情况下对多个服务器同时执行命令和上传文件</p>\n<h1 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h1><h3 id=\"分析软件\"><a href=\"#分析软件\" class=\"headerlink\" title=\"分析软件\"></a>分析软件</h3><p>  ● Analog – 世界上最流行的日志分析工具<br>  ● GoAccess -在终端运行的开源的实时web日志分析和交互视图<br>  ● Piwik -免费和开源的web分析应用<br>  ● Webalizer – F快速免费的web服务器日志文件分析程序</p>\n<h1 id=\"工单系统\"><a href=\"#工单系统\" class=\"headerlink\" title=\"工单系统\"></a>工单系统</h1><h3 id=\"基于web的工单系统\"><a href=\"#基于web的工单系统\" class=\"headerlink\" title=\"基于web的工单系统\"></a>基于web的工单系统</h3><p>  ● Bugzilla -由Mozilla项目开发和使用过的通用缺陷跟踪和测试工具<br>  ● Cerb – 基于商业开源许可的基于组的邮件管理项目<br>  ● Flyspray – 使用PHP编写的缺陷跟踪系统<br>  ● MantisBT -另一个基于web的缺陷跟踪系统<br>  ● osTicket -开源的技术支持工单系统<br>  ● Otrs -免费和开源故障通知单系统软件包,公司,组织,或其他实体可以使用它来基于询问分配工单并跟踪进一步的沟通。<br>  ● Request Tracker -使用Perl编写的工单跟踪系统<br>  ● TheBugGenie -开源的工单系统，具有非常完备的用户权限分配</p>\n<h1 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h1><h3 id=\"故障排除工具\"><a href=\"#故障排除工具\" class=\"headerlink\" title=\"故障排除工具\"></a>故障排除工具</h3><p>  ● mitmproxy -ython工具，用于拦截,查看和修改网络流量。在排除某些问题是非常重要的。<br>  ● Sysdig -从一个运行的linux实例上捕获系统状态和活动，之后保存，过滤和分析<br>  ● Wireshark -世界上著名的网络协议分析工具</p>\n<h1 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h1><h3 id=\"基于web的项目管理和缺陷跟踪系统\"><a href=\"#基于web的项目管理和缺陷跟踪系统\" class=\"headerlink\" title=\"基于web的项目管理和缺陷跟踪系统\"></a>基于web的项目管理和缺陷跟踪系统</h3><p>  ● ChiliProject – Redmine分支<br>  ● GitBucket 用Scala编写的GitHub的克隆，单独jar安装<br>  ● GitLab -用Rbuy编写的GitHub的克隆<br>  ● Gogs -用Go编写<br>  ● OpenProject -开源的项目协作项目<br>  ● Phabricator PHP编写<br>  ● Redmine – 基于rails在rbuy编写<br>  ● The Bug Genie -PHP编写<br>  ● Trac -python编写<br>  ● 阿里云持续交付<a href=\"https://crp.aliyun.com/#page6\" target=\"_blank\" rel=\"external\">https://crp.aliyun.com/#page6</a><br>redmine项目管理系统<br><a href=\"https://bitnami.com/stack/redmine/installer\" target=\"_blank\" rel=\"external\">https://bitnami.com/stack/redmine/installer</a></p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><h3 id=\"软件版本和版本控制\"><a href=\"#软件版本和版本控制\" class=\"headerlink\" title=\"软件版本和版本控制\"></a>软件版本和版本控制</h3><p>  ● Fossil -分布式版本控制，内建wiki和缺陷跟踪<br>  ● Git -速度很快的分布式版本控制和源代码管理<br>  ● GNU Bazaar -由Cannoicalzi赞助的分布式版本控制系统<br>  ● Mercurial -另一个版本控制<br>  ● Subversion -客户端-服务器版本控制系统<br>  ● Coding<br>  ● 码云<br>  ● 阿里云 code.aliyun.com</p>\n<h1 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h1><h3 id=\"虚拟化软件\"><a href=\"#虚拟化软件\" class=\"headerlink\" title=\"虚拟化软件\"></a>虚拟化软件</h3><p>  ● Ganeti -在KVM和Xen上构建的集群虚拟服务器管理软件<br>  ● KVM -Linux内核虚拟化架构<br>  ● oVirt -管理虚拟机，存储和虚拟网络<br>  ● Packer – 从单个源配置为多个平台创建相同的机器镜像<br>  ● Vagrant – 创建完整开发环境的工具<br>  ● VirtualBox -来自Oracle公司的虚拟化产品<br>  ● Xen -用于32/64位Intel/AMD(IA 64）和PowerPC 970架构的虚拟机监控器<br>  ● Docker<br>  ● cockpit  (图形化管理Docker容器)</p>\n<h1 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h1><h3 id=\"VPN软件\"><a href=\"#VPN软件\" class=\"headerlink\" title=\"VPN软件\"></a>VPN软件</h3><p>  ● OpenVPN -使用一个定制的安全密钥交换协议,利用SSL / TLS。<br>  ● Pritunl -基于OpenVPN的方案，易于设置<br>  ● SoftEther – 具有高级特性的多协议VPN软件<br>  ● sshuttle -穷人的VPN<br>  ● strongSwan – Linux下完整的IPsec实现<br>  ● tinc -分布式点对点VPN</p>\n<h1 id=\"物联网\"><a href=\"#物联网\" class=\"headerlink\" title=\"物联网\"></a>物联网</h1><p>● contiki   一开源物联网系统，支持tcp,vnc等协议<br>● yeelink   物联网在线平台</p>\n<h1 id=\"15款顶级开源人工智能工具推荐\"><a href=\"#15款顶级开源人工智能工具推荐\" class=\"headerlink\" title=\"15款顶级开源人工智能工具推荐\"></a>15款顶级开源人工智能工具推荐</h1><p><a href=\"https://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009\" target=\"_blank\" rel=\"external\">https://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009</a></p>\n","excerpt":"","more":"<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><h3 id=\"备份软件\"><a href=\"#备份软件\" class=\"headerlink\" title=\"备份软件\"></a>备份软件</h3><p>  ● Amanda -客户端-服务器模型备份工具<br>  ● Bacula – 另一个客户端-服务器模型备份工具<br>  ● Backupninja -轻量级，可扩展的元数据备份系统<br>  ● Backuppc -客户端-服务器模型备份工具和文件共享方案。<br>  ● Burp -网络备份和还原程序<br>  ● Duplicity -使用rsync算法加密的带宽-效率备份<br>  ● Lsyncd -监控一个本地目录树的变化,然后产生一个进程去同步变化。默认使用rsync。<br>  ● Rsnapshot -文件系统快照工具<br>  ● SafeKeep -使用rdiff-backup，集中的，基于pull的备份<br>  ● TarSnap – 具有一个开源客户端的安全备份服务<br>  ● UrBackup -另一个客户端-服务器备份系统<br>  ● DREBS – AWS EBS支持策略的备份脚本</p>\n<h1 id=\"克隆\"><a href=\"#克隆\" class=\"headerlink\" title=\"克隆\"></a>克隆</h1><h3 id=\"克隆软件\"><a href=\"#克隆软件\" class=\"headerlink\" title=\"克隆软件\"></a>克隆软件</h3><p>  ● Clonezilla -分区和磁盘镜像/克隆程序<br>  ● Fog – 另一个计算机克隆解决方案<br>  ● Redo Backup -简单的备份，恢复和还原</p>\n<h3 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h3><p>  ● AppScale – 兼容Google App引擎的开源云计算软件.<br>  ● Archipel -使用Libvirt管理和监视虚拟机<br>  ● CloudStack -创建，管理和部署基础云服务的云计算软件<br>  ● Cobbler -Cobbler是一个Linux安装服务器，允许快速地构网络安装环境<br>  ● Eucalyptus -兼容AWS的开源私有云软件<br>  ● Mesos -开发和运行能效高的分布式系统。<br>  ● OpenNebula -一个用于系统管理员和研发运维的用户驱动的云管理平台<br>  ● OpenStack -构建私有和开放云的开源软件<br>  ● The Foreman -Foreman是一个用于物理和虚拟服务器的全生命周期管理工具.FOSS.<br>  ● Openstack Juno   云计算平台（类似阿里云，腾讯云这样的管理平台）<br>云业务流程<br>  ● BOSH -IaaS业务流程平台，最初用于部署和管理云计算平台PaaS,但也用于通用的分布式系统。<br>  ● Cloudify -使用Python和YAML编写的开源TOSCA-based云业务流程软件平台。<br>  ● Juju -云业务流程工具用于管理服务，比如charms，YAML配置和部署脚本集<br>  ● MCollective -来自Puppet实验室的管理服务器业务流程和开发的Ruby框架<br>  ● Overcast -在不同的云提供商上部署VMs，并在任何或所有（VM）上通过SSH并行运行命令行和脚本<br>  ● Rundeck – 简单的业务流程工具<br>  ● Salt -Python编写<br>云存储<br>  ● git-annex assistant -在你的每一个OSX和Linux电脑，Android设备，可移动驱动，NAS电器和云服务上一个同步文件夹<br>  ● ownCloud -提供你的文件的统一访问，通过web，你的电脑和你的移动设备<br>  ● Seafile -另一个开源的云存储解决方案<br>  ● SparkleShare -提供云存储和文件同步服务。它默认使用Git作为存储后端<br>  ● Swift -一个高可用，分布式，最终一致的对象/大数据存储<br>  ● Syncthing -一个用于私有，加密和身份认证数据的开源系统<br>代码审查<br>基于Web的协作式代码审查系统<br>  ● Gerrit -基于Git版本控制，它促进软件开发人员审查源代码修改和批准或拒绝这些变更。<br>  ● Review Board – 基于MIT License的可用自由软件<br>协作软件<br>协作软件和群件套件<br>  ● Citadel/UX -协同套件（消息和群件）继承于Citadel家族程序<br>  ● EGroupware -PHP编写的群件软件<br>  ● Horde Groupware -基于PHP的协作软件套件，包括邮件，日历，wiki，时间跟踪和文件管理<br>  ● Kolab – 另一个群件套件<br>  ● SOGo – 协作软件服务器，专注简单性和可伸缩性<br>  ● Zimbra -协作软件套件，包括邮件服务和web客户端</p>\n<h1 id=\"配置管理数据库\"><a href=\"#配置管理数据库\" class=\"headerlink\" title=\"配置管理数据库\"></a>配置管理数据库</h1><h3 id=\"配置管理数据库（CMDB）软件\"><a href=\"#配置管理数据库（CMDB）软件\" class=\"headerlink\" title=\"配置管理数据库（CMDB）软件\"></a>配置管理数据库（CMDB）软件</h3><p>  ● i-doit – 开源的IT文档管理和CMDB<br>  ● iTop -一个完全开源的，ITIL,基于web的服务管理工具<br>  ● Ralph -用于大型数据中心或较小本地网络的资产管理，DICM和CMDB系统<br>  ● Clusto -帮助跟踪你的库存，在哪，如何连接，同时提供一个和基础架构元素交互的抽象接口</p>\n<h1 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h1><h3 id=\"配置管理工具\"><a href=\"#配置管理工具\" class=\"headerlink\" title=\"配置管理工具\"></a>配置管理工具</h3><p>  ● Ansible -Python编写的，通过SSH管理节点<br>  ● Jenkins+Ansible+Gitlab自动化部署三剑客<br><a href=\"http://www.showerlee.com/archives/1880\">http://www.showerlee.com/archives/1880</a><br>  ● CFEngine -轻量级代理系统。通过申明语言配置状态。<br>  ● Chef -Rbuy和Erlang编写，使用纯RubyDSL<br>  ● Fabric – Python库和cli工具，为应用程序部署或系统管理任务简化使用SSH。<br>  ● Pallet -通过Clojure DSL进行架构定义，配置和管理<br>  ● Puppet – Ruby编写，使用Puppet声明语言或Rbuy DSL<br>  ● Salt – Python编写<br>  ● Slaughter – Perl编写</p>\n<h1 id=\"持续继承和持续部署\"><a href=\"#持续继承和持续部署\" class=\"headerlink\" title=\"持续继承和持续部署\"></a>持续继承和持续部署</h1><h3 id=\"持续集成-部署软件\"><a href=\"#持续集成-部署软件\" class=\"headerlink\" title=\"持续集成/部署软件\"></a>持续集成/部署软件</h3><p>  ● Buildbot – 基于Python的持续集成工具<br>  ● Drone – 构建在Docker，使用YAML文件配置的的持续集成服务器<br>  ● GitLab CI -基于rbuy。他们也提供GitLab用于管理git存储库<br>  ● Go – 开源的持续交付服务器<br>  ● Jenkins – 一个可扩展的开源持续集成服务器<br>  ● Vlad the Deployer -自动化部署</p>\n<h1 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h1><h3 id=\"网络分布式文件系统\"><a href=\"#网络分布式文件系统\" class=\"headerlink\" title=\"网络分布式文件系统\"></a>网络分布式文件系统</h3><p>  ● Ceph -分布式对象存储和文件系统<br>  ● DRBD -分布式块设备复制<br>  ● LeoFS -非结构化对象/数据存储和高可用性,分布,最终一致的存储系统。<br>  ● GlusterFS – 可扩展，网络附加存储文件系统。<br>  ● HDFS – Java编写的，用于Hadoop框架的分布式、可伸缩、可移植文件系统<br>  ● Lustre -一种并行分布式文件系统,一般用于大规模集群计算。<br>  ● MooseFS – 容错、网络分布式文件系统。<br>  ● MogileFS -应用程序级别、网络分布式文件系统。<br>  ● OpenAFS -只读副本和多操作系统支持的分布式网络文件系统<br>  ● TahoeLAFS -安全、分散、容错、点对点分布式数据存储和分布式文件系统。<br>  ● XtreemFS -XtreemFS是一个用于存储需求的容错式分布式文件系统。</p>\n<h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><h3 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h3><p>  ● Bind -最广泛使用的域名服务软件<br>  ● djbdns -DNS应用集合，包括tinydns<br>  ● Designate – DNS REST API,支持多种DNS服务器的后端<br>  ● dnsmasq -为小规模网络提供DNS,DHCP和TFTP服务的轻量级服务<br>  ● Knot – 高性能，权威的DNS服务器<br>  ● NSD – 权威的、高性能的、简单的域名服务器。<br>  ● PowerDNS -具有各种数据存储后端和负载平衡功能的DNS服务器。<br>  ● Unbound – 验证、递归和缓存DNS解析器。<br>  ● Yadifa – 具有DNSSEC兼容的轻量级的权威域名服务器，支持.eu的顶级域名。</p>\n<h1 id=\"主机控制面板\"><a href=\"#主机控制面板\" class=\"headerlink\" title=\"主机控制面板\"></a>主机控制面板</h1><h3 id=\"Web主机控制面板\"><a href=\"#Web主机控制面板\" class=\"headerlink\" title=\"Web主机控制面板\"></a>Web主机控制面板</h3><p>  ● Ajenti -Linux和BSD控制面板<br>  ● Feathur – VPS供应和管理软件<br>  ● ISPConfig -Linux主机控制面板<br>  ● VestaCP -用于Linux和Nginx的主机面板<br>  ● Virtualmin -基于webmin的Linux控制面板<br>  ● ZPanel -Linux BSD和Windows控制面板</p>\n<h1 id=\"IMAP-POP3\"><a href=\"#IMAP-POP3\" class=\"headerlink\" title=\"IMAP/POP3\"></a>IMAP/POP3</h1><h3 id=\"IMAP-POP3邮件服务器\"><a href=\"#IMAP-POP3邮件服务器\" class=\"headerlink\" title=\"IMAP/POP3邮件服务器\"></a>IMAP/POP3邮件服务器</h3><p>  ● Courier IMAP/POP3 -快速，可伸缩，企业级IMAP和POP3服务器<br>  ● Cyrus IMAP/POP3 -运行在密封服务器上,普通用户不允许登录。<br>  ● Dovecot -主要考虑安全而编写的IMAP和POP3服务器<br>  ● Qpopper – 一个古老且流行的POP3服务器实现</p>\n<h1 id=\"IT资产管理\"><a href=\"#IT资产管理\" class=\"headerlink\" title=\"IT资产管理\"></a>IT资产管理</h1><h3 id=\"IT资产管理软件\"><a href=\"#IT资产管理软件\" class=\"headerlink\" title=\"IT资产管理软件\"></a>IT资产管理软件</h3><p>  ● GLPI -带有额外管理接口的信息资源管理器<br>  ● OCS Inventory NG -允许用户清算IT资产<br>  ● RackTables -数据中心和服务器房间资产，比如将硬件资产,网络地址,在货架空间,网络配置文档化。<br>  ● Ralph – 针对大型数据中心系统以及小型局域网网络的资产管理、DCIM和CMDB。<br>  ● Snipe IT -资产和许可证管理软件</p>\n<h1 id=\"LDAP\"><a href=\"#LDAP\" class=\"headerlink\" title=\"LDAP\"></a>LDAP</h1><h3 id=\"LDAP服务器\"><a href=\"#LDAP服务器\" class=\"headerlink\" title=\"LDAP服务器\"></a>LDAP服务器</h3><p>  ● 389 Directory Server – 通过Red Hat部署<br>  ● Apache Directory Server -用Java编写的Apache软件基金会项目<br>  ● Fusion Directory -基于OpenLDAP改善服务和公司目录的管理<br>  ● OpenDJ – OpenDS分支<br>  ● OpenDS -另一个用Java编写的目录服务器<br>  ● OpenLDAP -由OpenLDAP项目开发</p>\n<h1 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h1><h3 id=\"日志管理工具：收集，解析，可视化\"><a href=\"#日志管理工具：收集，解析，可视化\" class=\"headerlink\" title=\"日志管理工具：收集，解析，可视化\"></a>日志管理工具：收集，解析，可视化</h3><p>  ● Elasticsearch – 一个基于Lucene的文档存储，主要用于日志索引、存储和分析。<br>  ● Fluentd – 日志收集和发出<br>  ● Flume -分布式日志收集和聚合系统<br>  ● Graylog2 -具有报警选项的可插入日志和事件分析服务器<br>  ● Heka -流处理系统，可用于日志聚合<br>  ● Kibana – 可视化日志和时间戳数据<br>  ● Logstash -管理事件和日志的工具<br>  ● Octopussy -日志管理解决方案（可视化/报警/报告）</p>\n<h1 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h1><h3 id=\"监控软件\"><a href=\"#监控软件\" class=\"headerlink\" title=\"监控软件\"></a>监控软件</h3><p>  ● Cacti -基于Web的网络监控和图形工具<br>  ● Cabot – 监控和报警，类似PagerDuty<br>  ● check_mk -Nagios的扩展集合<br>  ● Dash -一个用于GNU/Linux机器的低开销web仪表板监控。<br>  ● Icinga – Nagios分支<br>  ● LibreNMS – Observium分支<br>  ● Monit – 管理和监控Unix系统的小型开源工具<br>  ● Munin -网络资源监控工具<br>  ● Naemon -基于Nagios4内核的网络监控工具，具有性能加强和新功能<br>  ● Nagios -计算机系统，网络和基础架构监控软件<br>  ● Observium -服务器和网络设备的SNMP监控，运行在linux<br>  ● OMD -开放的监控分布<br>  ● Opsview -基于Nagios4，Opsview核心，用于小型IT和测试环境<br>  ● Riemann -灵活和快速的事件处理器，允许负责时间和度量分析<br>  ● Sensu -开源的监控框架<br>  ● Sentry – 应用监控，事件记录和聚合<br>  ● Shinken – 另一个监控框架<br>  ● Thruk – 多后台监控的web接口，支持Naemon，Nagios，Icinga和Shinken<br>  ● Xymon -灵感来自Big Brother的网络监控<br>  ● Zabbix – Enterprise-class software for monitoring of networks and applications.<br>  ● Zabbix – 监控网络和应用的企业级软件<br>  ● Zenoss -基于Zope的应用，服务器和网络管理平台</p>\n<h1 id=\"度量和度量收集\"><a href=\"#度量和度量收集\" class=\"headerlink\" title=\"度量和度量收集\"></a>度量和度量收集</h1><h3 id=\"度量收集和显示软件\"><a href=\"#度量收集和显示软件\" class=\"headerlink\" title=\"度量收集和显示软件\"></a>度量收集和显示软件</h3><p>  ● Collectd -系统统计收集守护进程<br>  ● Collectl -高精度系统性能指标收集工具。<br>  ● Dashing -Ruby gem,允许快速统计仪表板的开发。基于HTML5，允许在数据中心或会议室进行大屏幕显示。<br>  ● Diamond -基于Python的统计收集守护进程<br>  ● Ganglia – 基于RRD用于网格和/或集群的服务器的高性能、可伸缩监控设备。兼容Graphite，使用一个单一的收集进程。<br>  ● Grafana -一个Graphite或InfluxDB仪表盘和图形编辑器<br>  ● 开源的可伸缩绘图服务器<br>  ● InfluxDB -开源的分布式时间序列数据库，没有外部依赖。<br>  ● KairosDB -快速分布式可扩展的时间序列数据库,OpenTSDB 1. x的分支。<br>  ● OpenTSDB -存储和服务大量的时间序列数据，不丢失粒度。<br>  ● RRDtool – 开源企业标准，用于时间序列数据的高性能数据记录和绘图系统<br>  ● Statsd -应用统计监听</p>\n<h1 id=\"网络配置管理\"><a href=\"#网络配置管理\" class=\"headerlink\" title=\"网络配置管理\"></a>网络配置管理</h1><h3 id=\"网络配置管理工具\"><a href=\"#网络配置管理工具\" class=\"headerlink\" title=\"网络配置管理工具\"></a>网络配置管理工具</h3><p>  ● GestióIP -一个自动的基于web的IPV4/IPV6地址管理工具<br>  ● RANCID -监控网络设备配置和维护历史变更<br>  ● rConfig -另一个网络配置管理工具</p>\n<h1 id=\"时事通讯\"><a href=\"#时事通讯\" class=\"headerlink\" title=\"时事通讯\"></a>时事通讯</h1><h3 id=\"时事通讯软件\"><a href=\"#时事通讯软件\" class=\"headerlink\" title=\"时事通讯软件\"></a>时事通讯软件</h3><p>  ● DadaMail -Perl编写的邮件列表管理器<br>  ● phpList -PHP编写的时事通讯管理器</p>\n<h1 id=\"NOSQL\"><a href=\"#NOSQL\" class=\"headerlink\" title=\"NOSQL\"></a>NOSQL</h1><h3 id=\"NOSQL数据库\"><a href=\"#NOSQL数据库\" class=\"headerlink\" title=\"NOSQL数据库\"></a>NOSQL数据库</h3><h4 id=\"●-列族\"><a href=\"#●-列族\" class=\"headerlink\" title=\"● 列族\"></a>● 列族</h4><p>  ○ Apache HBase – Hadoop数据库，一个分布式的大数据存储<br>  ○ Cassandra -分布式数据库管理系统，设计用于处理大量数据跨多个服务器。<br>  ○ Hypertable -基于c++的bigtable DBMS,节省通信，可独立或在Hadoop类似的分布式FS上运行。</p>\n<h4 id=\"●-文档存储\"><a href=\"#●-文档存储\" class=\"headerlink\" title=\"● 文档存储\"></a>● 文档存储</h4><p>  ○ CouchDB -易于使用,多主机复制的面向文档的数据库系统。<br>  ○ ElasticSearch – 基于Java的数据库,受欢迎的日志聚合,和电子邮件归档项目。<br>  ○ MongoDB – 另一个面向文档的数据库系统<br>  ○ RavenDB – 具有ACID/事物功能的基于文档的数据库<br>  ○ RethinkDB -开源分布式文档存储数据库，关注JSON</p>\n<h4 id=\"●-图\"><a href=\"#●-图\" class=\"headerlink\" title=\"● 图\"></a>● 图</h4><p>  ○ FlockDB -Twitter分布式，容错图数据库<br>  ○ Neo4j – 开源图数据库</p>\n<h4 id=\"●-键值\"><a href=\"#●-键值\" class=\"headerlink\" title=\"● 键值\"></a>● 键值</h4><p>  ○ LevelDB -Google高性能键值数据库<br>  ○ Redis – 支持网络，基于内存，键值，亦可持久化数据库<br>  ○ Riak -另一个容错的键值NoSQL数据库<br>NoSQL服务器比较: <a href=\"https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis\">https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis</a></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>  ● fpm – 万能的多格式包创建器<br>  ● omnibus-ruby – 全栈，跨发行版的包管理软件（Ruby）<br>  ● packman -全栈，跨发行版的包管理软件（Python）<br>  ● tito – 为git项目构建RPM</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>  ● BeanstalkD – A simple, fast work queue.<br>  ● BeanstalkD – 一个简单快速的工作队列<br>  ● Gearman -快速的多语言队列或任务处理平台<br>  ● NSQ – 实时分发的消息平台<br>  ● RabbitMQ -健壮的，全功能，跨发行版的队列系统<br>  ● ZeroMQ -轻量级队列系统</p>\n<h1 id=\"RDBMS\"><a href=\"#RDBMS\" class=\"headerlink\" title=\"RDBMS\"></a>RDBMS</h1><h3 id=\"关系数据库管理系统\"><a href=\"#关系数据库管理系统\" class=\"headerlink\" title=\"关系数据库管理系统\"></a>关系数据库管理系统</h3><p>  ● Firebird – 真正的全球开源数据库<br>  ● Galera -Galera MySQL集群是一个易于使用的高可用性解决方案，具有很高的系统正常运行时间,没有数据丢失,为未来的增长提供可伸缩性。<br>  ● MariaDB -MySQL的社区开发分支<br>  ● MySQL – 非常流行的RDBMS服务器<br>  ● Percona Server -增强的，可替换MySQL<br>  ● PostgreSQL – 对象关系数据库管理系统（ORDBMS)<br>  ● PostgreSQL-XL – 基于PostgreSQL的可伸缩开源数据库集群<br>  ● SQLite -自包容，弱服务器，零配置，支持事务的SQL DBS实现库</p>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><h3 id=\"安全工具\"><a href=\"#安全工具\" class=\"headerlink\" title=\"安全工具\"></a>安全工具</h3><p>  ● Denyhosts -阻止SSH字典攻击和暴力攻击<br>  ● Fail2Ban – 扫描日志文件，并对具有恶意行为显示的IP采取措施<br>  ● SpamAssassin -一个强大的和受欢迎的垃圾邮件过滤器，它采用多种检测技术。<br>服务发现<br>  ● Consul – Consule是伊戈尔服务发现，监控和配置的工具<br>  ● Doozerd – Doozer是一个高可用，完全一致的存储，用于少量非常重要的数据<br>  ● ZooKeeper – ZooKeeper是一个集中的服务，用于维护配置信息，命名，提供分布式同步和组服务</p>\n<h1 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h1><h3 id=\"SMTP服务器\"><a href=\"#SMTP服务器\" class=\"headerlink\" title=\"SMTP服务器\"></a>SMTP服务器</h3><p>  ● Exim -由剑桥大学开发的消息传输代理（MTA)<br>  ● Haraka – 用JavaScirpt编写的高性能，可插入的SMTP服务器<br>  ● MailCatcher -Ruby gem部署一个简单的SMTP MTA网关，接收所有邮件并在web接口显示。对调试和开发有用。<br>  ● Maildrop -开源的一次性邮件服务器，对开发也很有用<br>  ● OpenSMTPD -从OpenBSD项目实现的安全的SMTP服务器<br>  ● Postfix – 快速，易于管理和安全的Sendmail替代品<br>  ● Qmail – 安全的Sendmail替代品<br>  ● Sendmail -消息传输代理（MTA)</p>\n<h1 id=\"软件容器\"><a href=\"#软件容器\" class=\"headerlink\" title=\"软件容器\"></a>软件容器</h1><h3 id=\"操作系统级别的虚拟化\"><a href=\"#操作系统级别的虚拟化\" class=\"headerlink\" title=\"操作系统级别的虚拟化\"></a>操作系统级别的虚拟化</h3><p>  ● Bitnami -为web应用，开发栈和虚拟设备生产开源软件安装器或软件包<br>  ● Docker – 给开发者和系统管理员构建，发布和运行分布式应用程序的开放平台<br>  ● OpenVZ -Linux平台基于容器的虚拟化</p>\n<h1 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h1><h3 id=\"SSH工具\"><a href=\"#SSH工具\" class=\"headerlink\" title=\"SSH工具\"></a>SSH工具</h3><p>  ● autossh -网络中断后自动复位ssh会话。<br>  ● Cluster SSH -通过一个图形化控制台控制多个xterm窗口。<br>  ● DSH -Dancer的shell/分布式shell-从一个命令行包装执行多个远程shell命令。<br>  ● Mosh – 移动shell<br>  ● parallel-ssh -提供并行的OpenSSH版本和相关工具<br>  ● SSH Power Tool -不使用pre-shared钥匙的情况下对多个服务器同时执行命令和上传文件</p>\n<h1 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h1><h3 id=\"分析软件\"><a href=\"#分析软件\" class=\"headerlink\" title=\"分析软件\"></a>分析软件</h3><p>  ● Analog – 世界上最流行的日志分析工具<br>  ● GoAccess -在终端运行的开源的实时web日志分析和交互视图<br>  ● Piwik -免费和开源的web分析应用<br>  ● Webalizer – F快速免费的web服务器日志文件分析程序</p>\n<h1 id=\"工单系统\"><a href=\"#工单系统\" class=\"headerlink\" title=\"工单系统\"></a>工单系统</h1><h3 id=\"基于web的工单系统\"><a href=\"#基于web的工单系统\" class=\"headerlink\" title=\"基于web的工单系统\"></a>基于web的工单系统</h3><p>  ● Bugzilla -由Mozilla项目开发和使用过的通用缺陷跟踪和测试工具<br>  ● Cerb – 基于商业开源许可的基于组的邮件管理项目<br>  ● Flyspray – 使用PHP编写的缺陷跟踪系统<br>  ● MantisBT -另一个基于web的缺陷跟踪系统<br>  ● osTicket -开源的技术支持工单系统<br>  ● Otrs -免费和开源故障通知单系统软件包,公司,组织,或其他实体可以使用它来基于询问分配工单并跟踪进一步的沟通。<br>  ● Request Tracker -使用Perl编写的工单跟踪系统<br>  ● TheBugGenie -开源的工单系统，具有非常完备的用户权限分配</p>\n<h1 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h1><h3 id=\"故障排除工具\"><a href=\"#故障排除工具\" class=\"headerlink\" title=\"故障排除工具\"></a>故障排除工具</h3><p>  ● mitmproxy -ython工具，用于拦截,查看和修改网络流量。在排除某些问题是非常重要的。<br>  ● Sysdig -从一个运行的linux实例上捕获系统状态和活动，之后保存，过滤和分析<br>  ● Wireshark -世界上著名的网络协议分析工具</p>\n<h1 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h1><h3 id=\"基于web的项目管理和缺陷跟踪系统\"><a href=\"#基于web的项目管理和缺陷跟踪系统\" class=\"headerlink\" title=\"基于web的项目管理和缺陷跟踪系统\"></a>基于web的项目管理和缺陷跟踪系统</h3><p>  ● ChiliProject – Redmine分支<br>  ● GitBucket 用Scala编写的GitHub的克隆，单独jar安装<br>  ● GitLab -用Rbuy编写的GitHub的克隆<br>  ● Gogs -用Go编写<br>  ● OpenProject -开源的项目协作项目<br>  ● Phabricator PHP编写<br>  ● Redmine – 基于rails在rbuy编写<br>  ● The Bug Genie -PHP编写<br>  ● Trac -python编写<br>  ● 阿里云持续交付<a href=\"https://crp.aliyun.com/#page6\">https://crp.aliyun.com/#page6</a><br>redmine项目管理系统<br><a href=\"https://bitnami.com/stack/redmine/installer\">https://bitnami.com/stack/redmine/installer</a></p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><h3 id=\"软件版本和版本控制\"><a href=\"#软件版本和版本控制\" class=\"headerlink\" title=\"软件版本和版本控制\"></a>软件版本和版本控制</h3><p>  ● Fossil -分布式版本控制，内建wiki和缺陷跟踪<br>  ● Git -速度很快的分布式版本控制和源代码管理<br>  ● GNU Bazaar -由Cannoicalzi赞助的分布式版本控制系统<br>  ● Mercurial -另一个版本控制<br>  ● Subversion -客户端-服务器版本控制系统<br>  ● Coding<br>  ● 码云<br>  ● 阿里云 code.aliyun.com</p>\n<h1 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h1><h3 id=\"虚拟化软件\"><a href=\"#虚拟化软件\" class=\"headerlink\" title=\"虚拟化软件\"></a>虚拟化软件</h3><p>  ● Ganeti -在KVM和Xen上构建的集群虚拟服务器管理软件<br>  ● KVM -Linux内核虚拟化架构<br>  ● oVirt -管理虚拟机，存储和虚拟网络<br>  ● Packer – 从单个源配置为多个平台创建相同的机器镜像<br>  ● Vagrant – 创建完整开发环境的工具<br>  ● VirtualBox -来自Oracle公司的虚拟化产品<br>  ● Xen -用于32/64位Intel/AMD(IA 64）和PowerPC 970架构的虚拟机监控器<br>  ● Docker<br>  ● cockpit  (图形化管理Docker容器)</p>\n<h1 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h1><h3 id=\"VPN软件\"><a href=\"#VPN软件\" class=\"headerlink\" title=\"VPN软件\"></a>VPN软件</h3><p>  ● OpenVPN -使用一个定制的安全密钥交换协议,利用SSL / TLS。<br>  ● Pritunl -基于OpenVPN的方案，易于设置<br>  ● SoftEther – 具有高级特性的多协议VPN软件<br>  ● sshuttle -穷人的VPN<br>  ● strongSwan – Linux下完整的IPsec实现<br>  ● tinc -分布式点对点VPN</p>\n<h1 id=\"物联网\"><a href=\"#物联网\" class=\"headerlink\" title=\"物联网\"></a>物联网</h1><p>● contiki   一开源物联网系统，支持tcp,vnc等协议<br>● yeelink   物联网在线平台</p>\n<h1 id=\"15款顶级开源人工智能工具推荐\"><a href=\"#15款顶级开源人工智能工具推荐\" class=\"headerlink\" title=\"15款顶级开源人工智能工具推荐\"></a>15款顶级开源人工智能工具推荐</h1><p><a href=\"https://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009\">https://www.oschina.net/news/77729/15top-opensource-artificial-intelligence-tools?from=20161009</a></p>\n"},{"layout":"post","title":"ruby开发环境搭建","_content":"# Ubuntu 16 #\n安装ruby环境\n`sudo apt-get install ruby ruby-dev`\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n---\n\n# Centos #\n`yum list ruby `看看yum仓库版本是多少，版本太低就源码安装。\n```\nyum install openssl* openssl-devel zlib-devel gcc gcc-c++ make autoconf readline-devel curl-devel expat-devel gettext-devel -y\n```\n\n关闭iptables和SELINUX（不关闭也是可以的）\n```\nservice iptables stop\nsetenforce 0\nvi /etc/sysconfig/selinux\nSELINUX=disabled         #禁用selinux  \n```\n源码编译安装：\n```\nwget http://ftp.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz\ntar zxvf ruby-2.3.1.tar.gz\ncd ruby-2.3.1\n./configure --enable-shared --enable-pthread --prefix=/usr/local/ruby\nmake && make install\n```\n编译时如果报错如下：\nossl_pkey_ec.c:815: error: ‘EC_GROUP_new_curve_GF2m' undeclared (first use in this function)\n需要安装补丁，也就是替换两个ssl库文件，以下为该补丁文件打包下载地址\n详见：https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808\n解决方法：\n```\ncd ruby-2.3.1\nwget --no-check-certificate https://bugs.ruby-lang.org/projects/rubytrunk/repository/revisions/41808/raw/ext/openssl/ossl_pkey_ec.c\nwget --no-check-certificate https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808/raw/test/openssl/test_pkey_ec.rb\nmv ext/openssl/ossl_pkey_ec.c  ext/openssl/ossl_pkey_ec.c.bak\ncp ossl_pkey_ec.c ext/openssl/\nmv test/openssl/test_pkey_ec.rb test/openssl/test_pkey_ec.rb.bak\ncp test_pkey_ec.rb  test/openssl/\n```\n重新编译：\n`make && make install`\n\n将ruby命令集加入系统环境变量\n```\necho \"PATH=$PATH:/usr/local/ruby/bin;export PATH\" >> /etc/profile\nsource /etc/profile\n```\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n---\n\n# Mac10.12 #\nmac在10.11之后的版本，安全机制发生了变更，/usr/local/目录已经没有写权限了。\n\n* xcode升级到8.0及以上版本\n\n不要用mac自带的ruby及brew方式安装ruby，容易出各种错误。\n安装rvm（ruby的版本控制器）https://github.com/rvm/rvm\n`curl -L https://get.rvm.io | bash -s stable --autolibs=enabled --ruby --rails --trace`\n可能会有警告，有提示把某一句加入/Users/用户名/.bash_profile 中，重开终端。`rvm -v`显示版本，说明安装成功。\n\n安装homebrew （官网http://brew.sh/index_zh-cn.html）\n\ngithub:https://github.com/Homebrew/homebrew\n\n`/usr/bin/ruby`使用的是mac自带的2.0版本的ruby，也可以直接用ruby使用新版本的ruby。\n```ruby\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n```\n`brew -v`\n\n列出ruby可安装的版本信息\n`rvm list known`\n安装一个ruby版本\n`rvm install 2.3.1`\n如果想设置为默认版本，可以用这条命令来完成\n`rvm use 2.3.1 --default`     一般上一步安装好就已经设为默认了\n查看已安装的ruby\n`rvm list`\n卸载一个已安装ruby版本\n`rvm remove 2.3.1`\n`ruby -v`\n会发现版本号变成最新的啦！\n\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n安装各种扩展（可选）\nrails：ruby web框架\n`gem install rails`\n\n---\n\n# Windows #\n直接到官网下载：\nhttp://rubyinstaller.org/downloads \nhttp://www.ruby-lang.org/zh_cn/downloads/ （源码）\n安装时勾选自动添加PATH，安装完成后重启生效。\n也可以cmd运行 `set a = b` 然后重开cmd，环境变量就生效了。\n\n---\n\n# Ruby源 #\n国外源如果屏蔽了，更改gem安装源到淘宝，每条命令都有成功提示\n`gem update --system`     #升级gem版本\n`gem uninstall rubygems-update`    #移除gem升级脚本\n`gem sources --remove https://rubygems.org/`\n`gem sources -a https://ruby.taobao.org/`\n`gem sources -l`\n\n* windows 不要更换源，添加不了淘宝源，就换回原来的源。\n\n* Mac 如果报-SSL错误请把https改为http。\n*** CURRENT SOURCES ***\nhttp://ruby.taobao.org/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/环境搭建/2016-10-21-Ruby开发环境搭建.md","raw":"---\nlayout: post\ntitle: \"ruby开发环境搭建\"\ncategories:\n- 环境搭建\ntags:\n- ruby2.3.1安装\n\n---\n# Ubuntu 16 #\n安装ruby环境\n`sudo apt-get install ruby ruby-dev`\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n---\n\n# Centos #\n`yum list ruby `看看yum仓库版本是多少，版本太低就源码安装。\n```\nyum install openssl* openssl-devel zlib-devel gcc gcc-c++ make autoconf readline-devel curl-devel expat-devel gettext-devel -y\n```\n\n关闭iptables和SELINUX（不关闭也是可以的）\n```\nservice iptables stop\nsetenforce 0\nvi /etc/sysconfig/selinux\nSELINUX=disabled         #禁用selinux  \n```\n源码编译安装：\n```\nwget http://ftp.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz\ntar zxvf ruby-2.3.1.tar.gz\ncd ruby-2.3.1\n./configure --enable-shared --enable-pthread --prefix=/usr/local/ruby\nmake && make install\n```\n编译时如果报错如下：\nossl_pkey_ec.c:815: error: ‘EC_GROUP_new_curve_GF2m' undeclared (first use in this function)\n需要安装补丁，也就是替换两个ssl库文件，以下为该补丁文件打包下载地址\n详见：https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808\n解决方法：\n```\ncd ruby-2.3.1\nwget --no-check-certificate https://bugs.ruby-lang.org/projects/rubytrunk/repository/revisions/41808/raw/ext/openssl/ossl_pkey_ec.c\nwget --no-check-certificate https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808/raw/test/openssl/test_pkey_ec.rb\nmv ext/openssl/ossl_pkey_ec.c  ext/openssl/ossl_pkey_ec.c.bak\ncp ossl_pkey_ec.c ext/openssl/\nmv test/openssl/test_pkey_ec.rb test/openssl/test_pkey_ec.rb.bak\ncp test_pkey_ec.rb  test/openssl/\n```\n重新编译：\n`make && make install`\n\n将ruby命令集加入系统环境变量\n```\necho \"PATH=$PATH:/usr/local/ruby/bin;export PATH\" >> /etc/profile\nsource /etc/profile\n```\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n---\n\n# Mac10.12 #\nmac在10.11之后的版本，安全机制发生了变更，/usr/local/目录已经没有写权限了。\n\n* xcode升级到8.0及以上版本\n\n不要用mac自带的ruby及brew方式安装ruby，容易出各种错误。\n安装rvm（ruby的版本控制器）https://github.com/rvm/rvm\n`curl -L https://get.rvm.io | bash -s stable --autolibs=enabled --ruby --rails --trace`\n可能会有警告，有提示把某一句加入/Users/用户名/.bash_profile 中，重开终端。`rvm -v`显示版本，说明安装成功。\n\n安装homebrew （官网http://brew.sh/index_zh-cn.html）\n\ngithub:https://github.com/Homebrew/homebrew\n\n`/usr/bin/ruby`使用的是mac自带的2.0版本的ruby，也可以直接用ruby使用新版本的ruby。\n```ruby\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n```\n`brew -v`\n\n列出ruby可安装的版本信息\n`rvm list known`\n安装一个ruby版本\n`rvm install 2.3.1`\n如果想设置为默认版本，可以用这条命令来完成\n`rvm use 2.3.1 --default`     一般上一步安装好就已经设为默认了\n查看已安装的ruby\n`rvm list`\n卸载一个已安装ruby版本\n`rvm remove 2.3.1`\n`ruby -v`\n会发现版本号变成最新的啦！\n\n检查ruby版本\n`ruby -v`\n`gem --version`\n irb     环境测试\nirb(main):001:0> 3+5\n=> 8\nirb(main):002:0> puts \"hello world!\"\nhello world!\nirb(main):001:0>exit\n\n安装各种扩展（可选）\nrails：ruby web框架\n`gem install rails`\n\n---\n\n# Windows #\n直接到官网下载：\nhttp://rubyinstaller.org/downloads \nhttp://www.ruby-lang.org/zh_cn/downloads/ （源码）\n安装时勾选自动添加PATH，安装完成后重启生效。\n也可以cmd运行 `set a = b` 然后重开cmd，环境变量就生效了。\n\n---\n\n# Ruby源 #\n国外源如果屏蔽了，更改gem安装源到淘宝，每条命令都有成功提示\n`gem update --system`     #升级gem版本\n`gem uninstall rubygems-update`    #移除gem升级脚本\n`gem sources --remove https://rubygems.org/`\n`gem sources -a https://ruby.taobao.org/`\n`gem sources -l`\n\n* windows 不要更换源，添加不了淘宝源，就换回原来的源。\n\n* Mac 如果报-SSL错误请把https改为http。\n*** CURRENT SOURCES ***\nhttp://ruby.taobao.org/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"环境搭建-2016-10-21-Ruby开发环境搭建","published":1,"date":"2016-10-31T04:22:53.259Z","updated":"2016-11-01T09:03:21.792Z","comments":1,"photos":[],"link":"","_id":"civ39nntw000x0gpkob5y4642","content":"<h1 id=\"Ubuntu-16\"><a href=\"#Ubuntu-16\" class=\"headerlink\" title=\"Ubuntu 16\"></a>Ubuntu 16</h1><p>安装ruby环境<br><code>sudo apt-get install ruby ruby-dev</code><br>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<hr>\n<h1 id=\"Centos\"><a href=\"#Centos\" class=\"headerlink\" title=\"Centos\"></a>Centos</h1><p><code>yum list ruby</code>看看yum仓库版本是多少，版本太低就源码安装。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"comment\">openssl*</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">zlib</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">make</span> <span class=\"comment\">autoconf</span> <span class=\"comment\">readline</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">curl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">expat</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gettext</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"literal\">-</span><span class=\"comment\">y</span></div></pre></td></tr></table></figure></p>\n<p>关闭iptables和SELINUX（不关闭也是可以的）<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">service</span> iptables stop</div><div class=\"line\"><span class=\"symbol\">setenforce</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"symbol\">vi</span> /etc/sysconfig/<span class=\"keyword\">selinux</span></div><div class=\"line\"><span class=\"keyword\">SELINUX=disabled </span>        #禁用<span class=\"keyword\">selinux</span></div></pre></td></tr></table></figure></p>\n<p>源码编译安装：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://ftp.<span class=\"keyword\">ruby</span>-lang.org/pub/<span class=\"keyword\">ruby</span>/<span class=\"number\">2.3</span>/<span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span>.tar.gz</div><div class=\"line\">tar zxvf <span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span>.tar.gz</div><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span></div><div class=\"line\">./configure --enable-shared --enable-pthread --prefix=/usr/local/<span class=\"keyword\">ruby</span></div><div class=\"line\"><span class=\"keyword\">make</span> &amp;&amp; <span class=\"keyword\">make</span> install</div></pre></td></tr></table></figure></p>\n<p>编译时如果报错如下：<br>ossl_pkey_ec.c:815: error: ‘EC_GROUP_new_curve_GF2m’ undeclared (first use in this function)<br>需要安装补丁，也就是替换两个ssl库文件，以下为该补丁文件打包下载地址<br>详见：<a href=\"https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808\" target=\"_blank\" rel=\"external\">https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808</a><br>解决方法：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ruby-<span class=\"number\">2.3</span>.<span class=\"number\">1</span></div><div class=\"line\">wget --no-check-certificate https:<span class=\"comment\">//bugs.ruby-lang.org/projects/rubytrunk/repository/revisions/41808/raw/ext/openssl/ossl_pkey_ec.c</span></div><div class=\"line\">wget --no-check-certificate https:<span class=\"comment\">//bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808/raw/test/openssl/test_pkey_ec.rb</span></div><div class=\"line\">mv ext/openssl/ossl_pkey_ec<span class=\"selector-class\">.c</span>  ext/openssl/ossl_pkey_ec<span class=\"selector-class\">.c</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">cp ossl_pkey_ec<span class=\"selector-class\">.c</span> ext/openssl/</div><div class=\"line\">mv test/openssl/test_pkey_ec<span class=\"selector-class\">.rb</span> test/openssl/test_pkey_ec<span class=\"selector-class\">.rb</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">cp test_pkey_ec<span class=\"selector-class\">.rb</span>  test/openssl/</div></pre></td></tr></table></figure></p>\n<p>重新编译：<br><code>make &amp;&amp; make install</code></p>\n<p>将ruby命令集加入系统环境变量<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"PATH=$PATH:/usr/local/ruby/bin;export PATH\"</span> &gt;&gt; /etc/<span class=\"keyword\">profile</span></div><div class=\"line\"><span class=\"keyword\">source</span> /etc/<span class=\"keyword\">profile</span></div></pre></td></tr></table></figure></p>\n<p>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<hr>\n<h1 id=\"Mac10-12\"><a href=\"#Mac10-12\" class=\"headerlink\" title=\"Mac10.12\"></a>Mac10.12</h1><p>mac在10.11之后的版本，安全机制发生了变更，/usr/local/目录已经没有写权限了。</p>\n<ul>\n<li>xcode升级到8.0及以上版本</li>\n</ul>\n<p>不要用mac自带的ruby及brew方式安装ruby，容易出各种错误。<br>安装rvm（ruby的版本控制器）<a href=\"https://github.com/rvm/rvm\" target=\"_blank\" rel=\"external\">https://github.com/rvm/rvm</a><br><code>curl -L https://get.rvm.io | bash -s stable --autolibs=enabled --ruby --rails --trace</code><br>可能会有警告，有提示把某一句加入/Users/用户名/.bash_profile 中，重开终端。<code>rvm -v</code>显示版本，说明安装成功。</p>\n<p>安装homebrew （官网<a href=\"http://brew.sh/index_zh-cn.html）\" target=\"_blank\" rel=\"external\">http://brew.sh/index_zh-cn.html）</a></p>\n<p>github:<a href=\"https://github.com/Homebrew/homebrew\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/homebrew</a></p>\n<p><code>/usr/bin/ruby</code>使用的是mac自带的2.0版本的ruby，也可以直接用ruby使用新版本的ruby。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></div></pre></td></tr></table></figure></p>\n<p><code>brew -v</code></p>\n<p>列出ruby可安装的版本信息<br><code>rvm list known</code><br>安装一个ruby版本<br><code>rvm install 2.3.1</code><br>如果想设置为默认版本，可以用这条命令来完成<br><code>rvm use 2.3.1 --default</code>     一般上一步安装好就已经设为默认了<br>查看已安装的ruby<br><code>rvm list</code><br>卸载一个已安装ruby版本<br><code>rvm remove 2.3.1</code><br><code>ruby -v</code><br>会发现版本号变成最新的啦！</p>\n<p>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<p>安装各种扩展（可选）<br>rails：ruby web框架<br><code>gem install rails</code></p>\n<hr>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><p>直接到官网下载：<br><a href=\"http://rubyinstaller.org/downloads\" target=\"_blank\" rel=\"external\">http://rubyinstaller.org/downloads</a><br><a href=\"http://www.ruby-lang.org/zh_cn/downloads/\" target=\"_blank\" rel=\"external\">http://www.ruby-lang.org/zh_cn/downloads/</a> （源码）<br>安装时勾选自动添加PATH，安装完成后重启生效。<br>也可以cmd运行 <code>set a = b</code> 然后重开cmd，环境变量就生效了。</p>\n<hr>\n<h1 id=\"Ruby源\"><a href=\"#Ruby源\" class=\"headerlink\" title=\"Ruby源\"></a>Ruby源</h1><p>国外源如果屏蔽了，更改gem安装源到淘宝，每条命令都有成功提示<br><code>gem update --system</code>     #升级gem版本<br><code>gem uninstall rubygems-update</code>    #移除gem升级脚本<br><code>gem sources --remove https://rubygems.org/</code><br><code>gem sources -a https://ruby.taobao.org/</code><br><code>gem sources -l</code></p>\n<ul>\n<li><p>windows 不要更换源，添加不了淘宝源，就换回原来的源。</p>\n</li>\n<li><p>Mac 如果报-SSL错误请把https改为http。<br><strong><em> CURRENT SOURCES </em></strong><br><a href=\"http://ruby.taobao.org/\" target=\"_blank\" rel=\"external\">http://ruby.taobao.org/</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Ubuntu-16\"><a href=\"#Ubuntu-16\" class=\"headerlink\" title=\"Ubuntu 16\"></a>Ubuntu 16</h1><p>安装ruby环境<br><code>sudo apt-get install ruby ruby-dev</code><br>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<hr>\n<h1 id=\"Centos\"><a href=\"#Centos\" class=\"headerlink\" title=\"Centos\"></a>Centos</h1><p><code>yum list ruby</code>看看yum仓库版本是多少，版本太低就源码安装。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">yum</span> <span class=\"comment\">install</span> <span class=\"comment\">openssl*</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">zlib</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span><span class=\"literal\">+</span><span class=\"literal\">+</span> <span class=\"comment\">make</span> <span class=\"comment\">autoconf</span> <span class=\"comment\">readline</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">curl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">expat</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">gettext</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"literal\">-</span><span class=\"comment\">y</span></div></pre></td></tr></table></figure></p>\n<p>关闭iptables和SELINUX（不关闭也是可以的）<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">service</span> iptables stop</div><div class=\"line\"><span class=\"symbol\">setenforce</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"symbol\">vi</span> /etc/sysconfig/<span class=\"keyword\">selinux</div><div class=\"line\"></span><span class=\"keyword\">SELINUX=disabled </span>        #禁用<span class=\"keyword\">selinux</span></div></pre></td></tr></table></figure></p>\n<p>源码编译安装：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://ftp.<span class=\"keyword\">ruby</span>-lang.org/pub/<span class=\"keyword\">ruby</span>/<span class=\"number\">2.3</span>/<span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span>.tar.gz</div><div class=\"line\">tar zxvf <span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span>.tar.gz</div><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">ruby</span>-<span class=\"number\">2.3</span>.<span class=\"number\">1</span></div><div class=\"line\">./configure --enable-shared --enable-pthread --prefix=/usr/local/<span class=\"keyword\">ruby</span></div><div class=\"line\"><span class=\"keyword\">make</span> &amp;&amp; <span class=\"keyword\">make</span> install</div></pre></td></tr></table></figure></p>\n<p>编译时如果报错如下：<br>ossl_pkey_ec.c:815: error: ‘EC_GROUP_new_curve_GF2m’ undeclared (first use in this function)<br>需要安装补丁，也就是替换两个ssl库文件，以下为该补丁文件打包下载地址<br>详见：<a href=\"https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808\">https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808</a><br>解决方法：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ruby-<span class=\"number\">2.3</span>.<span class=\"number\">1</span></div><div class=\"line\">wget --no-check-certificate https:<span class=\"comment\">//bugs.ruby-lang.org/projects/rubytrunk/repository/revisions/41808/raw/ext/openssl/ossl_pkey_ec.c</span></div><div class=\"line\">wget --no-check-certificate https:<span class=\"comment\">//bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/41808/raw/test/openssl/test_pkey_ec.rb</span></div><div class=\"line\">mv ext/openssl/ossl_pkey_ec<span class=\"selector-class\">.c</span>  ext/openssl/ossl_pkey_ec<span class=\"selector-class\">.c</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">cp ossl_pkey_ec<span class=\"selector-class\">.c</span> ext/openssl/</div><div class=\"line\">mv test/openssl/test_pkey_ec<span class=\"selector-class\">.rb</span> test/openssl/test_pkey_ec<span class=\"selector-class\">.rb</span><span class=\"selector-class\">.bak</span></div><div class=\"line\">cp test_pkey_ec<span class=\"selector-class\">.rb</span>  test/openssl/</div></pre></td></tr></table></figure></p>\n<p>重新编译：<br><code>make &amp;&amp; make install</code></p>\n<p>将ruby命令集加入系统环境变量<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"PATH=$PATH:/usr/local/ruby/bin;export PATH\"</span> &gt;&gt; /etc/<span class=\"keyword\">profile</span></div><div class=\"line\"><span class=\"keyword\">source</span> /etc/<span class=\"keyword\">profile</span></div></pre></td></tr></table></figure></p>\n<p>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<hr>\n<h1 id=\"Mac10-12\"><a href=\"#Mac10-12\" class=\"headerlink\" title=\"Mac10.12\"></a>Mac10.12</h1><p>mac在10.11之后的版本，安全机制发生了变更，/usr/local/目录已经没有写权限了。</p>\n<ul>\n<li>xcode升级到8.0及以上版本</li>\n</ul>\n<p>不要用mac自带的ruby及brew方式安装ruby，容易出各种错误。<br>安装rvm（ruby的版本控制器）<a href=\"https://github.com/rvm/rvm\">https://github.com/rvm/rvm</a><br><code>curl -L https://get.rvm.io | bash -s stable --autolibs=enabled --ruby --rails --trace</code><br>可能会有警告，有提示把某一句加入/Users/用户名/.bash_profile 中，重开终端。<code>rvm -v</code>显示版本，说明安装成功。</p>\n<p>安装homebrew （官网<a href=\"http://brew.sh/index_zh-cn.html）\">http://brew.sh/index_zh-cn.html）</a></p>\n<p>github:<a href=\"https://github.com/Homebrew/homebrew\">https://github.com/Homebrew/homebrew</a></p>\n<p><code>/usr/bin/ruby</code>使用的是mac自带的2.0版本的ruby，也可以直接用ruby使用新版本的ruby。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></div></pre></td></tr></table></figure></p>\n<p><code>brew -v</code></p>\n<p>列出ruby可安装的版本信息<br><code>rvm list known</code><br>安装一个ruby版本<br><code>rvm install 2.3.1</code><br>如果想设置为默认版本，可以用这条命令来完成<br><code>rvm use 2.3.1 --default</code>     一般上一步安装好就已经设为默认了<br>查看已安装的ruby<br><code>rvm list</code><br>卸载一个已安装ruby版本<br><code>rvm remove 2.3.1</code><br><code>ruby -v</code><br>会发现版本号变成最新的啦！</p>\n<p>检查ruby版本<br><code>ruby -v</code><br><code>gem --version</code><br> irb     环境测试<br>irb(main):001:0&gt; 3+5<br>=&gt; 8<br>irb(main):002:0&gt; puts “hello world!”<br>hello world!<br>irb(main):001:0&gt;exit</p>\n<p>安装各种扩展（可选）<br>rails：ruby web框架<br><code>gem install rails</code></p>\n<hr>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><p>直接到官网下载：<br><a href=\"http://rubyinstaller.org/downloads\">http://rubyinstaller.org/downloads</a><br><a href=\"http://www.ruby-lang.org/zh_cn/downloads/\">http://www.ruby-lang.org/zh_cn/downloads/</a> （源码）<br>安装时勾选自动添加PATH，安装完成后重启生效。<br>也可以cmd运行 <code>set a = b</code> 然后重开cmd，环境变量就生效了。</p>\n<hr>\n<h1 id=\"Ruby源\"><a href=\"#Ruby源\" class=\"headerlink\" title=\"Ruby源\"></a>Ruby源</h1><p>国外源如果屏蔽了，更改gem安装源到淘宝，每条命令都有成功提示<br><code>gem update --system</code>     #升级gem版本<br><code>gem uninstall rubygems-update</code>    #移除gem升级脚本<br><code>gem sources --remove https://rubygems.org/</code><br><code>gem sources -a https://ruby.taobao.org/</code><br><code>gem sources -l</code></p>\n<ul>\n<li><p>windows 不要更换源，添加不了淘宝源，就换回原来的源。</p>\n</li>\n<li><p>Mac 如果报-SSL错误请把https改为http。<br><strong><em> CURRENT SOURCES </em></strong><br><a href=\"http://ruby.taobao.org/\">http://ruby.taobao.org/</a></p>\n</li>\n</ul>\n"},{"title":"CentOS 7安装配置LAMP服务器","date":"2016-11-02T04:21:52.000Z","_content":"\n# CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)\n\n在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP\n**http://www.centos.bz/2013/08/ezhttp-tutorial/**\n \n## 准备篇（可跳过此步）：\n### 一、配置防火墙，开启80端口、3306端口\nCentOS 7默认使用的是firewall作为防火墙，这里改为iptables防火墙。\n#### 1、关闭firewall：\n```\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动```\n#### 2、安装iptables防火墙\n```\nyum install iptables-services #安装\nvim /etc/sysconfig/iptables #编辑防火墙配置文件```\n增加规则：\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT```\n:wq! #保存退出\n```\nsystemctl restart iptables #最后重启防火墙使配置生效\nsystemctl enable iptables #设置防火墙开机启动```\n### 二、关闭SELINUX\n```\nvim /etc/selinux/config\n#SELINUX=enforcing #注释掉\n#SELINUXTYPE=targeted #注释掉\nSELINUX=disabled #增加```\n:wq! #保存退出\n`setenforce 0` #使配置立即生效\n---\n## 安装篇：\n一、安装MariaDB\nCentOS 7.0中，已经使用MariaDB替代了MySQL数据库\n#### 1、安装MariaDB\n```\nyum install mariadb mariadb-server -y\nsystemctl start mariadb #启动MariaDB```\n\n`cp /usr/share/mysql/my-huge.cnf /etc/my.cnf` 拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）\n#### 2、为root账户设置密码\n`mysql_secure_installation`\n\n* 回车，根据提示输入Y\n* 输入2次密码，回车\n* 根据提示一路输入Y\n* 最后出现：Thanks for using MySQL!\n* MariaDB密码设置完成，重新启动 MariaDB：\n`systemctl restart mariadb` #重启MariaDB\n\n#### 3、安装Apache和PHP\n```\nyum install http php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash -y\nsystemctl restart mariadb  #重启MariaDB\nsystemctl enable mariadb #设置开机启动\nsystemctl start httpd #启动apache\nsystemctl enable httpd #设置apache开机启动```\n\n在客户端浏览器中打开服务器IP地址，会出现测试界面，说明apache安装成功\n\n---\n\n## 配置篇:\n### 一、Apache配置\n`vim /etc/httpd/conf/httpd.conf` 编辑配置文件\n\n* ServerSignature On  #添加，在错误页中显示Apache的版本，Off为不显示\n* Options Indexes FollowSymLinks  #修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录）\n* #AddHandler cgi-script .cgi　取消注释（允许扩展名为.pl的CGI脚本运行）\n* AllowOverride None　 #修改为：AllowOverride All （允许.htaccess）\n* AddDefaultCharset UTF-8　#修改为：AddDefaultCharset GB2312　（添加GB2312为默认编码）\n* #Options Indexes FollowSymLinks   #修改为 Options FollowSymLinks（不在浏览器上显示树状目录结构）\n* DirectoryIndex index.html   #修改为：DirectoryIndex index.html index.htm\n* Default.html Default.htmindex.php（设置默认首页文件，增加index.php）\n* MaxKeepAliveRequests 500  #添加MaxKeepAliveRequests 500 （增加同时连接数）\n\n:wq! #保存退出\n`systemctl restart httpd`重启apache\n`rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html` 删除默认测试页\n\n---\n\n### 二、php配置\n`vim /etc/php.ini` 编辑配置文件\n\n* date.timezone = PRC #把前面的分号去掉，改为date.timezone = PRC\n* (这里列出了PHP禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。)\n```\ndisable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname \n```\n* expose_php = Off #禁止显示php版本的信息\n* short_open_tag = ON #支持php短标签\n* open_basedir = .:/tmp/  (设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/)\n* \n:wq! #保存退出\n```\nsystemctl restart mariadb #重启MariaDB\nsystemctl restart httpd #重启apache```\n测试篇\n```cd /var/www/html\nvim index.php #输入下面内容```\n```php\n<?php\nphpinfo();\n?>\n```\n:wq! #保存退出\n在客户端浏览器输入服务器IP地址，可以看到相关的配置信息！\n\n注意：apache默认的程序目录是**/var/www/html**\n权限设置：`chown apache.apache -R /var/www/html`\n\n参考：http://www.osyunwei.com/archives/7829.html\n","source":"_posts/环境搭建/2016-11-02-CentOS-7安装配置LAMP服务器.md","raw":"---\ntitle: CentOS 7安装配置LAMP服务器\ncategories:\n  - 环境搭建\ntags:\n  - Centos7 lanm\ndate: 2016-11-02 12:21:52\n---\n\n# CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)\n\n在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP\n**http://www.centos.bz/2013/08/ezhttp-tutorial/**\n \n## 准备篇（可跳过此步）：\n### 一、配置防火墙，开启80端口、3306端口\nCentOS 7默认使用的是firewall作为防火墙，这里改为iptables防火墙。\n#### 1、关闭firewall：\n```\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动```\n#### 2、安装iptables防火墙\n```\nyum install iptables-services #安装\nvim /etc/sysconfig/iptables #编辑防火墙配置文件```\n增加规则：\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT```\n:wq! #保存退出\n```\nsystemctl restart iptables #最后重启防火墙使配置生效\nsystemctl enable iptables #设置防火墙开机启动```\n### 二、关闭SELINUX\n```\nvim /etc/selinux/config\n#SELINUX=enforcing #注释掉\n#SELINUXTYPE=targeted #注释掉\nSELINUX=disabled #增加```\n:wq! #保存退出\n`setenforce 0` #使配置立即生效\n---\n## 安装篇：\n一、安装MariaDB\nCentOS 7.0中，已经使用MariaDB替代了MySQL数据库\n#### 1、安装MariaDB\n```\nyum install mariadb mariadb-server -y\nsystemctl start mariadb #启动MariaDB```\n\n`cp /usr/share/mysql/my-huge.cnf /etc/my.cnf` 拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）\n#### 2、为root账户设置密码\n`mysql_secure_installation`\n\n* 回车，根据提示输入Y\n* 输入2次密码，回车\n* 根据提示一路输入Y\n* 最后出现：Thanks for using MySQL!\n* MariaDB密码设置完成，重新启动 MariaDB：\n`systemctl restart mariadb` #重启MariaDB\n\n#### 3、安装Apache和PHP\n```\nyum install http php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash -y\nsystemctl restart mariadb  #重启MariaDB\nsystemctl enable mariadb #设置开机启动\nsystemctl start httpd #启动apache\nsystemctl enable httpd #设置apache开机启动```\n\n在客户端浏览器中打开服务器IP地址，会出现测试界面，说明apache安装成功\n\n---\n\n## 配置篇:\n### 一、Apache配置\n`vim /etc/httpd/conf/httpd.conf` 编辑配置文件\n\n* ServerSignature On  #添加，在错误页中显示Apache的版本，Off为不显示\n* Options Indexes FollowSymLinks  #修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录）\n* #AddHandler cgi-script .cgi　取消注释（允许扩展名为.pl的CGI脚本运行）\n* AllowOverride None　 #修改为：AllowOverride All （允许.htaccess）\n* AddDefaultCharset UTF-8　#修改为：AddDefaultCharset GB2312　（添加GB2312为默认编码）\n* #Options Indexes FollowSymLinks   #修改为 Options FollowSymLinks（不在浏览器上显示树状目录结构）\n* DirectoryIndex index.html   #修改为：DirectoryIndex index.html index.htm\n* Default.html Default.htmindex.php（设置默认首页文件，增加index.php）\n* MaxKeepAliveRequests 500  #添加MaxKeepAliveRequests 500 （增加同时连接数）\n\n:wq! #保存退出\n`systemctl restart httpd`重启apache\n`rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html` 删除默认测试页\n\n---\n\n### 二、php配置\n`vim /etc/php.ini` 编辑配置文件\n\n* date.timezone = PRC #把前面的分号去掉，改为date.timezone = PRC\n* (这里列出了PHP禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。)\n```\ndisable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname \n```\n* expose_php = Off #禁止显示php版本的信息\n* short_open_tag = ON #支持php短标签\n* open_basedir = .:/tmp/  (设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/)\n* \n:wq! #保存退出\n```\nsystemctl restart mariadb #重启MariaDB\nsystemctl restart httpd #重启apache```\n测试篇\n```cd /var/www/html\nvim index.php #输入下面内容```\n```php\n<?php\nphpinfo();\n?>\n```\n:wq! #保存退出\n在客户端浏览器输入服务器IP地址，可以看到相关的配置信息！\n\n注意：apache默认的程序目录是**/var/www/html**\n权限设置：`chown apache.apache -R /var/www/html`\n\n参考：http://www.osyunwei.com/archives/7829.html\n","slug":"环境搭建-2016-11-02-CentOS-7安装配置LAMP服务器","published":1,"updated":"2016-11-02T06:18:21.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nntz00100gpk3ngsaumr","content":"<h1 id=\"CentOS-7搭建LAMP环境-Apache-PHP-MariaDB\"><a href=\"#CentOS-7搭建LAMP环境-Apache-PHP-MariaDB\" class=\"headerlink\" title=\"CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)\"></a>CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)</h1><p>在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP<br><strong><a href=\"http://www.centos.bz/2013/08/ezhttp-tutorial/\" target=\"_blank\" rel=\"external\">http://www.centos.bz/2013/08/ezhttp-tutorial/</a></strong></p>\n<h2 id=\"准备篇（可跳过此步）：\"><a href=\"#准备篇（可跳过此步）：\" class=\"headerlink\" title=\"准备篇（可跳过此步）：\"></a>准备篇（可跳过此步）：</h2><h3 id=\"一、配置防火墙，开启80端口、3306端口\"><a href=\"#一、配置防火墙，开启80端口、3306端口\" class=\"headerlink\" title=\"一、配置防火墙，开启80端口、3306端口\"></a>一、配置防火墙，开启80端口、3306端口</h3><p>CentOS 7默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p>\n<h4 id=\"1、关闭firewall：\"><a href=\"#1、关闭firewall：\" class=\"headerlink\" title=\"1、关闭firewall：\"></a>1、关闭firewall：</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"keyword\">stop</span> firewalld.service <span class=\"meta\">#停止firewall</span></div><div class=\"line\">systemctl <span class=\"keyword\">disable</span> firewalld.service <span class=\"meta\">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>\n<h4 id=\"2、安装iptables防火墙\"><a href=\"#2、安装iptables防火墙\" class=\"headerlink\" title=\"2、安装iptables防火墙\"></a>2、安装iptables防火墙</h4><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> iptables-services <span class=\"comment\">#安装</span></div><div class=\"line\">vim /etc/sysconfig/iptables <span class=\"comment\">#编辑防火墙配置文件</span></div></pre></td></tr></table></figure>\n<p>增加规则：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">22</span> -j ACCEPT</div><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">80</span> -j ACCEPT</div><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">3306</span> -j ACCEPT</div></pre></td></tr></table></figure></p>\n<p>:wq! #保存退出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart iptables <span class=\"comment\">#最后重启防火墙使配置生效</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables <span class=\"comment\">#设置防火墙开机启动</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"二、关闭SELINUX\"><a href=\"#二、关闭SELINUX\" class=\"headerlink\" title=\"二、关闭SELINUX\"></a>二、关闭SELINUX</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim <span class=\"meta-keyword\">/etc/</span>selinux/config</div><div class=\"line\"><span class=\"meta\">#SELINUX=enforcing #注释掉</span></div><div class=\"line\"><span class=\"meta\">#SELINUXTYPE=targeted #注释掉</span></div><div class=\"line\">SELINUX=disabled <span class=\"meta\">#增加</span></div></pre></td></tr></table></figure>\n<p>:wq! #保存退出</p>\n<h2 id=\"setenforce-0-使配置立即生效\"><a href=\"#setenforce-0-使配置立即生效\" class=\"headerlink\" title=\"setenforce 0 #使配置立即生效\"></a><code>setenforce 0</code> #使配置立即生效</h2><h2 id=\"安装篇：\"><a href=\"#安装篇：\" class=\"headerlink\" title=\"安装篇：\"></a>安装篇：</h2><p>一、安装MariaDB<br>CentOS 7.0中，已经使用MariaDB替代了MySQL数据库</p>\n<h4 id=\"1、安装MariaDB\"><a href=\"#1、安装MariaDB\" class=\"headerlink\" title=\"1、安装MariaDB\"></a>1、安装MariaDB</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">yum</span> install <span class=\"keyword\">mariadb </span><span class=\"keyword\">mariadb-server </span>-y</div><div class=\"line\"><span class=\"symbol\">systemctl</span> start <span class=\"keyword\">mariadb </span>#启动<span class=\"keyword\">MariaDB</span></div></pre></td></tr></table></figure>\n<p><code>cp /usr/share/mysql/my-huge.cnf /etc/my.cnf</code> 拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</p>\n<h4 id=\"2、为root账户设置密码\"><a href=\"#2、为root账户设置密码\" class=\"headerlink\" title=\"2、为root账户设置密码\"></a>2、为root账户设置密码</h4><p><code>mysql_secure_installation</code></p>\n<ul>\n<li>回车，根据提示输入Y</li>\n<li>输入2次密码，回车</li>\n<li>根据提示一路输入Y</li>\n<li>最后出现：Thanks for using MySQL!</li>\n<li>MariaDB密码设置完成，重新启动 MariaDB：<br><code>systemctl restart mariadb</code> #重启MariaDB</li>\n</ul>\n<h4 id=\"3、安装Apache和PHP\"><a href=\"#3、安装Apache和PHP\" class=\"headerlink\" title=\"3、安装Apache和PHP\"></a>3、安装Apache和PHP</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install http php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-<span class=\"keyword\">xml</span> <span class=\"title\">php-xmlrpc</span> php-mbstring php-bcmath php-mhash -y</div><div class=\"line\">systemctl restart mariadb  <span class=\"comment\">#重启MariaDB</span></div><div class=\"line\">systemctl enable mariadb <span class=\"comment\">#设置开机启动</span></div><div class=\"line\">systemctl <span class=\"literal\">start</span> httpd <span class=\"comment\">#启动apache</span></div><div class=\"line\">systemctl enable httpd <span class=\"comment\">#设置apache开机启动</span></div></pre></td></tr></table></figure>\n<p>在客户端浏览器中打开服务器IP地址，会出现测试界面，说明apache安装成功</p>\n<hr>\n<h2 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇:\"></a>配置篇:</h2><h3 id=\"一、Apache配置\"><a href=\"#一、Apache配置\" class=\"headerlink\" title=\"一、Apache配置\"></a>一、Apache配置</h3><p><code>vim /etc/httpd/conf/httpd.conf</code> 编辑配置文件</p>\n<ul>\n<li>ServerSignature On  #添加，在错误页中显示Apache的版本，Off为不显示</li>\n<li>Options Indexes FollowSymLinks  #修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录）</li>\n<li>#AddHandler cgi-script .cgi　取消注释（允许扩展名为.pl的CGI脚本运行）</li>\n<li>AllowOverride None　 #修改为：AllowOverride All （允许.htaccess）</li>\n<li>AddDefaultCharset UTF-8　#修改为：AddDefaultCharset GB2312　（添加GB2312为默认编码）</li>\n<li>#Options Indexes FollowSymLinks   #修改为 Options FollowSymLinks（不在浏览器上显示树状目录结构）</li>\n<li>DirectoryIndex index.html   #修改为：DirectoryIndex index.html index.htm</li>\n<li>Default.html Default.htmindex.php（设置默认首页文件，增加index.php）</li>\n<li>MaxKeepAliveRequests 500  #添加MaxKeepAliveRequests 500 （增加同时连接数）</li>\n</ul>\n<p>:wq! #保存退出<br><code>systemctl restart httpd</code>重启apache<br><code>rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html</code> 删除默认测试页</p>\n<hr>\n<h3 id=\"二、php配置\"><a href=\"#二、php配置\" class=\"headerlink\" title=\"二、php配置\"></a>二、php配置</h3><p><code>vim /etc/php.ini</code> 编辑配置文件</p>\n<ul>\n<li>date.timezone = PRC #把前面的分号去掉，改为date.timezone = PRC</li>\n<li><p>(这里列出了PHP禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。)</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">disable_functions = passthru,<span class=\"keyword\">exec</span>,<span class=\"keyword\">system</span>,<span class=\"keyword\">chroot</span>,scandir,chgrp,<span class=\"keyword\">chown</span>,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,<span class=\"keyword\">readlink</span>,<span class=\"keyword\">symlink</span>,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,<span class=\"keyword\">getservbyname</span>,<span class=\"keyword\">getservbyport</span>,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname</div></pre></td></tr></table></figure>\n</li>\n<li><p>expose_php = Off #禁止显示php版本的信息</p>\n</li>\n<li>short_open_tag = ON #支持php短标签</li>\n<li>open_basedir = .:/tmp/  (设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/)</li>\n<li>:wq! #保存退出<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">systemctl</span> restart mariadb <span class=\"comment\">#重启MariaDB</span></div><div class=\"line\">systemctl restart httpd <span class=\"comment\">#重启apache</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>测试篇<br><figure class=\"highlight plain\"><figcaption><span>/var/www/html</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim index.php #输入下面内容</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">phpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>:wq! #保存退出<br>在客户端浏览器输入服务器IP地址，可以看到相关的配置信息！</p>\n<p>注意：apache默认的程序目录是<strong>/var/www/html</strong><br>权限设置：<code>chown apache.apache -R /var/www/html</code></p>\n<p>参考：<a href=\"http://www.osyunwei.com/archives/7829.html\" target=\"_blank\" rel=\"external\">http://www.osyunwei.com/archives/7829.html</a></p>\n","excerpt":"","more":"<h1 id=\"CentOS-7搭建LAMP环境-Apache-PHP-MariaDB\"><a href=\"#CentOS-7搭建LAMP环境-Apache-PHP-MariaDB\" class=\"headerlink\" title=\"CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)\"></a>CentOS 7搭建LAMP环境(Apache+PHP+MariaDB)</h1><p>在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP<br><strong><a href=\"http://www.centos.bz/2013/08/ezhttp-tutorial/\">http://www.centos.bz/2013/08/ezhttp-tutorial/</a></strong></p>\n<h2 id=\"准备篇（可跳过此步）：\"><a href=\"#准备篇（可跳过此步）：\" class=\"headerlink\" title=\"准备篇（可跳过此步）：\"></a>准备篇（可跳过此步）：</h2><h3 id=\"一、配置防火墙，开启80端口、3306端口\"><a href=\"#一、配置防火墙，开启80端口、3306端口\" class=\"headerlink\" title=\"一、配置防火墙，开启80端口、3306端口\"></a>一、配置防火墙，开启80端口、3306端口</h3><p>CentOS 7默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p>\n<h4 id=\"1、关闭firewall：\"><a href=\"#1、关闭firewall：\" class=\"headerlink\" title=\"1、关闭firewall：\"></a>1、关闭firewall：</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"keyword\">stop</span> firewalld.service <span class=\"meta\">#停止firewall</span></div><div class=\"line\">systemctl <span class=\"keyword\">disable</span> firewalld.service <span class=\"meta\">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>\n<h4 id=\"2、安装iptables防火墙\"><a href=\"#2、安装iptables防火墙\" class=\"headerlink\" title=\"2、安装iptables防火墙\"></a>2、安装iptables防火墙</h4><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> iptables-services <span class=\"comment\">#安装</span></div><div class=\"line\">vim /etc/sysconfig/iptables <span class=\"comment\">#编辑防火墙配置文件</span></div></pre></td></tr></table></figure>\n<p>增加规则：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">22</span> -j ACCEPT</div><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">80</span> -j ACCEPT</div><div class=\"line\">-A INPUT -m <span class=\"keyword\">state</span> --state NEW -m tcp -p tcp --dport <span class=\"number\">3306</span> -j ACCEPT</div></pre></td></tr></table></figure></p>\n<p>:wq! #保存退出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart iptables <span class=\"comment\">#最后重启防火墙使配置生效</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables <span class=\"comment\">#设置防火墙开机启动</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"二、关闭SELINUX\"><a href=\"#二、关闭SELINUX\" class=\"headerlink\" title=\"二、关闭SELINUX\"></a>二、关闭SELINUX</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim <span class=\"meta-keyword\">/etc/</span>selinux/config</div><div class=\"line\"><span class=\"meta\">#SELINUX=enforcing #注释掉</span></div><div class=\"line\"><span class=\"meta\">#SELINUXTYPE=targeted #注释掉</span></div><div class=\"line\">SELINUX=disabled <span class=\"meta\">#增加</span></div></pre></td></tr></table></figure>\n<p>:wq! #保存退出</p>\n<h2 id=\"setenforce-0-使配置立即生效\"><a href=\"#setenforce-0-使配置立即生效\" class=\"headerlink\" title=\"setenforce 0 #使配置立即生效\"></a><code>setenforce 0</code> #使配置立即生效</h2><h2 id=\"安装篇：\"><a href=\"#安装篇：\" class=\"headerlink\" title=\"安装篇：\"></a>安装篇：</h2><p>一、安装MariaDB<br>CentOS 7.0中，已经使用MariaDB替代了MySQL数据库</p>\n<h4 id=\"1、安装MariaDB\"><a href=\"#1、安装MariaDB\" class=\"headerlink\" title=\"1、安装MariaDB\"></a>1、安装MariaDB</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">yum</span> install <span class=\"keyword\">mariadb </span><span class=\"keyword\">mariadb-server </span>-y</div><div class=\"line\"><span class=\"symbol\">systemctl</span> start <span class=\"keyword\">mariadb </span>#启动<span class=\"keyword\">MariaDB</span></div></pre></td></tr></table></figure>\n<p><code>cp /usr/share/mysql/my-huge.cnf /etc/my.cnf</code> 拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</p>\n<h4 id=\"2、为root账户设置密码\"><a href=\"#2、为root账户设置密码\" class=\"headerlink\" title=\"2、为root账户设置密码\"></a>2、为root账户设置密码</h4><p><code>mysql_secure_installation</code></p>\n<ul>\n<li>回车，根据提示输入Y</li>\n<li>输入2次密码，回车</li>\n<li>根据提示一路输入Y</li>\n<li>最后出现：Thanks for using MySQL!</li>\n<li>MariaDB密码设置完成，重新启动 MariaDB：<br><code>systemctl restart mariadb</code> #重启MariaDB</li>\n</ul>\n<h4 id=\"3、安装Apache和PHP\"><a href=\"#3、安装Apache和PHP\" class=\"headerlink\" title=\"3、安装Apache和PHP\"></a>3、安装Apache和PHP</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install http php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-<span class=\"keyword\">xml</span> <span class=\"title\">php-xmlrpc</span> php-mbstring php-bcmath php-mhash -y</div><div class=\"line\">systemctl restart mariadb  <span class=\"comment\">#重启MariaDB</span></div><div class=\"line\">systemctl enable mariadb <span class=\"comment\">#设置开机启动</span></div><div class=\"line\">systemctl <span class=\"literal\">start</span> httpd <span class=\"comment\">#启动apache</span></div><div class=\"line\">systemctl enable httpd <span class=\"comment\">#设置apache开机启动</span></div></pre></td></tr></table></figure>\n<p>在客户端浏览器中打开服务器IP地址，会出现测试界面，说明apache安装成功</p>\n<hr>\n<h2 id=\"配置篇\"><a href=\"#配置篇\" class=\"headerlink\" title=\"配置篇:\"></a>配置篇:</h2><h3 id=\"一、Apache配置\"><a href=\"#一、Apache配置\" class=\"headerlink\" title=\"一、Apache配置\"></a>一、Apache配置</h3><p><code>vim /etc/httpd/conf/httpd.conf</code> 编辑配置文件</p>\n<ul>\n<li>ServerSignature On  #添加，在错误页中显示Apache的版本，Off为不显示</li>\n<li>Options Indexes FollowSymLinks  #修改为：Options Includes ExecCGI FollowSymLinks（允许服务器执行CGI及SSI，禁止列出目录）</li>\n<li>#AddHandler cgi-script .cgi　取消注释（允许扩展名为.pl的CGI脚本运行）</li>\n<li>AllowOverride None　 #修改为：AllowOverride All （允许.htaccess）</li>\n<li>AddDefaultCharset UTF-8　#修改为：AddDefaultCharset GB2312　（添加GB2312为默认编码）</li>\n<li>#Options Indexes FollowSymLinks   #修改为 Options FollowSymLinks（不在浏览器上显示树状目录结构）</li>\n<li>DirectoryIndex index.html   #修改为：DirectoryIndex index.html index.htm</li>\n<li>Default.html Default.htmindex.php（设置默认首页文件，增加index.php）</li>\n<li>MaxKeepAliveRequests 500  #添加MaxKeepAliveRequests 500 （增加同时连接数）</li>\n</ul>\n<p>:wq! #保存退出<br><code>systemctl restart httpd</code>重启apache<br><code>rm -f /etc/httpd/conf.d/welcome.conf /var/www/error/noindex.html</code> 删除默认测试页</p>\n<hr>\n<h3 id=\"二、php配置\"><a href=\"#二、php配置\" class=\"headerlink\" title=\"二、php配置\"></a>二、php配置</h3><p><code>vim /etc/php.ini</code> 编辑配置文件</p>\n<ul>\n<li>date.timezone = PRC #把前面的分号去掉，改为date.timezone = PRC</li>\n<li><p>(这里列出了PHP禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。)</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">disable_functions = passthru,<span class=\"keyword\">exec</span>,<span class=\"keyword\">system</span>,<span class=\"keyword\">chroot</span>,scandir,chgrp,<span class=\"keyword\">chown</span>,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,<span class=\"keyword\">readlink</span>,<span class=\"keyword\">symlink</span>,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,<span class=\"keyword\">getservbyname</span>,<span class=\"keyword\">getservbyport</span>,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname</div></pre></td></tr></table></figure>\n</li>\n<li><p>expose_php = Off #禁止显示php版本的信息</p>\n</li>\n<li>short_open_tag = ON #支持php短标签</li>\n<li>open_basedir = .:/tmp/  (设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序的目录/data/www.osyunwei.com/:/tmp/)</li>\n<li>:wq! #保存退出<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">systemctl</span> restart mariadb <span class=\"comment\">#重启MariaDB</span></div><div class=\"line\">systemctl restart httpd <span class=\"comment\">#重启apache</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>测试篇<br><figure class=\"highlight plain\"><figcaption><span>/var/www/html</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim index.php #输入下面内容</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">phpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>:wq! #保存退出<br>在客户端浏览器输入服务器IP地址，可以看到相关的配置信息！</p>\n<p>注意：apache默认的程序目录是<strong>/var/www/html</strong><br>权限设置：<code>chown apache.apache -R /var/www/html</code></p>\n<p>参考：<a href=\"http://www.osyunwei.com/archives/7829.html\">http://www.osyunwei.com/archives/7829.html</a></p>\n"},{"title":"CentOS上搭建PHP环境","date":"2016-11-02T04:21:24.000Z","_content":"\n在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP\n**http://www.centos.bz/2013/08/ezhttp-tutorial/**\n \n安装:\n\n```\nyum install httpd httpd-devel\nyum install php php-devel\nyum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\nyum install mysql mysql-server\n/etc/init.d/mysqld start\n/etc/init.d/httpd restart\n```\n\n此时可以在目录：/var/www/html/下建立一个PHP文件\n代码：\n\n`<?php phpinfo(); ?>`\n\n然后访问这个文件，就能看到PHP的一些信息，php.ini配置文件的路径可以在这个页面上看到\n\n \n**测试mysql是否链接成功的php代码**\n\n```php\n<?php\n$con = mysql_connect(\"10.0.@.@@\",\"@@\",\"@@\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n \nmysql_select_db(\"mydb\", $con);\n \n$result = mysql_query(\"SELECT * FROM sys_user\");\n \nwhile($row = mysql_fetch_array($result))\n  {\n  echo $row['UserName'] . \" \" . $row['PassWord'] . \" \" . $row['id'];\n  echo \"<br />\";\n  }\n \nmysql_close($con);\n?>\n```\n\n可以把上面的代码传入目录/var/www/html/\n就可以看到执行情况\n\n\n\n","source":"_posts/环境搭建/2016-11-02-CentOS搭建PHP环境.md","raw":"---\ntitle: CentOS上搭建PHP环境\ncategories:\n  - 环境搭建\ntags:\n  - Centos PHP\ndate: 2016-11-02 12:21:24\n---\n\n在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP\n**http://www.centos.bz/2013/08/ezhttp-tutorial/**\n \n安装:\n\n```\nyum install httpd httpd-devel\nyum install php php-devel\nyum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\nyum install mysql mysql-server\n/etc/init.d/mysqld start\n/etc/init.d/httpd restart\n```\n\n此时可以在目录：/var/www/html/下建立一个PHP文件\n代码：\n\n`<?php phpinfo(); ?>`\n\n然后访问这个文件，就能看到PHP的一些信息，php.ini配置文件的路径可以在这个页面上看到\n\n \n**测试mysql是否链接成功的php代码**\n\n```php\n<?php\n$con = mysql_connect(\"10.0.@.@@\",\"@@\",\"@@\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\n \nmysql_select_db(\"mydb\", $con);\n \n$result = mysql_query(\"SELECT * FROM sys_user\");\n \nwhile($row = mysql_fetch_array($result))\n  {\n  echo $row['UserName'] . \" \" . $row['PassWord'] . \" \" . $row['id'];\n  echo \"<br />\";\n  }\n \nmysql_close($con);\n?>\n```\n\n可以把上面的代码传入目录/var/www/html/\n就可以看到执行情况\n\n\n\n","slug":"环境搭建-2016-11-02-CentOS搭建PHP环境","published":1,"updated":"2016-11-02T05:51:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nntz00130gpk4bwsjgyx","content":"<p>在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP<br><strong><a href=\"http://www.centos.bz/2013/08/ezhttp-tutorial/\" target=\"_blank\" rel=\"external\">http://www.centos.bz/2013/08/ezhttp-tutorial/</a></strong></p>\n<p>安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> httpd httpd-devel</div><div class=\"line\">yum <span class=\"keyword\">install</span> php php-devel</div><div class=\"line\">yum <span class=\"keyword\">install</span> php-mysql php-gd php-imap php-ldap php-odbc php-pear php-<span class=\"keyword\">xml</span> php-xmlrpc</div><div class=\"line\">yum <span class=\"keyword\">install</span> mysql mysql-<span class=\"keyword\">server</span></div><div class=\"line\">/etc/init.d/mysqld <span class=\"keyword\">start</span></div><div class=\"line\">/etc/init.d/httpd restart</div></pre></td></tr></table></figure>\n<p>此时可以在目录：/var/www/html/下建立一个PHP文件<br>代码：</p>\n<p><code>&lt;?php phpinfo(); ?&gt;</code></p>\n<p>然后访问这个文件，就能看到PHP的一些信息，php.ini配置文件的路径可以在这个页面上看到</p>\n<p><strong>测试mysql是否链接成功的php代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"10.0.@.@@\"</span>,<span class=\"string\">\"@@\"</span>,<span class=\"string\">\"@@\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">mysql_select_db(<span class=\"string\">\"mydb\"</span>, $con);</div><div class=\"line\"> </div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM sys_user\"</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> $row[<span class=\"string\">'UserName'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'PassWord'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'id'</span>];</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>可以把上面的代码传入目录/var/www/html/<br>就可以看到执行情况</p>\n","excerpt":"","more":"<p>在CentOS上搭建PHP服务器环境,可以使用一键自动部署环境的工具，请参见网友开发的这个工具LAMP，LNMP，LNAMP<br><strong><a href=\"http://www.centos.bz/2013/08/ezhttp-tutorial/\">http://www.centos.bz/2013/08/ezhttp-tutorial/</a></strong></p>\n<p>安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> httpd httpd-devel</div><div class=\"line\">yum <span class=\"keyword\">install</span> php php-devel</div><div class=\"line\">yum <span class=\"keyword\">install</span> php-mysql php-gd php-imap php-ldap php-odbc php-pear php-<span class=\"keyword\">xml</span> php-xmlrpc</div><div class=\"line\">yum <span class=\"keyword\">install</span> mysql mysql-<span class=\"keyword\">server</span></div><div class=\"line\">/etc/init.d/mysqld <span class=\"keyword\">start</span></div><div class=\"line\">/etc/init.d/httpd restart</div></pre></td></tr></table></figure>\n<p>此时可以在目录：/var/www/html/下建立一个PHP文件<br>代码：</p>\n<p><code>&lt;?php phpinfo(); ?&gt;</code></p>\n<p>然后访问这个文件，就能看到PHP的一些信息，php.ini配置文件的路径可以在这个页面上看到</p>\n<p><strong>测试mysql是否链接成功的php代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"10.0.@.@@\"</span>,<span class=\"string\">\"@@\"</span>,<span class=\"string\">\"@@\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">mysql_select_db(<span class=\"string\">\"mydb\"</span>, $con);</div><div class=\"line\"> </div><div class=\"line\">$result = mysql_query(<span class=\"string\">\"SELECT * FROM sys_user\"</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">while</span>($row = mysql_fetch_array($result))</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">echo</span> $row[<span class=\"string\">'UserName'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'PassWord'</span>] . <span class=\"string\">\" \"</span> . $row[<span class=\"string\">'id'</span>];</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">mysql_close($con);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>可以把上面的代码传入目录/var/www/html/<br>就可以看到执行情况</p>\n"},{"title":"用软文思维写工作总结","date":"2016-11-02T06:52:37.000Z","_content":"\n网上看到的网文，摘录分享\n\n## 如何用软文思维写工作总结？\n#### Step 1 : 工作总结的选题规划\n1. 给谁看\n工作总结，顾名思义就是要给领导看的，所以我们要做的第一件事就是分析领导的风格，领导的风格决定了总结的风格。一般来说主要有这么三类。\n请根据具体情况对号入座：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93001.png)\n2. 看什么\n领导主要想看些什么，你就要写些什么。\n这里有七个方面内容可供选择：你的（销售、生产）业绩、对未来工作的计划、工作心得、有哪些好的建议、对一些数据的分析和结论、对行业情况的调研结果，以及提出未来工作所需要的资源等等。当然其他方面也还有很多，以上仅供参考。\n3. 横向调研\n横向调研的意思是借鉴你同事的优秀工作总结，做到扬长避短。\n#### Step 2 : 挖掘工作总结的素材\n软文的素材主要是以下几个方面，它们的核心就是介绍企业的基本信息。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93002.png)\n用在工作总结上，就不是以企业为主体，而是以个人以及个人所在的团队为介绍对象。它们分别可写的指标如下图所示：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93003.png)\n#### Step 3 : 整合素材\n可以单纯地列出数字，计算增长比、横向对比、逐月比较、趋势预测等等，对于数据来说，最好的呈现方式就是图表。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93004.png)\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93005.png)\n这时候可能有些人就要问了，我是属于行政类岗位，如果没有以上这些业绩指标，该怎么写呢？答案是，你依然可以从以下11个方框中找到你的成就感。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93006.png)\n正文撰写和标题拟定，就要根据以上确定的选题整理的素材自由发挥了。不过学姐为大家提供了一些非常好用的的句式↓\n工作总结优化的9种句式\n\n你是不是也有这种感受，刚写完的一个文案/总结，当时怎么也看不出有哪里不好，但是隔了一两天再看一遍，就能发现不少可以改进的地方。\n对于影响你升职加薪的工作总结，当然要一改再改，优化几遍再上交啦！\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93007.png)\n不过这里不是让你使用多么精美的措辞，毕竟不是写小说，工作总结的精髓还是在于它的理性意义。\n一篇优秀的工作总结要做到言语朴实但不呆板，成果累累却不张扬，让你的上司认为你是个踏实努力、有思想、有上进心、有潜力的好员工。怎么做到呢？\n可以参考以下9个句式，看看它们的巧妙之处。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93008.png)\n或者用“首先，其次，再次”等有逻辑的句式，表明你有非常清晰的工作思路；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93009.png)\n文章里要出现这类词，因为总结不能面面俱到，要突出主次，以免领导丢失重点，也认为你是个没有重点的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93010.png)\n通过某些真实的案例和数据得出结论，有凭有据，表明你的观点并非是天马行空想出来的；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93011.png)\n同上，当你提出一个观点时，需要数据、图表来佐证，图文结合更具说服力；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93012.png)\n不光要做会提问题的员工，还要主动寻找解决问题的方法，向领导表明你是个有建设性意见的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93013.png)\n很多人在总结报告里喜欢讲一些行业的成功案例（运营、用人等经验），但是如果不联系到自己的工作中，就会说明你只是个爱借用他人来吹牛的人；但反之就能表明你是个爱学习、爱思考、爱应用的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93014.png)\n当向领导提出同行竞争者的成功做法时，你还需要指出本公司目前需要的条件或需要克服的障碍，表明你是个思虑周全、靠谱的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93015.png)\n当你提出建议时，你需要落实具体的资源、人员计划。表明你真正深入思考了这个问题，是一个有较强执行力的人。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93016.png)\n最后总结一下，这半年（一年）自己哪方面做得好，哪方面还有待提高，如何提高，表明你是个勤思考，上进的人，也让领导相信你明年会做得更好（画大饼懂不懂？）。\n\n了解更多写工作总结的技巧，请戳[怎样用软文思维写工作总结？ >>](http://study.163.com/course/introduction/1599008.htm?inref=xuejieyouliao60#/courseDetail)\n\n\n\n","source":"_posts/文章阅读/2016-11-02-用软文思维写工作总结.md","raw":"---\ntitle: 用软文思维写工作总结\ncategories:\n  - 文章阅读\ntags:\n  - 工作总结\ndate: 2016-11-02 14:52:37\n---\n\n网上看到的网文，摘录分享\n\n## 如何用软文思维写工作总结？\n#### Step 1 : 工作总结的选题规划\n1. 给谁看\n工作总结，顾名思义就是要给领导看的，所以我们要做的第一件事就是分析领导的风格，领导的风格决定了总结的风格。一般来说主要有这么三类。\n请根据具体情况对号入座：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93001.png)\n2. 看什么\n领导主要想看些什么，你就要写些什么。\n这里有七个方面内容可供选择：你的（销售、生产）业绩、对未来工作的计划、工作心得、有哪些好的建议、对一些数据的分析和结论、对行业情况的调研结果，以及提出未来工作所需要的资源等等。当然其他方面也还有很多，以上仅供参考。\n3. 横向调研\n横向调研的意思是借鉴你同事的优秀工作总结，做到扬长避短。\n#### Step 2 : 挖掘工作总结的素材\n软文的素材主要是以下几个方面，它们的核心就是介绍企业的基本信息。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93002.png)\n用在工作总结上，就不是以企业为主体，而是以个人以及个人所在的团队为介绍对象。它们分别可写的指标如下图所示：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93003.png)\n#### Step 3 : 整合素材\n可以单纯地列出数字，计算增长比、横向对比、逐月比较、趋势预测等等，对于数据来说，最好的呈现方式就是图表。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93004.png)\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93005.png)\n这时候可能有些人就要问了，我是属于行政类岗位，如果没有以上这些业绩指标，该怎么写呢？答案是，你依然可以从以下11个方框中找到你的成就感。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93006.png)\n正文撰写和标题拟定，就要根据以上确定的选题整理的素材自由发挥了。不过学姐为大家提供了一些非常好用的的句式↓\n工作总结优化的9种句式\n\n你是不是也有这种感受，刚写完的一个文案/总结，当时怎么也看不出有哪里不好，但是隔了一两天再看一遍，就能发现不少可以改进的地方。\n对于影响你升职加薪的工作总结，当然要一改再改，优化几遍再上交啦！\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93007.png)\n不过这里不是让你使用多么精美的措辞，毕竟不是写小说，工作总结的精髓还是在于它的理性意义。\n一篇优秀的工作总结要做到言语朴实但不呆板，成果累累却不张扬，让你的上司认为你是个踏实努力、有思想、有上进心、有潜力的好员工。怎么做到呢？\n可以参考以下9个句式，看看它们的巧妙之处。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93008.png)\n或者用“首先，其次，再次”等有逻辑的句式，表明你有非常清晰的工作思路；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93009.png)\n文章里要出现这类词，因为总结不能面面俱到，要突出主次，以免领导丢失重点，也认为你是个没有重点的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93010.png)\n通过某些真实的案例和数据得出结论，有凭有据，表明你的观点并非是天马行空想出来的；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93011.png)\n同上，当你提出一个观点时，需要数据、图表来佐证，图文结合更具说服力；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93012.png)\n不光要做会提问题的员工，还要主动寻找解决问题的方法，向领导表明你是个有建设性意见的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93013.png)\n很多人在总结报告里喜欢讲一些行业的成功案例（运营、用人等经验），但是如果不联系到自己的工作中，就会说明你只是个爱借用他人来吹牛的人；但反之就能表明你是个爱学习、爱思考、爱应用的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93014.png)\n当向领导提出同行竞争者的成功做法时，你还需要指出本公司目前需要的条件或需要克服的障碍，表明你是个思虑周全、靠谱的人；\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93015.png)\n当你提出建议时，你需要落实具体的资源、人员计划。表明你真正深入思考了这个问题，是一个有较强执行力的人。\n![](http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93016.png)\n最后总结一下，这半年（一年）自己哪方面做得好，哪方面还有待提高，如何提高，表明你是个勤思考，上进的人，也让领导相信你明年会做得更好（画大饼懂不懂？）。\n\n了解更多写工作总结的技巧，请戳[怎样用软文思维写工作总结？ >>](http://study.163.com/course/introduction/1599008.htm?inref=xuejieyouliao60#/courseDetail)\n\n\n\n","slug":"文章阅读-2016-11-02-用软文思维写工作总结","published":1,"updated":"2016-11-02T07:49:10.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnue00150gpk1841th23","content":"<p>网上看到的网文，摘录分享</p>\n<h2 id=\"如何用软文思维写工作总结？\"><a href=\"#如何用软文思维写工作总结？\" class=\"headerlink\" title=\"如何用软文思维写工作总结？\"></a>如何用软文思维写工作总结？</h2><h4 id=\"Step-1-工作总结的选题规划\"><a href=\"#Step-1-工作总结的选题规划\" class=\"headerlink\" title=\"Step 1 : 工作总结的选题规划\"></a>Step 1 : 工作总结的选题规划</h4><ol>\n<li>给谁看<br>工作总结，顾名思义就是要给领导看的，所以我们要做的第一件事就是分析领导的风格，领导的风格决定了总结的风格。一般来说主要有这么三类。<br>请根据具体情况对号入座：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93001.png\" alt=\"\"></li>\n<li>看什么<br>领导主要想看些什么，你就要写些什么。<br>这里有七个方面内容可供选择：你的（销售、生产）业绩、对未来工作的计划、工作心得、有哪些好的建议、对一些数据的分析和结论、对行业情况的调研结果，以及提出未来工作所需要的资源等等。当然其他方面也还有很多，以上仅供参考。</li>\n<li>横向调研<br>横向调研的意思是借鉴你同事的优秀工作总结，做到扬长避短。<h4 id=\"Step-2-挖掘工作总结的素材\"><a href=\"#Step-2-挖掘工作总结的素材\" class=\"headerlink\" title=\"Step 2 : 挖掘工作总结的素材\"></a>Step 2 : 挖掘工作总结的素材</h4>软文的素材主要是以下几个方面，它们的核心就是介绍企业的基本信息。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93002.png\" alt=\"\"><br>用在工作总结上，就不是以企业为主体，而是以个人以及个人所在的团队为介绍对象。它们分别可写的指标如下图所示：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93003.png\" alt=\"\"><h4 id=\"Step-3-整合素材\"><a href=\"#Step-3-整合素材\" class=\"headerlink\" title=\"Step 3 : 整合素材\"></a>Step 3 : 整合素材</h4>可以单纯地列出数字，计算增长比、横向对比、逐月比较、趋势预测等等，对于数据来说，最好的呈现方式就是图表。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93004.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93005.png\" alt=\"\"><br>这时候可能有些人就要问了，我是属于行政类岗位，如果没有以上这些业绩指标，该怎么写呢？答案是，你依然可以从以下11个方框中找到你的成就感。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93006.png\" alt=\"\"><br>正文撰写和标题拟定，就要根据以上确定的选题整理的素材自由发挥了。不过学姐为大家提供了一些非常好用的的句式↓<br>工作总结优化的9种句式</li>\n</ol>\n<p>你是不是也有这种感受，刚写完的一个文案/总结，当时怎么也看不出有哪里不好，但是隔了一两天再看一遍，就能发现不少可以改进的地方。<br>对于影响你升职加薪的工作总结，当然要一改再改，优化几遍再上交啦！<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93007.png\" alt=\"\"><br>不过这里不是让你使用多么精美的措辞，毕竟不是写小说，工作总结的精髓还是在于它的理性意义。<br>一篇优秀的工作总结要做到言语朴实但不呆板，成果累累却不张扬，让你的上司认为你是个踏实努力、有思想、有上进心、有潜力的好员工。怎么做到呢？<br>可以参考以下9个句式，看看它们的巧妙之处。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93008.png\" alt=\"\"><br>或者用“首先，其次，再次”等有逻辑的句式，表明你有非常清晰的工作思路；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93009.png\" alt=\"\"><br>文章里要出现这类词，因为总结不能面面俱到，要突出主次，以免领导丢失重点，也认为你是个没有重点的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93010.png\" alt=\"\"><br>通过某些真实的案例和数据得出结论，有凭有据，表明你的观点并非是天马行空想出来的；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93011.png\" alt=\"\"><br>同上，当你提出一个观点时，需要数据、图表来佐证，图文结合更具说服力；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93012.png\" alt=\"\"><br>不光要做会提问题的员工，还要主动寻找解决问题的方法，向领导表明你是个有建设性意见的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93013.png\" alt=\"\"><br>很多人在总结报告里喜欢讲一些行业的成功案例（运营、用人等经验），但是如果不联系到自己的工作中，就会说明你只是个爱借用他人来吹牛的人；但反之就能表明你是个爱学习、爱思考、爱应用的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93014.png\" alt=\"\"><br>当向领导提出同行竞争者的成功做法时，你还需要指出本公司目前需要的条件或需要克服的障碍，表明你是个思虑周全、靠谱的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93015.png\" alt=\"\"><br>当你提出建议时，你需要落实具体的资源、人员计划。表明你真正深入思考了这个问题，是一个有较强执行力的人。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93016.png\" alt=\"\"><br>最后总结一下，这半年（一年）自己哪方面做得好，哪方面还有待提高，如何提高，表明你是个勤思考，上进的人，也让领导相信你明年会做得更好（画大饼懂不懂？）。</p>\n<p>了解更多写工作总结的技巧，请戳<a href=\"http://study.163.com/course/introduction/1599008.htm?inref=xuejieyouliao60#/courseDetail\" target=\"_blank\" rel=\"external\">怎样用软文思维写工作总结？ &gt;&gt;</a></p>\n","excerpt":"","more":"<p>网上看到的网文，摘录分享</p>\n<h2 id=\"如何用软文思维写工作总结？\"><a href=\"#如何用软文思维写工作总结？\" class=\"headerlink\" title=\"如何用软文思维写工作总结？\"></a>如何用软文思维写工作总结？</h2><h4 id=\"Step-1-工作总结的选题规划\"><a href=\"#Step-1-工作总结的选题规划\" class=\"headerlink\" title=\"Step 1 : 工作总结的选题规划\"></a>Step 1 : 工作总结的选题规划</h4><ol>\n<li>给谁看<br>工作总结，顾名思义就是要给领导看的，所以我们要做的第一件事就是分析领导的风格，领导的风格决定了总结的风格。一般来说主要有这么三类。<br>请根据具体情况对号入座：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93001.png\" alt=\"\"></li>\n<li>看什么<br>领导主要想看些什么，你就要写些什么。<br>这里有七个方面内容可供选择：你的（销售、生产）业绩、对未来工作的计划、工作心得、有哪些好的建议、对一些数据的分析和结论、对行业情况的调研结果，以及提出未来工作所需要的资源等等。当然其他方面也还有很多，以上仅供参考。</li>\n<li>横向调研<br>横向调研的意思是借鉴你同事的优秀工作总结，做到扬长避短。<h4 id=\"Step-2-挖掘工作总结的素材\"><a href=\"#Step-2-挖掘工作总结的素材\" class=\"headerlink\" title=\"Step 2 : 挖掘工作总结的素材\"></a>Step 2 : 挖掘工作总结的素材</h4>软文的素材主要是以下几个方面，它们的核心就是介绍企业的基本信息。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93002.png\" alt=\"\"><br>用在工作总结上，就不是以企业为主体，而是以个人以及个人所在的团队为介绍对象。它们分别可写的指标如下图所示：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93003.png\" alt=\"\"><h4 id=\"Step-3-整合素材\"><a href=\"#Step-3-整合素材\" class=\"headerlink\" title=\"Step 3 : 整合素材\"></a>Step 3 : 整合素材</h4>可以单纯地列出数字，计算增长比、横向对比、逐月比较、趋势预测等等，对于数据来说，最好的呈现方式就是图表。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93004.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93005.png\" alt=\"\"><br>这时候可能有些人就要问了，我是属于行政类岗位，如果没有以上这些业绩指标，该怎么写呢？答案是，你依然可以从以下11个方框中找到你的成就感。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93006.png\" alt=\"\"><br>正文撰写和标题拟定，就要根据以上确定的选题整理的素材自由发挥了。不过学姐为大家提供了一些非常好用的的句式↓<br>工作总结优化的9种句式</li>\n</ol>\n<p>你是不是也有这种感受，刚写完的一个文案/总结，当时怎么也看不出有哪里不好，但是隔了一两天再看一遍，就能发现不少可以改进的地方。<br>对于影响你升职加薪的工作总结，当然要一改再改，优化几遍再上交啦！<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93007.png\" alt=\"\"><br>不过这里不是让你使用多么精美的措辞，毕竟不是写小说，工作总结的精髓还是在于它的理性意义。<br>一篇优秀的工作总结要做到言语朴实但不呆板，成果累累却不张扬，让你的上司认为你是个踏实努力、有思想、有上进心、有潜力的好员工。怎么做到呢？<br>可以参考以下9个句式，看看它们的巧妙之处。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93008.png\" alt=\"\"><br>或者用“首先，其次，再次”等有逻辑的句式，表明你有非常清晰的工作思路；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93009.png\" alt=\"\"><br>文章里要出现这类词，因为总结不能面面俱到，要突出主次，以免领导丢失重点，也认为你是个没有重点的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93010.png\" alt=\"\"><br>通过某些真实的案例和数据得出结论，有凭有据，表明你的观点并非是天马行空想出来的；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93011.png\" alt=\"\"><br>同上，当你提出一个观点时，需要数据、图表来佐证，图文结合更具说服力；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93012.png\" alt=\"\"><br>不光要做会提问题的员工，还要主动寻找解决问题的方法，向领导表明你是个有建设性意见的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93013.png\" alt=\"\"><br>很多人在总结报告里喜欢讲一些行业的成功案例（运营、用人等经验），但是如果不联系到自己的工作中，就会说明你只是个爱借用他人来吹牛的人；但反之就能表明你是个爱学习、爱思考、爱应用的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93014.png\" alt=\"\"><br>当向领导提出同行竞争者的成功做法时，你还需要指出本公司目前需要的条件或需要克服的障碍，表明你是个思虑周全、靠谱的人；<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93015.png\" alt=\"\"><br>当你提出建议时，你需要落实具体的资源、人员计划。表明你真正深入思考了这个问题，是一个有较强执行力的人。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/%E7%94%A8%E8%BD%AF%E6%96%87%E6%80%9D%E7%BB%B4%E5%86%99%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93016.png\" alt=\"\"><br>最后总结一下，这半年（一年）自己哪方面做得好，哪方面还有待提高，如何提高，表明你是个勤思考，上进的人，也让领导相信你明年会做得更好（画大饼懂不懂？）。</p>\n<p>了解更多写工作总结的技巧，请戳<a href=\"http://study.163.com/course/introduction/1599008.htm?inref=xuejieyouliao60#/courseDetail\">怎样用软文思维写工作总结？ &gt;&gt;</a></p>\n"},{"title":"Centos网络端口","date":"2016-11-02T09:40:11.000Z","_content":"\nCentos查看端口占用情况命令，比如查看80端口占用情况使用如下命令：\n`lsof -i tcp:80`\n \n列出所有端口 \n`netstat -ntlp`\n \n### 1、开启端口（以80端口为例） \n* 方法一：\n`/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT `写入修改\n\n\t`/etc/init.d/iptables save`   保存修改\n\n\t`service iptables restart`    重启防火墙，修改生效\n \n* 方法二：\n`vim /etc/sysconfig/iptables`  修改配置文件加入如下语句:\n\n`-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT` 重启防火墙，修改完成\n \n\n### 2、关闭端口\n* 方法一：\n\n`/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP `  写入修改\n\n`/etc/init.d/iptables save `  保存修改\n\n`service iptables restart `   重启防火墙，修改生效\n \n* 方法二： \n`vi /etc/sysconfig/iptables`  修改配置文件加入如下语句: \n\n`-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP`  重启防火墙，修改完成\n \n\n### 3、查看端口状态\n Centos 6.x 、Centos 7\n`/etc/init.d/iptables status`\n\n`netstat -lntp `    查看监听(Listen)的端口\n\n`netstat -antp `   查看所有建立的TCP连接\n\n\n\n\n","source":"_posts/系统管理/2016-11-02-Centos网络端口.md","raw":"---\ntitle: Centos网络端口\ncategories:\n  - 系统管理\ntags:\n  - Centos网络端口\ndate: 2016-11-02 17:40:11\n---\n\nCentos查看端口占用情况命令，比如查看80端口占用情况使用如下命令：\n`lsof -i tcp:80`\n \n列出所有端口 \n`netstat -ntlp`\n \n### 1、开启端口（以80端口为例） \n* 方法一：\n`/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT `写入修改\n\n\t`/etc/init.d/iptables save`   保存修改\n\n\t`service iptables restart`    重启防火墙，修改生效\n \n* 方法二：\n`vim /etc/sysconfig/iptables`  修改配置文件加入如下语句:\n\n`-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT` 重启防火墙，修改完成\n \n\n### 2、关闭端口\n* 方法一：\n\n`/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP `  写入修改\n\n`/etc/init.d/iptables save `  保存修改\n\n`service iptables restart `   重启防火墙，修改生效\n \n* 方法二： \n`vi /etc/sysconfig/iptables`  修改配置文件加入如下语句: \n\n`-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP`  重启防火墙，修改完成\n \n\n### 3、查看端口状态\n Centos 6.x 、Centos 7\n`/etc/init.d/iptables status`\n\n`netstat -lntp `    查看监听(Listen)的端口\n\n`netstat -antp `   查看所有建立的TCP连接\n\n\n\n\n","slug":"系统管理-2016-11-02-Centos网络端口","published":1,"updated":"2016-11-02T09:47:00.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnue00190gpkdrzm8a1o","content":"<p>Centos查看端口占用情况命令，比如查看80端口占用情况使用如下命令：<br><code>lsof -i tcp:80</code></p>\n<p>列出所有端口<br><code>netstat -ntlp</code></p>\n<h3 id=\"1、开启端口（以80端口为例）\"><a href=\"#1、开启端口（以80端口为例）\" class=\"headerlink\" title=\"1、开启端口（以80端口为例）\"></a>1、开启端口（以80端口为例）</h3><ul>\n<li><p>方法一：<br><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</code>写入修改</p>\n<p>  <code>/etc/init.d/iptables save</code>   保存修改</p>\n<p>  <code>service iptables restart</code>    重启防火墙，修改生效</p>\n</li>\n<li><p>方法二：<br><code>vim /etc/sysconfig/iptables</code>  修改配置文件加入如下语句:</p>\n</li>\n</ul>\n<p><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</code> 重启防火墙，修改完成</p>\n<h3 id=\"2、关闭端口\"><a href=\"#2、关闭端口\" class=\"headerlink\" title=\"2、关闭端口\"></a>2、关闭端口</h3><ul>\n<li>方法一：</li>\n</ul>\n<p><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP</code>  写入修改</p>\n<p><code>/etc/init.d/iptables save</code>  保存修改</p>\n<p><code>service iptables restart</code>   重启防火墙，修改生效</p>\n<ul>\n<li>方法二：<br><code>vi /etc/sysconfig/iptables</code>  修改配置文件加入如下语句: </li>\n</ul>\n<p><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP</code>  重启防火墙，修改完成</p>\n<h3 id=\"3、查看端口状态\"><a href=\"#3、查看端口状态\" class=\"headerlink\" title=\"3、查看端口状态\"></a>3、查看端口状态</h3><p> Centos 6.x 、Centos 7<br><code>/etc/init.d/iptables status</code></p>\n<p><code>netstat -lntp</code>    查看监听(Listen)的端口</p>\n<p><code>netstat -antp</code>   查看所有建立的TCP连接</p>\n","excerpt":"","more":"<p>Centos查看端口占用情况命令，比如查看80端口占用情况使用如下命令：<br><code>lsof -i tcp:80</code></p>\n<p>列出所有端口<br><code>netstat -ntlp</code></p>\n<h3 id=\"1、开启端口（以80端口为例）\"><a href=\"#1、开启端口（以80端口为例）\" class=\"headerlink\" title=\"1、开启端口（以80端口为例）\"></a>1、开启端口（以80端口为例）</h3><ul>\n<li><p>方法一：<br><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</code>写入修改</p>\n<p>  <code>/etc/init.d/iptables save</code>   保存修改</p>\n<p>  <code>service iptables restart</code>    重启防火墙，修改生效</p>\n</li>\n<li><p>方法二：<br><code>vim /etc/sysconfig/iptables</code>  修改配置文件加入如下语句:</p>\n</li>\n</ul>\n<p><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</code> 重启防火墙，修改完成</p>\n<h3 id=\"2、关闭端口\"><a href=\"#2、关闭端口\" class=\"headerlink\" title=\"2、关闭端口\"></a>2、关闭端口</h3><ul>\n<li>方法一：</li>\n</ul>\n<p><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP</code>  写入修改</p>\n<p><code>/etc/init.d/iptables save</code>  保存修改</p>\n<p><code>service iptables restart</code>   重启防火墙，修改生效</p>\n<ul>\n<li>方法二：<br><code>vi /etc/sysconfig/iptables</code>  修改配置文件加入如下语句: </li>\n</ul>\n<p><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP</code>  重启防火墙，修改完成</p>\n<h3 id=\"3、查看端口状态\"><a href=\"#3、查看端口状态\" class=\"headerlink\" title=\"3、查看端口状态\"></a>3、查看端口状态</h3><p> Centos 6.x 、Centos 7<br><code>/etc/init.d/iptables status</code></p>\n<p><code>netstat -lntp</code>    查看监听(Listen)的端口</p>\n<p><code>netstat -antp</code>   查看所有建立的TCP连接</p>\n"},{"title":"Linux内核升级","date":"2016-11-02T13:58:39.000Z","_content":"\n# 内核升级：\n【内核版本 https://www.kernel.org/】\n参考：http://blog.csdn.net/taiyang1987912/article/details/42744019\n```\nyum install ncurses-devel -y\nyum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -y\nwget  https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz     \ntar -xf linux-3.10.28.tar.xz\nmv linux-3.10.28 /usr/src/\ncd /usr/src/linux-3.10.28/\ncp /boot/config-2.6.32-573.el6.x86_64 .config\nsh -c 'yes \"\" | make oldconfig'\nmake oldconfig```\n\ncpu核数 `cat /proc/cpuinfo| grep \"processor\"| wc -l `  下面**-j**后面的48是cpu核数（指定编译核数）\n```\nmake -j48 bzImage\nmake -j48 modules\nmake -j48 modules_install\nmake install```\n\n安装完成后\n`vi /etc/grub.conf`\n 看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为**default=0**，第二段为**default=1**\n\n例如:\n```\n#boot=/dev/sdb\ndefault=0\ntimeout=5\nsplashimage=(hd0,0)/grub/splash.xpm.gz\nhiddenmenu\ntitle CentOS (3.10.28)\n        root (hd0,0)\n        kernel /vmlinuz-3.10.28 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-3.10.28.img\ntitle CentOS (2.6.32-642.3.1.el6.x86_64)\n        root (hd0,0)\n        kernel /vmlinuz-2.6.32-642.3.1.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-2.6.32-642.3.1.el6.x86_64.img\ntitle CentOS 6 (2.6.32-573.el6.x86_64)\n        root (hd0,0)\n        kernel /vmlinuz-2.6.32-573.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-2.6.32-573.el6.x86_64.img\n```\n`reboot`\n`uname -r `   查看内核版本\n\n\n","source":"_posts/系统管理/2016-11-02-Linux内核升级.md","raw":"---\ntitle: Linux内核升级\ncategories:\n  - 系统管理\ntags:\n  - Linux内核升级\ndate: 2016-11-02 21:58:39\n---\n\n# 内核升级：\n【内核版本 https://www.kernel.org/】\n参考：http://blog.csdn.net/taiyang1987912/article/details/42744019\n```\nyum install ncurses-devel -y\nyum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -y\nwget  https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz     \ntar -xf linux-3.10.28.tar.xz\nmv linux-3.10.28 /usr/src/\ncd /usr/src/linux-3.10.28/\ncp /boot/config-2.6.32-573.el6.x86_64 .config\nsh -c 'yes \"\" | make oldconfig'\nmake oldconfig```\n\ncpu核数 `cat /proc/cpuinfo| grep \"processor\"| wc -l `  下面**-j**后面的48是cpu核数（指定编译核数）\n```\nmake -j48 bzImage\nmake -j48 modules\nmake -j48 modules_install\nmake install```\n\n安装完成后\n`vi /etc/grub.conf`\n 看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为**default=0**，第二段为**default=1**\n\n例如:\n```\n#boot=/dev/sdb\ndefault=0\ntimeout=5\nsplashimage=(hd0,0)/grub/splash.xpm.gz\nhiddenmenu\ntitle CentOS (3.10.28)\n        root (hd0,0)\n        kernel /vmlinuz-3.10.28 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-3.10.28.img\ntitle CentOS (2.6.32-642.3.1.el6.x86_64)\n        root (hd0,0)\n        kernel /vmlinuz-2.6.32-642.3.1.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-2.6.32-642.3.1.el6.x86_64.img\ntitle CentOS 6 (2.6.32-573.el6.x86_64)\n        root (hd0,0)\n        kernel /vmlinuz-2.6.32-573.el6.x86_64 ro root=UUID=28fbaad8-35a6-4348-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet\n        initrd /initramfs-2.6.32-573.el6.x86_64.img\n```\n`reboot`\n`uname -r `   查看内核版本\n\n\n","slug":"系统管理-2016-11-02-Linux内核升级","published":1,"updated":"2016-11-02T14:06:12.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnue001b0gpksrvnt8xx","content":"<h1 id=\"内核升级：\"><a href=\"#内核升级：\" class=\"headerlink\" title=\"内核升级：\"></a>内核升级：</h1><p>【内核版本 <a href=\"https://www.kernel.org/】\" target=\"_blank\" rel=\"external\">https://www.kernel.org/】</a><br>参考：<a href=\"http://blog.csdn.net/taiyang1987912/article/details/42744019\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/taiyang1987912/article/details/42744019</a><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install ncurses-devel -y</div><div class=\"line\">yum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -y</div><div class=\"line\">wget  https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz     </span></div><div class=\"line\">tar -xf linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\">mv linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span> /usr/src/</div><div class=\"line\">cd /usr/src/linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span>/</div><div class=\"line\">cp /boot/config-<span class=\"number\">2.6</span>.<span class=\"number\">32</span>-<span class=\"number\">573</span><span class=\"selector-class\">.el6</span><span class=\"selector-class\">.x86_64</span> <span class=\"selector-class\">.config</span></div><div class=\"line\">sh -c <span class=\"string\">'yes \"\" | make oldconfig'</span></div><div class=\"line\">make oldconfig</div></pre></td></tr></table></figure></p>\n<p>cpu核数 <code>cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</code>  下面<strong>-j</strong>后面的48是cpu核数（指定编译核数）<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">make</span> -j48 bzImage</div><div class=\"line\"><span class=\"built_in\">make</span> -j48 modules</div><div class=\"line\"><span class=\"built_in\">make</span> -j48 modules_install</div><div class=\"line\"><span class=\"built_in\">make</span> install</div></pre></td></tr></table></figure></p>\n<p>安装完成后<br><code>vi /etc/grub.conf</code><br> 看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为<strong>default=0</strong>，第二段为<strong>default=1</strong></p>\n<p>例如:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#boot=/dev/sdb</div><div class=\"line\"><span class=\"section\">default</span>=<span class=\"number\">0</span></div><div class=\"line\">timeout=<span class=\"number\">5</span></div><div class=\"line\">splashimage=(hd0,<span class=\"number\">0</span>)/grub/splash.xpm.gz</div><div class=\"line\">hiddenmenu</div><div class=\"line\">title CentOS (<span class=\"number\">3.10</span><span class=\"number\">.28</span>)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-3.10</span><span class=\"number\">.28</span> ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-3.10</span><span class=\"number\">.28</span>.img</div><div class=\"line\">title CentOS (<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64 ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64.img</div><div class=\"line\">title CentOS <span class=\"number\">6</span> (<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64 ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64.img</div></pre></td></tr></table></figure></p>\n<p><code>reboot</code><br><code>uname -r</code>   查看内核版本</p>\n","excerpt":"","more":"<h1 id=\"内核升级：\"><a href=\"#内核升级：\" class=\"headerlink\" title=\"内核升级：\"></a>内核升级：</h1><p>【内核版本 <a href=\"https://www.kernel.org/】\">https://www.kernel.org/】</a><br>参考：<a href=\"http://blog.csdn.net/taiyang1987912/article/details/42744019\">http://blog.csdn.net/taiyang1987912/article/details/42744019</a><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install ncurses-devel -y</div><div class=\"line\">yum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel -y</div><div class=\"line\">wget  https:<span class=\"comment\">//www.kernel.org/pub/linux/kernel/v3.x/linux-3.10.28.tar.xz     </span></div><div class=\"line\">tar -xf linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\">mv linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span> /usr/src/</div><div class=\"line\">cd /usr/src/linux-<span class=\"number\">3.10</span>.<span class=\"number\">28</span>/</div><div class=\"line\">cp /boot/config-<span class=\"number\">2.6</span>.<span class=\"number\">32</span>-<span class=\"number\">573</span><span class=\"selector-class\">.el6</span><span class=\"selector-class\">.x86_64</span> <span class=\"selector-class\">.config</span></div><div class=\"line\">sh -c <span class=\"string\">'yes \"\" | make oldconfig'</span></div><div class=\"line\">make oldconfig</div></pre></td></tr></table></figure></p>\n<p>cpu核数 <code>cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</code>  下面<strong>-j</strong>后面的48是cpu核数（指定编译核数）<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">make</span> -j48 bzImage</div><div class=\"line\"><span class=\"built_in\">make</span> -j48 modules</div><div class=\"line\"><span class=\"built_in\">make</span> -j48 modules_install</div><div class=\"line\"><span class=\"built_in\">make</span> install</div></pre></td></tr></table></figure></p>\n<p>安装完成后<br><code>vi /etc/grub.conf</code><br> 看新安装的内核在第几段，一般是在第一段，从0开始数看title CentOS (3.10.28) 在第一段为<strong>default=0</strong>，第二段为<strong>default=1</strong></p>\n<p>例如:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#boot=/dev/sdb</div><div class=\"line\"><span class=\"section\">default</span>=<span class=\"number\">0</span></div><div class=\"line\">timeout=<span class=\"number\">5</span></div><div class=\"line\">splashimage=(hd0,<span class=\"number\">0</span>)/grub/splash.xpm.gz</div><div class=\"line\">hiddenmenu</div><div class=\"line\">title CentOS (<span class=\"number\">3.10</span><span class=\"number\">.28</span>)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-3.10</span><span class=\"number\">.28</span> ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-3.10</span><span class=\"number\">.28</span>.img</div><div class=\"line\">title CentOS (<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64 ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-642.3</span><span class=\"number\">.1</span>.el6.x86_64.img</div><div class=\"line\">title CentOS <span class=\"number\">6</span> (<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64)</div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64 ro root=UUID=<span class=\"number\">28</span>fbaad8<span class=\"number\">-35</span>a6<span class=\"number\">-4348</span>-b1e0-bf204537f8b0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF<span class=\"number\">-8</span> rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class=\"line\">        initrd /initramfs<span class=\"number\">-2.6</span><span class=\"number\">.32</span><span class=\"number\">-573.</span>el6.x86_64.img</div></pre></td></tr></table></figure></p>\n<p><code>reboot</code><br><code>uname -r</code>   查看内核版本</p>\n"},{"title":"高并发系统之服务器降级","date":"2016-11-02T09:19:21.000Z","_content":"\n#### 网上看到的文章，摘录分享。\n\n\n​在开发高并发系统时有三把利器用来保护系统：**缓存、降级和限流**。之前已经有一些文章介绍过缓存和限流了。本文将详细聊聊降级。当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。本文将介绍一些笔者在实际工作中遇到的或见到过的一些降级方案供大家参考。\n \n**降级的最终目的是保证核心服务可用**，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。\n \n降级预案\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：\n\n**一般：**比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；\n\n**警告：**有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；\n\n**错误：**比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；\n严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\n \n降级按照是否自动化可分为：**自动开关降级和人工开关降级**。\n\n降级按照功能可分为：**读服务降级、写服务降级**。\n\n降级按照处于的系统层次可分为：**多级降级**。\n\n---\n \n降级的功能点主要从服务端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级：\n页面降级：在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅；\n\n* 页面片段降级：比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；\n页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；\n\n* 服务功能降级：比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可；\n\n* 读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；\n\n* 写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。\n爬虫降级：在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。\n \n* 自动开关降级\n自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。\n\n* 超时降级\n当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。\n \n之前总结过一些的文章《使用httpclient必须知道的参数设置及代码写法、存在的风险》和《dbcp配置及jdbc超时设置总结》。在实际场景用一定主要配置好超时时间和超时重试次数和机制。\n \n* 统计失败次数降级\n有时候依赖一些不稳定的API，比如调用外部机票服务，当失败调用次数达到一定阀值自动降级；然后通过异步线程去探测服务是否恢复了，则取消降级。\n \n* 故障降级\n比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。\n \n* 限流降级\n当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。\n \n* 人工开关降级\n在大促期间通过监控发现线上的一些服务存在问题，这个时候需要暂时将这些服务摘掉；还有有时候通过任务系统调用一些服务，但是服务依赖的数据库可能存在：网卡被打满了、挂掉了或者很多慢查询，此时需要暂停下任务系统让服务方进行处理；还有发现突然调用量太大，可能需要改变处理方式（比如同步转换为异步）；此时就可以使用开关来完成降级。开关可以存放到配置文件、存放到数据库、存放到Redis/ZooKeeper；如果不是存放在本地，可以定期同步开关数据（比如1秒同步一次）。然后通过判断某个KEY的值来决定是否降级。\n \n另外对于新开发的服务想上线进行灰度测试；但是不太确定该服务的逻辑是否正确，此时就需要设置开关，当新服务有问题可以通过开关切换回老服务。还有多机房服务，如果某个机房挂掉了，此时需要将一个机房的服务切到另一个机房，此时也可以通过开关完成切换。\n \n还有一些是因为功能问题需要暂时屏蔽掉某些功能，比如商品规格参数数据有问题，数据问题不能用回滚解决，此时需要开关控制降级。\n \n* 读服务降级\n对于读服务降级一般采用的策略有：暂时切换读（降级到读缓存、降级到走静态化）、暂时屏蔽读（屏蔽读入口、屏蔽某个读服务）。在《应用多级缓存模式支撑海量读服务》中曾经介绍过读服务，即接入层缓存-->应用层本地缓存-->分布式缓存-->RPC服务/DB，我们会在接入层、应用层设置开关，当分布式缓存、RPC服务/DB有问题自动降级为不调用。当然这种情况适用于对读一致性要求不高的场景。\n \n* 页面降级、页面片段降级、页面异步请求降级都是读服务降级，目的是丢卒保帅（比如因为这些服务也要使用核心资源、或者占了带宽影响到核心服务）或者因数据问题暂时屏蔽。\n \n还有一种是页面静态化场景：\n动态化降级为静态化：比如平时网站可以走动态化渲染商品详情页，但是到了大促来临之际可以将其切换为静态化来减少对核心资源的占用，而且可以提升性能；其他还有如列表页、首页、频道页都可以这么玩；可以通过一个程序定期的推送静态页到缓存或者生成到磁盘，出问题时直接切过去；\n静态化降级为动态化：比如当使用静态化来实现商品详情页架构时，平时使用静态化来提供服务，但是因为特殊原因静态化页面有问题了，需要暂时切换回动态化来保证服务正确性。\n \n**以上都保证出问题了有预案，用户还是可以使用网站，不影响用户购物。**\n \n* 写服务降级\n写服务在大多数场景下是不可降级的，不过可以通过一些迂回战术来解决问题。比如将同步操作转换为异步操作，或者限制写的量/比例。\n比如扣减库存一般这样操作：\n方案1：\n1、扣减DB库存，2、扣减成功后更新Redis中的库存；\n方案2：\n1、扣减Redis库存，2、同步扣减DB库存，如果扣减失败则回滚Redis库存；\n前两种方案非常依赖DB，假设此时DB性能跟不上则扣减库存就会遇到问题；因此我们可以想到方案3：\n1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为发送一条扣减DB库存的消息，然后异步进行DB库存扣减实现最终一致即可；\n这种方式发送扣减DB库存消息也可能成为瓶颈；这种情况我们可以考虑方案4：\n1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为写扣减DB库存消息到本机，然后本机通过异步进行DB库存扣减来实现最终一致性。\n \n也就是说正常情况可以同步扣减库存，在性能扛不住时降级为异步；另外如果是秒杀场景可以直接降级为异步，从而保护系统。还有如下单操作可以在大促时暂时降级将下单数据写入Redis，然后等峰值过去了再同步回DB，当然也有更好的解决方案，但是更复杂，不是本文的重点。\n还有如用户评价，如果评价量太大，也可以把评价从同步写降级为异步写。当然也可以对评价按钮进行按比例开放（比如一些人的看不到评价操作按钮）。比如评价成功后会发一些奖励，在必要的时候降级同步到异步。\n \n* 多级降级\n缓存是离用户最近越高效；而降级是离用户越近越能对系统保护的好。因为业务的复杂性导致越到后端QPS/TPS越低。\n \n* 页面JS降级开关：主要控制页面功能的降级，在页面中通过JS脚本部署功能降级开关，在适当时机开启/关闭开关。\n\n* 接入层降级开关：主要控制请求入口的降级，请求进入后会首先进入接入层，在接入层可以配置功能降级开关，可以根据实际情况进行自动/人工降级；这个可以参考《京东商品详情页服务闭环实践》，尤其在后端应用服务出问题时，通过接入层降级从而给应用服务有足够的时间恢复服务；\n应用层降级开关：主要控制业务的降级，在应用中配置相应的功能开关，根据实际业务情况进行自动/人工降级。\n\n\n原文：http://jinnianshilongnian.iteye.com/blog/2306477","source":"_posts/文章阅读/2016-11-02-高并发系统之服务器降级.md","raw":"---\ntitle: 高并发系统之服务器降级\ncategories:\n  - 文章阅读\ntags:\n  - 高并发系统之降级特技\ndate: 2016-11-02 17:19:21\n---\n\n#### 网上看到的文章，摘录分享。\n\n\n​在开发高并发系统时有三把利器用来保护系统：**缓存、降级和限流**。之前已经有一些文章介绍过缓存和限流了。本文将详细聊聊降级。当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。本文将介绍一些笔者在实际工作中遇到的或见到过的一些降级方案供大家参考。\n \n**降级的最终目的是保证核心服务可用**，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。\n \n降级预案\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：\n\n**一般：**比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；\n\n**警告：**有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；\n\n**错误：**比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；\n严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\n \n降级按照是否自动化可分为：**自动开关降级和人工开关降级**。\n\n降级按照功能可分为：**读服务降级、写服务降级**。\n\n降级按照处于的系统层次可分为：**多级降级**。\n\n---\n \n降级的功能点主要从服务端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级：\n页面降级：在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅；\n\n* 页面片段降级：比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；\n页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；\n\n* 服务功能降级：比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可；\n\n* 读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；\n\n* 写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。\n爬虫降级：在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。\n \n* 自动开关降级\n自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。\n\n* 超时降级\n当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。\n \n之前总结过一些的文章《使用httpclient必须知道的参数设置及代码写法、存在的风险》和《dbcp配置及jdbc超时设置总结》。在实际场景用一定主要配置好超时时间和超时重试次数和机制。\n \n* 统计失败次数降级\n有时候依赖一些不稳定的API，比如调用外部机票服务，当失败调用次数达到一定阀值自动降级；然后通过异步线程去探测服务是否恢复了，则取消降级。\n \n* 故障降级\n比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。\n \n* 限流降级\n当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。\n \n* 人工开关降级\n在大促期间通过监控发现线上的一些服务存在问题，这个时候需要暂时将这些服务摘掉；还有有时候通过任务系统调用一些服务，但是服务依赖的数据库可能存在：网卡被打满了、挂掉了或者很多慢查询，此时需要暂停下任务系统让服务方进行处理；还有发现突然调用量太大，可能需要改变处理方式（比如同步转换为异步）；此时就可以使用开关来完成降级。开关可以存放到配置文件、存放到数据库、存放到Redis/ZooKeeper；如果不是存放在本地，可以定期同步开关数据（比如1秒同步一次）。然后通过判断某个KEY的值来决定是否降级。\n \n另外对于新开发的服务想上线进行灰度测试；但是不太确定该服务的逻辑是否正确，此时就需要设置开关，当新服务有问题可以通过开关切换回老服务。还有多机房服务，如果某个机房挂掉了，此时需要将一个机房的服务切到另一个机房，此时也可以通过开关完成切换。\n \n还有一些是因为功能问题需要暂时屏蔽掉某些功能，比如商品规格参数数据有问题，数据问题不能用回滚解决，此时需要开关控制降级。\n \n* 读服务降级\n对于读服务降级一般采用的策略有：暂时切换读（降级到读缓存、降级到走静态化）、暂时屏蔽读（屏蔽读入口、屏蔽某个读服务）。在《应用多级缓存模式支撑海量读服务》中曾经介绍过读服务，即接入层缓存-->应用层本地缓存-->分布式缓存-->RPC服务/DB，我们会在接入层、应用层设置开关，当分布式缓存、RPC服务/DB有问题自动降级为不调用。当然这种情况适用于对读一致性要求不高的场景。\n \n* 页面降级、页面片段降级、页面异步请求降级都是读服务降级，目的是丢卒保帅（比如因为这些服务也要使用核心资源、或者占了带宽影响到核心服务）或者因数据问题暂时屏蔽。\n \n还有一种是页面静态化场景：\n动态化降级为静态化：比如平时网站可以走动态化渲染商品详情页，但是到了大促来临之际可以将其切换为静态化来减少对核心资源的占用，而且可以提升性能；其他还有如列表页、首页、频道页都可以这么玩；可以通过一个程序定期的推送静态页到缓存或者生成到磁盘，出问题时直接切过去；\n静态化降级为动态化：比如当使用静态化来实现商品详情页架构时，平时使用静态化来提供服务，但是因为特殊原因静态化页面有问题了，需要暂时切换回动态化来保证服务正确性。\n \n**以上都保证出问题了有预案，用户还是可以使用网站，不影响用户购物。**\n \n* 写服务降级\n写服务在大多数场景下是不可降级的，不过可以通过一些迂回战术来解决问题。比如将同步操作转换为异步操作，或者限制写的量/比例。\n比如扣减库存一般这样操作：\n方案1：\n1、扣减DB库存，2、扣减成功后更新Redis中的库存；\n方案2：\n1、扣减Redis库存，2、同步扣减DB库存，如果扣减失败则回滚Redis库存；\n前两种方案非常依赖DB，假设此时DB性能跟不上则扣减库存就会遇到问题；因此我们可以想到方案3：\n1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为发送一条扣减DB库存的消息，然后异步进行DB库存扣减实现最终一致即可；\n这种方式发送扣减DB库存消息也可能成为瓶颈；这种情况我们可以考虑方案4：\n1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为写扣减DB库存消息到本机，然后本机通过异步进行DB库存扣减来实现最终一致性。\n \n也就是说正常情况可以同步扣减库存，在性能扛不住时降级为异步；另外如果是秒杀场景可以直接降级为异步，从而保护系统。还有如下单操作可以在大促时暂时降级将下单数据写入Redis，然后等峰值过去了再同步回DB，当然也有更好的解决方案，但是更复杂，不是本文的重点。\n还有如用户评价，如果评价量太大，也可以把评价从同步写降级为异步写。当然也可以对评价按钮进行按比例开放（比如一些人的看不到评价操作按钮）。比如评价成功后会发一些奖励，在必要的时候降级同步到异步。\n \n* 多级降级\n缓存是离用户最近越高效；而降级是离用户越近越能对系统保护的好。因为业务的复杂性导致越到后端QPS/TPS越低。\n \n* 页面JS降级开关：主要控制页面功能的降级，在页面中通过JS脚本部署功能降级开关，在适当时机开启/关闭开关。\n\n* 接入层降级开关：主要控制请求入口的降级，请求进入后会首先进入接入层，在接入层可以配置功能降级开关，可以根据实际情况进行自动/人工降级；这个可以参考《京东商品详情页服务闭环实践》，尤其在后端应用服务出问题时，通过接入层降级从而给应用服务有足够的时间恢复服务；\n应用层降级开关：主要控制业务的降级，在应用中配置相应的功能开关，根据实际业务情况进行自动/人工降级。\n\n\n原文：http://jinnianshilongnian.iteye.com/blog/2306477","slug":"文章阅读-2016-11-02-高并发系统之服务器降级","published":1,"updated":"2016-11-02T09:26:22.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnuu001f0gpke52jtgg1","content":"<h4 id=\"网上看到的文章，摘录分享。\"><a href=\"#网上看到的文章，摘录分享。\" class=\"headerlink\" title=\"网上看到的文章，摘录分享。\"></a>网上看到的文章，摘录分享。</h4><p>​在开发高并发系统时有三把利器用来保护系统：<strong>缓存、降级和限流</strong>。之前已经有一些文章介绍过缓存和限流了。本文将详细聊聊降级。当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。本文将介绍一些笔者在实际工作中遇到的或见到过的一些降级方案供大家参考。</p>\n<p><strong>降级的最终目的是保证核心服务可用</strong>，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p>\n<p>降级预案<br>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p>\n<p><strong>一般：</strong>比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p>\n<p><strong>警告：</strong>有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p>\n<p><strong>错误：</strong>比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；<br>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p>\n<p>降级按照是否自动化可分为：<strong>自动开关降级和人工开关降级</strong>。</p>\n<p>降级按照功能可分为：<strong>读服务降级、写服务降级</strong>。</p>\n<p>降级按照处于的系统层次可分为：<strong>多级降级</strong>。</p>\n<hr>\n<p>降级的功能点主要从服务端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级：<br>页面降级：在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅；</p>\n<ul>\n<li><p>页面片段降级：比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；<br>页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</p>\n</li>\n<li><p>服务功能降级：比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可；</p>\n</li>\n<li><p>读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；</p>\n</li>\n<li><p>写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。<br>爬虫降级：在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。</p>\n</li>\n<li><p>自动开关降级<br>自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。</p>\n</li>\n<li><p>超时降级<br>当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。</p>\n</li>\n</ul>\n<p>之前总结过一些的文章《使用httpclient必须知道的参数设置及代码写法、存在的风险》和《dbcp配置及jdbc超时设置总结》。在实际场景用一定主要配置好超时时间和超时重试次数和机制。</p>\n<ul>\n<li><p>统计失败次数降级<br>有时候依赖一些不稳定的API，比如调用外部机票服务，当失败调用次数达到一定阀值自动降级；然后通过异步线程去探测服务是否恢复了，则取消降级。</p>\n</li>\n<li><p>故障降级<br>比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。</p>\n</li>\n<li><p>限流降级<br>当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p>\n</li>\n<li><p>人工开关降级<br>在大促期间通过监控发现线上的一些服务存在问题，这个时候需要暂时将这些服务摘掉；还有有时候通过任务系统调用一些服务，但是服务依赖的数据库可能存在：网卡被打满了、挂掉了或者很多慢查询，此时需要暂停下任务系统让服务方进行处理；还有发现突然调用量太大，可能需要改变处理方式（比如同步转换为异步）；此时就可以使用开关来完成降级。开关可以存放到配置文件、存放到数据库、存放到Redis/ZooKeeper；如果不是存放在本地，可以定期同步开关数据（比如1秒同步一次）。然后通过判断某个KEY的值来决定是否降级。</p>\n</li>\n</ul>\n<p>另外对于新开发的服务想上线进行灰度测试；但是不太确定该服务的逻辑是否正确，此时就需要设置开关，当新服务有问题可以通过开关切换回老服务。还有多机房服务，如果某个机房挂掉了，此时需要将一个机房的服务切到另一个机房，此时也可以通过开关完成切换。</p>\n<p>还有一些是因为功能问题需要暂时屏蔽掉某些功能，比如商品规格参数数据有问题，数据问题不能用回滚解决，此时需要开关控制降级。</p>\n<ul>\n<li><p>读服务降级<br>对于读服务降级一般采用的策略有：暂时切换读（降级到读缓存、降级到走静态化）、暂时屏蔽读（屏蔽读入口、屏蔽某个读服务）。在《应用多级缓存模式支撑海量读服务》中曾经介绍过读服务，即接入层缓存–&gt;应用层本地缓存–&gt;分布式缓存–&gt;RPC服务/DB，我们会在接入层、应用层设置开关，当分布式缓存、RPC服务/DB有问题自动降级为不调用。当然这种情况适用于对读一致性要求不高的场景。</p>\n</li>\n<li><p>页面降级、页面片段降级、页面异步请求降级都是读服务降级，目的是丢卒保帅（比如因为这些服务也要使用核心资源、或者占了带宽影响到核心服务）或者因数据问题暂时屏蔽。</p>\n</li>\n</ul>\n<p>还有一种是页面静态化场景：<br>动态化降级为静态化：比如平时网站可以走动态化渲染商品详情页，但是到了大促来临之际可以将其切换为静态化来减少对核心资源的占用，而且可以提升性能；其他还有如列表页、首页、频道页都可以这么玩；可以通过一个程序定期的推送静态页到缓存或者生成到磁盘，出问题时直接切过去；<br>静态化降级为动态化：比如当使用静态化来实现商品详情页架构时，平时使用静态化来提供服务，但是因为特殊原因静态化页面有问题了，需要暂时切换回动态化来保证服务正确性。</p>\n<p><strong>以上都保证出问题了有预案，用户还是可以使用网站，不影响用户购物。</strong></p>\n<ul>\n<li>写服务降级<br>写服务在大多数场景下是不可降级的，不过可以通过一些迂回战术来解决问题。比如将同步操作转换为异步操作，或者限制写的量/比例。<br>比如扣减库存一般这样操作：<br>方案1：<br>1、扣减DB库存，2、扣减成功后更新Redis中的库存；<br>方案2：<br>1、扣减Redis库存，2、同步扣减DB库存，如果扣减失败则回滚Redis库存；<br>前两种方案非常依赖DB，假设此时DB性能跟不上则扣减库存就会遇到问题；因此我们可以想到方案3：<br>1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为发送一条扣减DB库存的消息，然后异步进行DB库存扣减实现最终一致即可；<br>这种方式发送扣减DB库存消息也可能成为瓶颈；这种情况我们可以考虑方案4：<br>1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为写扣减DB库存消息到本机，然后本机通过异步进行DB库存扣减来实现最终一致性。</li>\n</ul>\n<p>也就是说正常情况可以同步扣减库存，在性能扛不住时降级为异步；另外如果是秒杀场景可以直接降级为异步，从而保护系统。还有如下单操作可以在大促时暂时降级将下单数据写入Redis，然后等峰值过去了再同步回DB，当然也有更好的解决方案，但是更复杂，不是本文的重点。<br>还有如用户评价，如果评价量太大，也可以把评价从同步写降级为异步写。当然也可以对评价按钮进行按比例开放（比如一些人的看不到评价操作按钮）。比如评价成功后会发一些奖励，在必要的时候降级同步到异步。</p>\n<ul>\n<li><p>多级降级<br>缓存是离用户最近越高效；而降级是离用户越近越能对系统保护的好。因为业务的复杂性导致越到后端QPS/TPS越低。</p>\n</li>\n<li><p>页面JS降级开关：主要控制页面功能的降级，在页面中通过JS脚本部署功能降级开关，在适当时机开启/关闭开关。</p>\n</li>\n<li><p>接入层降级开关：主要控制请求入口的降级，请求进入后会首先进入接入层，在接入层可以配置功能降级开关，可以根据实际情况进行自动/人工降级；这个可以参考《京东商品详情页服务闭环实践》，尤其在后端应用服务出问题时，通过接入层降级从而给应用服务有足够的时间恢复服务；<br>应用层降级开关：主要控制业务的降级，在应用中配置相应的功能开关，根据实际业务情况进行自动/人工降级。</p>\n</li>\n</ul>\n<p>原文：<a href=\"http://jinnianshilongnian.iteye.com/blog/2306477\" target=\"_blank\" rel=\"external\">http://jinnianshilongnian.iteye.com/blog/2306477</a></p>\n","excerpt":"","more":"<h4 id=\"网上看到的文章，摘录分享。\"><a href=\"#网上看到的文章，摘录分享。\" class=\"headerlink\" title=\"网上看到的文章，摘录分享。\"></a>网上看到的文章，摘录分享。</h4><p>​在开发高并发系统时有三把利器用来保护系统：<strong>缓存、降级和限流</strong>。之前已经有一些文章介绍过缓存和限流了。本文将详细聊聊降级。当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。本文将介绍一些笔者在实际工作中遇到的或见到过的一些降级方案供大家参考。</p>\n<p><strong>降级的最终目的是保证核心服务可用</strong>，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p>\n<p>降级预案<br>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p>\n<p><strong>一般：</strong>比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p>\n<p><strong>警告：</strong>有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p>\n<p><strong>错误：</strong>比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；<br>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p>\n<p>降级按照是否自动化可分为：<strong>自动开关降级和人工开关降级</strong>。</p>\n<p>降级按照功能可分为：<strong>读服务降级、写服务降级</strong>。</p>\n<p>降级按照处于的系统层次可分为：<strong>多级降级</strong>。</p>\n<hr>\n<p>降级的功能点主要从服务端链路考虑，即根据用户访问的服务调用链路来梳理哪里需要降级：<br>页面降级：在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅；</p>\n<ul>\n<li><p>页面片段降级：比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；<br>页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</p>\n</li>\n<li><p>服务功能降级：比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可；</p>\n</li>\n<li><p>读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；</p>\n</li>\n<li><p>写降级：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。<br>爬虫降级：在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。</p>\n</li>\n<li><p>自动开关降级<br>自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。</p>\n</li>\n<li><p>超时降级<br>当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。</p>\n</li>\n</ul>\n<p>之前总结过一些的文章《使用httpclient必须知道的参数设置及代码写法、存在的风险》和《dbcp配置及jdbc超时设置总结》。在实际场景用一定主要配置好超时时间和超时重试次数和机制。</p>\n<ul>\n<li><p>统计失败次数降级<br>有时候依赖一些不稳定的API，比如调用外部机票服务，当失败调用次数达到一定阀值自动降级；然后通过异步线程去探测服务是否恢复了，则取消降级。</p>\n</li>\n<li><p>故障降级<br>比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。</p>\n</li>\n<li><p>限流降级<br>当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p>\n</li>\n<li><p>人工开关降级<br>在大促期间通过监控发现线上的一些服务存在问题，这个时候需要暂时将这些服务摘掉；还有有时候通过任务系统调用一些服务，但是服务依赖的数据库可能存在：网卡被打满了、挂掉了或者很多慢查询，此时需要暂停下任务系统让服务方进行处理；还有发现突然调用量太大，可能需要改变处理方式（比如同步转换为异步）；此时就可以使用开关来完成降级。开关可以存放到配置文件、存放到数据库、存放到Redis/ZooKeeper；如果不是存放在本地，可以定期同步开关数据（比如1秒同步一次）。然后通过判断某个KEY的值来决定是否降级。</p>\n</li>\n</ul>\n<p>另外对于新开发的服务想上线进行灰度测试；但是不太确定该服务的逻辑是否正确，此时就需要设置开关，当新服务有问题可以通过开关切换回老服务。还有多机房服务，如果某个机房挂掉了，此时需要将一个机房的服务切到另一个机房，此时也可以通过开关完成切换。</p>\n<p>还有一些是因为功能问题需要暂时屏蔽掉某些功能，比如商品规格参数数据有问题，数据问题不能用回滚解决，此时需要开关控制降级。</p>\n<ul>\n<li><p>读服务降级<br>对于读服务降级一般采用的策略有：暂时切换读（降级到读缓存、降级到走静态化）、暂时屏蔽读（屏蔽读入口、屏蔽某个读服务）。在《应用多级缓存模式支撑海量读服务》中曾经介绍过读服务，即接入层缓存–&gt;应用层本地缓存–&gt;分布式缓存–&gt;RPC服务/DB，我们会在接入层、应用层设置开关，当分布式缓存、RPC服务/DB有问题自动降级为不调用。当然这种情况适用于对读一致性要求不高的场景。</p>\n</li>\n<li><p>页面降级、页面片段降级、页面异步请求降级都是读服务降级，目的是丢卒保帅（比如因为这些服务也要使用核心资源、或者占了带宽影响到核心服务）或者因数据问题暂时屏蔽。</p>\n</li>\n</ul>\n<p>还有一种是页面静态化场景：<br>动态化降级为静态化：比如平时网站可以走动态化渲染商品详情页，但是到了大促来临之际可以将其切换为静态化来减少对核心资源的占用，而且可以提升性能；其他还有如列表页、首页、频道页都可以这么玩；可以通过一个程序定期的推送静态页到缓存或者生成到磁盘，出问题时直接切过去；<br>静态化降级为动态化：比如当使用静态化来实现商品详情页架构时，平时使用静态化来提供服务，但是因为特殊原因静态化页面有问题了，需要暂时切换回动态化来保证服务正确性。</p>\n<p><strong>以上都保证出问题了有预案，用户还是可以使用网站，不影响用户购物。</strong></p>\n<ul>\n<li>写服务降级<br>写服务在大多数场景下是不可降级的，不过可以通过一些迂回战术来解决问题。比如将同步操作转换为异步操作，或者限制写的量/比例。<br>比如扣减库存一般这样操作：<br>方案1：<br>1、扣减DB库存，2、扣减成功后更新Redis中的库存；<br>方案2：<br>1、扣减Redis库存，2、同步扣减DB库存，如果扣减失败则回滚Redis库存；<br>前两种方案非常依赖DB，假设此时DB性能跟不上则扣减库存就会遇到问题；因此我们可以想到方案3：<br>1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为发送一条扣减DB库存的消息，然后异步进行DB库存扣减实现最终一致即可；<br>这种方式发送扣减DB库存消息也可能成为瓶颈；这种情况我们可以考虑方案4：<br>1、扣减Redis库存，2、正常同步扣减DB库存，性能扛不住时降级为写扣减DB库存消息到本机，然后本机通过异步进行DB库存扣减来实现最终一致性。</li>\n</ul>\n<p>也就是说正常情况可以同步扣减库存，在性能扛不住时降级为异步；另外如果是秒杀场景可以直接降级为异步，从而保护系统。还有如下单操作可以在大促时暂时降级将下单数据写入Redis，然后等峰值过去了再同步回DB，当然也有更好的解决方案，但是更复杂，不是本文的重点。<br>还有如用户评价，如果评价量太大，也可以把评价从同步写降级为异步写。当然也可以对评价按钮进行按比例开放（比如一些人的看不到评价操作按钮）。比如评价成功后会发一些奖励，在必要的时候降级同步到异步。</p>\n<ul>\n<li><p>多级降级<br>缓存是离用户最近越高效；而降级是离用户越近越能对系统保护的好。因为业务的复杂性导致越到后端QPS/TPS越低。</p>\n</li>\n<li><p>页面JS降级开关：主要控制页面功能的降级，在页面中通过JS脚本部署功能降级开关，在适当时机开启/关闭开关。</p>\n</li>\n<li><p>接入层降级开关：主要控制请求入口的降级，请求进入后会首先进入接入层，在接入层可以配置功能降级开关，可以根据实际情况进行自动/人工降级；这个可以参考《京东商品详情页服务闭环实践》，尤其在后端应用服务出问题时，通过接入层降级从而给应用服务有足够的时间恢复服务；<br>应用层降级开关：主要控制业务的降级，在应用中配置相应的功能开关，根据实际业务情况进行自动/人工降级。</p>\n</li>\n</ul>\n<p>原文：<a href=\"http://jinnianshilongnian.iteye.com/blog/2306477\">http://jinnianshilongnian.iteye.com/blog/2306477</a></p>\n"},{"title":"程序员怎样才能找到一个靠谱的创业公司","date":"2016-11-02T06:32:40.000Z","_content":"\n### 推酷上看到的一篇文网文，摘录学习\n\n#### 项目前景\n面试公司之前，要首先从网上搜集该公司有关的新闻和资料，大致了解一下公司所做的项目，面试的时候和经理深入探讨一下关于产品项目的想法，以便更全面的有个大概的了解。项目是一个公司的内在核心，产品是公司的孩子，代表着公司的前景和未来。根据当前互联网的大环境和未来发展以及当下的用户市场来诊断一下该公司的核心产品项目的前途，以及是否是你感兴趣的方向。如果你感觉没有前景，而且又不是你感兴趣的方向，建议不要选择，一个合适的环境和项目才能促进你提高。\n当然，如果你仅仅考虑的是当下为了挣钱，而不是自己的兴趣爱好，那如果你感觉该公司项目产品有市场前景，有钱途，但是又没有自己的主见和兴趣，那你可以选择这家公司。没有前景的项目公司建议大家慎重选择，毕竟融资困难，最后有可能发不出工资来。你可能会说，我们怎么能判断准确？是的，并不是每个人都能判断准确，投资人都叫风投，风险投资，所有的选择都是有风险的，这需要自己平时多关心互联网的发展和未来的方向，以及一些热点，扩展自己的一些知识量和阅历，使自己判断能力的准确度更高，仅此而已。\n#### CEO的魅力\n我这里把CEO的魅力分为两个：一是领导力，二是执行力。这是一个优秀的CEO必不可少的素质。\n这里的领导力，我暂时定义为以下几点：广阔视野，分析思维，概念思维，真知灼见，知人善任，卓越领导，影响他人，相信自己。前面的几点视野，思维，灼见，这些能力，可以使CEO能够准确的判断市场和未来，带着公司稳步的走向未来，发展更好。后面的知人善任，卓越领导，影响他人，相信自己，才能能够使创业团队更加团结稳定，使大家更加信服的追随他。对于影响他人，我们不求每个CEO都像乔布斯一样，具有现实扭曲力场的能力，最起码能够让他人和你观点不会冲突，这样才能领到团队，团结一心。\n关于执行力，我想说这里的执行力我更加偏向与作为一个公司的领导，他的承诺的执行力，而不是整天那股权和期权忽悠创业团队，说公司上市了大家都是元老，都会有股份或者期权。整天那摸不着，看不见的东西忽悠大家拼命给他干活的CEO不是一个让人信服的人，让团队没有安全感。记住：画大饼谁都会，让你能吃到的CEO不多见。从创业起，融到资金后，整天自己抱着钱，不顾员工利益的CEO,即使将来创业成功，他也不会让你知道饼是啥味。记住：口头承诺不如白纸黑字。\n如果你去的公司，在工作了几个月之后，发现公司的CEO没有领导力，也没有执行力，果断劝你们赶紧给自己找下家和后路，否则……后果自负。\n#### 管理团队\n刚才我们谈到了CEO的魅力问题，CEO影响着管理团队的团结和战斗力。如果一个CEO和管理团队因为期权、股权问题，还有对于公司的战略规划上有分歧，整天勾心斗角，明面上精致团结或者矛盾隐私化，暗地里暗度陈仓，这样的公司是没有任何战斗力和前景的。\n如果你所在的公司，你发现了有这样的苗头或者征兆，甚至已经正在发生，内部管理团队不和的现象，建议你们慎重选择，或者尽早离职。所谓上身不正下身外，管理团队把心思都放在了勾心头角上，哪有心力去按照既定的战略规划去安心，用心经营项目和产品啊。\n#### 技术团队\n有些创业公司号称是产品驱动型的，还有什么运营驱动型，用户驱动型，当然还有技术驱动型的公司，不管什么驱动型的公司，归根结底得有自己的产品，做产品就得需要技术，所以一个公司技术的重要性不言而喻，尤其是创业公司前期，产品未获得市场认可之前，技术尤为重要。一个好的技术团队可以成就一个好的产品的同时，更能够提高技术团队内程序员的技术水平。如果技术团队能力不强，你认为公司的产品性能，体验，交互会好吗？交互体验是用户使用产品最直观的感受。一个成功的产品需要强大的运营，需要市场的认可，更需要技术的提高和优化。\n如果你去的公司技术团队技术能力不强，你在里面学不到东西，一直在用自己之前学到的陈旧技术，那还是别呆在哪里了，提高技术最好的方法就是：勇于挑战自己不会的东西。作为技术型的人员，切记不要自己待在一个舒适区太久，会让你变得懒惰，落后，甚至淘汰，要向温水煮青蛙一样，我们要适度的学会跳出舒适区，去挑战自己。\n#### 总结\n当然，你看到这里可能会对比自己的处境，感觉完全达到以上几点要求的创业公司太少了，是人在一起就会磕磕绊绊，当然，这是肯定的，但是如果你待在的那个公司触犯了上面的两条及以上，我还是建议你要重新选择或者离职，去找更好的公司。这仅仅是我个人的观点，可以参考，也可以不认同，我只是用经验告诉大家以后小心上当。我为什么把项目前景和CEO的魅力放在前两位呢，因为如果你工作的那个公司，这两点都做到了，后面管理团队和技术团队也差不到哪里去。\n记住：路是自己走出来的，路更是自己选择的。我们不要做一个敢于跳槽的程序员，而是要做一个不害怕跳槽的程序员。你们懂我的意思吧？我相信大家都懂。\n\n\n\n \n","source":"_posts/文章阅读/2016-11-02-程序员怎样才能找到一个靠谱的创业公司.md","raw":"---\ntitle: 程序员怎样才能找到一个靠谱的创业公司\ncategories:\n  - 文章阅读\ntags:\n  - 创业的公司\ndate: 2016-11-02 14:32:40\n---\n\n### 推酷上看到的一篇文网文，摘录学习\n\n#### 项目前景\n面试公司之前，要首先从网上搜集该公司有关的新闻和资料，大致了解一下公司所做的项目，面试的时候和经理深入探讨一下关于产品项目的想法，以便更全面的有个大概的了解。项目是一个公司的内在核心，产品是公司的孩子，代表着公司的前景和未来。根据当前互联网的大环境和未来发展以及当下的用户市场来诊断一下该公司的核心产品项目的前途，以及是否是你感兴趣的方向。如果你感觉没有前景，而且又不是你感兴趣的方向，建议不要选择，一个合适的环境和项目才能促进你提高。\n当然，如果你仅仅考虑的是当下为了挣钱，而不是自己的兴趣爱好，那如果你感觉该公司项目产品有市场前景，有钱途，但是又没有自己的主见和兴趣，那你可以选择这家公司。没有前景的项目公司建议大家慎重选择，毕竟融资困难，最后有可能发不出工资来。你可能会说，我们怎么能判断准确？是的，并不是每个人都能判断准确，投资人都叫风投，风险投资，所有的选择都是有风险的，这需要自己平时多关心互联网的发展和未来的方向，以及一些热点，扩展自己的一些知识量和阅历，使自己判断能力的准确度更高，仅此而已。\n#### CEO的魅力\n我这里把CEO的魅力分为两个：一是领导力，二是执行力。这是一个优秀的CEO必不可少的素质。\n这里的领导力，我暂时定义为以下几点：广阔视野，分析思维，概念思维，真知灼见，知人善任，卓越领导，影响他人，相信自己。前面的几点视野，思维，灼见，这些能力，可以使CEO能够准确的判断市场和未来，带着公司稳步的走向未来，发展更好。后面的知人善任，卓越领导，影响他人，相信自己，才能能够使创业团队更加团结稳定，使大家更加信服的追随他。对于影响他人，我们不求每个CEO都像乔布斯一样，具有现实扭曲力场的能力，最起码能够让他人和你观点不会冲突，这样才能领到团队，团结一心。\n关于执行力，我想说这里的执行力我更加偏向与作为一个公司的领导，他的承诺的执行力，而不是整天那股权和期权忽悠创业团队，说公司上市了大家都是元老，都会有股份或者期权。整天那摸不着，看不见的东西忽悠大家拼命给他干活的CEO不是一个让人信服的人，让团队没有安全感。记住：画大饼谁都会，让你能吃到的CEO不多见。从创业起，融到资金后，整天自己抱着钱，不顾员工利益的CEO,即使将来创业成功，他也不会让你知道饼是啥味。记住：口头承诺不如白纸黑字。\n如果你去的公司，在工作了几个月之后，发现公司的CEO没有领导力，也没有执行力，果断劝你们赶紧给自己找下家和后路，否则……后果自负。\n#### 管理团队\n刚才我们谈到了CEO的魅力问题，CEO影响着管理团队的团结和战斗力。如果一个CEO和管理团队因为期权、股权问题，还有对于公司的战略规划上有分歧，整天勾心斗角，明面上精致团结或者矛盾隐私化，暗地里暗度陈仓，这样的公司是没有任何战斗力和前景的。\n如果你所在的公司，你发现了有这样的苗头或者征兆，甚至已经正在发生，内部管理团队不和的现象，建议你们慎重选择，或者尽早离职。所谓上身不正下身外，管理团队把心思都放在了勾心头角上，哪有心力去按照既定的战略规划去安心，用心经营项目和产品啊。\n#### 技术团队\n有些创业公司号称是产品驱动型的，还有什么运营驱动型，用户驱动型，当然还有技术驱动型的公司，不管什么驱动型的公司，归根结底得有自己的产品，做产品就得需要技术，所以一个公司技术的重要性不言而喻，尤其是创业公司前期，产品未获得市场认可之前，技术尤为重要。一个好的技术团队可以成就一个好的产品的同时，更能够提高技术团队内程序员的技术水平。如果技术团队能力不强，你认为公司的产品性能，体验，交互会好吗？交互体验是用户使用产品最直观的感受。一个成功的产品需要强大的运营，需要市场的认可，更需要技术的提高和优化。\n如果你去的公司技术团队技术能力不强，你在里面学不到东西，一直在用自己之前学到的陈旧技术，那还是别呆在哪里了，提高技术最好的方法就是：勇于挑战自己不会的东西。作为技术型的人员，切记不要自己待在一个舒适区太久，会让你变得懒惰，落后，甚至淘汰，要向温水煮青蛙一样，我们要适度的学会跳出舒适区，去挑战自己。\n#### 总结\n当然，你看到这里可能会对比自己的处境，感觉完全达到以上几点要求的创业公司太少了，是人在一起就会磕磕绊绊，当然，这是肯定的，但是如果你待在的那个公司触犯了上面的两条及以上，我还是建议你要重新选择或者离职，去找更好的公司。这仅仅是我个人的观点，可以参考，也可以不认同，我只是用经验告诉大家以后小心上当。我为什么把项目前景和CEO的魅力放在前两位呢，因为如果你工作的那个公司，这两点都做到了，后面管理团队和技术团队也差不到哪里去。\n记住：路是自己走出来的，路更是自己选择的。我们不要做一个敢于跳槽的程序员，而是要做一个不害怕跳槽的程序员。你们懂我的意思吧？我相信大家都懂。\n\n\n\n \n","slug":"文章阅读-2016-11-02-程序员怎样才能找到一个靠谱的创业公司","published":1,"updated":"2016-11-02T06:35:34.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnuu001i0gpk2xhah9iu","content":"<h3 id=\"推酷上看到的一篇文网文，摘录学习\"><a href=\"#推酷上看到的一篇文网文，摘录学习\" class=\"headerlink\" title=\"推酷上看到的一篇文网文，摘录学习\"></a>推酷上看到的一篇文网文，摘录学习</h3><h4 id=\"项目前景\"><a href=\"#项目前景\" class=\"headerlink\" title=\"项目前景\"></a>项目前景</h4><p>面试公司之前，要首先从网上搜集该公司有关的新闻和资料，大致了解一下公司所做的项目，面试的时候和经理深入探讨一下关于产品项目的想法，以便更全面的有个大概的了解。项目是一个公司的内在核心，产品是公司的孩子，代表着公司的前景和未来。根据当前互联网的大环境和未来发展以及当下的用户市场来诊断一下该公司的核心产品项目的前途，以及是否是你感兴趣的方向。如果你感觉没有前景，而且又不是你感兴趣的方向，建议不要选择，一个合适的环境和项目才能促进你提高。<br>当然，如果你仅仅考虑的是当下为了挣钱，而不是自己的兴趣爱好，那如果你感觉该公司项目产品有市场前景，有钱途，但是又没有自己的主见和兴趣，那你可以选择这家公司。没有前景的项目公司建议大家慎重选择，毕竟融资困难，最后有可能发不出工资来。你可能会说，我们怎么能判断准确？是的，并不是每个人都能判断准确，投资人都叫风投，风险投资，所有的选择都是有风险的，这需要自己平时多关心互联网的发展和未来的方向，以及一些热点，扩展自己的一些知识量和阅历，使自己判断能力的准确度更高，仅此而已。</p>\n<h4 id=\"CEO的魅力\"><a href=\"#CEO的魅力\" class=\"headerlink\" title=\"CEO的魅力\"></a>CEO的魅力</h4><p>我这里把CEO的魅力分为两个：一是领导力，二是执行力。这是一个优秀的CEO必不可少的素质。<br>这里的领导力，我暂时定义为以下几点：广阔视野，分析思维，概念思维，真知灼见，知人善任，卓越领导，影响他人，相信自己。前面的几点视野，思维，灼见，这些能力，可以使CEO能够准确的判断市场和未来，带着公司稳步的走向未来，发展更好。后面的知人善任，卓越领导，影响他人，相信自己，才能能够使创业团队更加团结稳定，使大家更加信服的追随他。对于影响他人，我们不求每个CEO都像乔布斯一样，具有现实扭曲力场的能力，最起码能够让他人和你观点不会冲突，这样才能领到团队，团结一心。<br>关于执行力，我想说这里的执行力我更加偏向与作为一个公司的领导，他的承诺的执行力，而不是整天那股权和期权忽悠创业团队，说公司上市了大家都是元老，都会有股份或者期权。整天那摸不着，看不见的东西忽悠大家拼命给他干活的CEO不是一个让人信服的人，让团队没有安全感。记住：画大饼谁都会，让你能吃到的CEO不多见。从创业起，融到资金后，整天自己抱着钱，不顾员工利益的CEO,即使将来创业成功，他也不会让你知道饼是啥味。记住：口头承诺不如白纸黑字。<br>如果你去的公司，在工作了几个月之后，发现公司的CEO没有领导力，也没有执行力，果断劝你们赶紧给自己找下家和后路，否则……后果自负。</p>\n<h4 id=\"管理团队\"><a href=\"#管理团队\" class=\"headerlink\" title=\"管理团队\"></a>管理团队</h4><p>刚才我们谈到了CEO的魅力问题，CEO影响着管理团队的团结和战斗力。如果一个CEO和管理团队因为期权、股权问题，还有对于公司的战略规划上有分歧，整天勾心斗角，明面上精致团结或者矛盾隐私化，暗地里暗度陈仓，这样的公司是没有任何战斗力和前景的。<br>如果你所在的公司，你发现了有这样的苗头或者征兆，甚至已经正在发生，内部管理团队不和的现象，建议你们慎重选择，或者尽早离职。所谓上身不正下身外，管理团队把心思都放在了勾心头角上，哪有心力去按照既定的战略规划去安心，用心经营项目和产品啊。</p>\n<h4 id=\"技术团队\"><a href=\"#技术团队\" class=\"headerlink\" title=\"技术团队\"></a>技术团队</h4><p>有些创业公司号称是产品驱动型的，还有什么运营驱动型，用户驱动型，当然还有技术驱动型的公司，不管什么驱动型的公司，归根结底得有自己的产品，做产品就得需要技术，所以一个公司技术的重要性不言而喻，尤其是创业公司前期，产品未获得市场认可之前，技术尤为重要。一个好的技术团队可以成就一个好的产品的同时，更能够提高技术团队内程序员的技术水平。如果技术团队能力不强，你认为公司的产品性能，体验，交互会好吗？交互体验是用户使用产品最直观的感受。一个成功的产品需要强大的运营，需要市场的认可，更需要技术的提高和优化。<br>如果你去的公司技术团队技术能力不强，你在里面学不到东西，一直在用自己之前学到的陈旧技术，那还是别呆在哪里了，提高技术最好的方法就是：勇于挑战自己不会的东西。作为技术型的人员，切记不要自己待在一个舒适区太久，会让你变得懒惰，落后，甚至淘汰，要向温水煮青蛙一样，我们要适度的学会跳出舒适区，去挑战自己。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当然，你看到这里可能会对比自己的处境，感觉完全达到以上几点要求的创业公司太少了，是人在一起就会磕磕绊绊，当然，这是肯定的，但是如果你待在的那个公司触犯了上面的两条及以上，我还是建议你要重新选择或者离职，去找更好的公司。这仅仅是我个人的观点，可以参考，也可以不认同，我只是用经验告诉大家以后小心上当。我为什么把项目前景和CEO的魅力放在前两位呢，因为如果你工作的那个公司，这两点都做到了，后面管理团队和技术团队也差不到哪里去。<br>记住：路是自己走出来的，路更是自己选择的。我们不要做一个敢于跳槽的程序员，而是要做一个不害怕跳槽的程序员。你们懂我的意思吧？我相信大家都懂。</p>\n","excerpt":"","more":"<h3 id=\"推酷上看到的一篇文网文，摘录学习\"><a href=\"#推酷上看到的一篇文网文，摘录学习\" class=\"headerlink\" title=\"推酷上看到的一篇文网文，摘录学习\"></a>推酷上看到的一篇文网文，摘录学习</h3><h4 id=\"项目前景\"><a href=\"#项目前景\" class=\"headerlink\" title=\"项目前景\"></a>项目前景</h4><p>面试公司之前，要首先从网上搜集该公司有关的新闻和资料，大致了解一下公司所做的项目，面试的时候和经理深入探讨一下关于产品项目的想法，以便更全面的有个大概的了解。项目是一个公司的内在核心，产品是公司的孩子，代表着公司的前景和未来。根据当前互联网的大环境和未来发展以及当下的用户市场来诊断一下该公司的核心产品项目的前途，以及是否是你感兴趣的方向。如果你感觉没有前景，而且又不是你感兴趣的方向，建议不要选择，一个合适的环境和项目才能促进你提高。<br>当然，如果你仅仅考虑的是当下为了挣钱，而不是自己的兴趣爱好，那如果你感觉该公司项目产品有市场前景，有钱途，但是又没有自己的主见和兴趣，那你可以选择这家公司。没有前景的项目公司建议大家慎重选择，毕竟融资困难，最后有可能发不出工资来。你可能会说，我们怎么能判断准确？是的，并不是每个人都能判断准确，投资人都叫风投，风险投资，所有的选择都是有风险的，这需要自己平时多关心互联网的发展和未来的方向，以及一些热点，扩展自己的一些知识量和阅历，使自己判断能力的准确度更高，仅此而已。</p>\n<h4 id=\"CEO的魅力\"><a href=\"#CEO的魅力\" class=\"headerlink\" title=\"CEO的魅力\"></a>CEO的魅力</h4><p>我这里把CEO的魅力分为两个：一是领导力，二是执行力。这是一个优秀的CEO必不可少的素质。<br>这里的领导力，我暂时定义为以下几点：广阔视野，分析思维，概念思维，真知灼见，知人善任，卓越领导，影响他人，相信自己。前面的几点视野，思维，灼见，这些能力，可以使CEO能够准确的判断市场和未来，带着公司稳步的走向未来，发展更好。后面的知人善任，卓越领导，影响他人，相信自己，才能能够使创业团队更加团结稳定，使大家更加信服的追随他。对于影响他人，我们不求每个CEO都像乔布斯一样，具有现实扭曲力场的能力，最起码能够让他人和你观点不会冲突，这样才能领到团队，团结一心。<br>关于执行力，我想说这里的执行力我更加偏向与作为一个公司的领导，他的承诺的执行力，而不是整天那股权和期权忽悠创业团队，说公司上市了大家都是元老，都会有股份或者期权。整天那摸不着，看不见的东西忽悠大家拼命给他干活的CEO不是一个让人信服的人，让团队没有安全感。记住：画大饼谁都会，让你能吃到的CEO不多见。从创业起，融到资金后，整天自己抱着钱，不顾员工利益的CEO,即使将来创业成功，他也不会让你知道饼是啥味。记住：口头承诺不如白纸黑字。<br>如果你去的公司，在工作了几个月之后，发现公司的CEO没有领导力，也没有执行力，果断劝你们赶紧给自己找下家和后路，否则……后果自负。</p>\n<h4 id=\"管理团队\"><a href=\"#管理团队\" class=\"headerlink\" title=\"管理团队\"></a>管理团队</h4><p>刚才我们谈到了CEO的魅力问题，CEO影响着管理团队的团结和战斗力。如果一个CEO和管理团队因为期权、股权问题，还有对于公司的战略规划上有分歧，整天勾心斗角，明面上精致团结或者矛盾隐私化，暗地里暗度陈仓，这样的公司是没有任何战斗力和前景的。<br>如果你所在的公司，你发现了有这样的苗头或者征兆，甚至已经正在发生，内部管理团队不和的现象，建议你们慎重选择，或者尽早离职。所谓上身不正下身外，管理团队把心思都放在了勾心头角上，哪有心力去按照既定的战略规划去安心，用心经营项目和产品啊。</p>\n<h4 id=\"技术团队\"><a href=\"#技术团队\" class=\"headerlink\" title=\"技术团队\"></a>技术团队</h4><p>有些创业公司号称是产品驱动型的，还有什么运营驱动型，用户驱动型，当然还有技术驱动型的公司，不管什么驱动型的公司，归根结底得有自己的产品，做产品就得需要技术，所以一个公司技术的重要性不言而喻，尤其是创业公司前期，产品未获得市场认可之前，技术尤为重要。一个好的技术团队可以成就一个好的产品的同时，更能够提高技术团队内程序员的技术水平。如果技术团队能力不强，你认为公司的产品性能，体验，交互会好吗？交互体验是用户使用产品最直观的感受。一个成功的产品需要强大的运营，需要市场的认可，更需要技术的提高和优化。<br>如果你去的公司技术团队技术能力不强，你在里面学不到东西，一直在用自己之前学到的陈旧技术，那还是别呆在哪里了，提高技术最好的方法就是：勇于挑战自己不会的东西。作为技术型的人员，切记不要自己待在一个舒适区太久，会让你变得懒惰，落后，甚至淘汰，要向温水煮青蛙一样，我们要适度的学会跳出舒适区，去挑战自己。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当然，你看到这里可能会对比自己的处境，感觉完全达到以上几点要求的创业公司太少了，是人在一起就会磕磕绊绊，当然，这是肯定的，但是如果你待在的那个公司触犯了上面的两条及以上，我还是建议你要重新选择或者离职，去找更好的公司。这仅仅是我个人的观点，可以参考，也可以不认同，我只是用经验告诉大家以后小心上当。我为什么把项目前景和CEO的魅力放在前两位呢，因为如果你工作的那个公司，这两点都做到了，后面管理团队和技术团队也差不到哪里去。<br>记住：路是自己走出来的，路更是自己选择的。我们不要做一个敢于跳槽的程序员，而是要做一个不害怕跳槽的程序员。你们懂我的意思吧？我相信大家都懂。</p>\n"},{"title":"Node.js开发环境搭建","date":"2016-11-02T03:44:34.000Z","_content":"\n\n官网：https://nodejs.org \n# Mac、Windows\n官网下载对应的安装包安装即可。\n带有**Source Code**字样的才是源码；带有**linux** 字样的是编译好的文件，解压**bin**目录下可以看到**node、npm** 文件，复制到**/usr/local/bin/**下即可，**node_modules**目录是模块（不推荐，很多库及模块没有安装，这种方法我没有安装成功）。\n\n---\n\n# Ubuntu 16 、CentOS 7 \n### 法一：apt-get命令安装\n\n```\napt install nodejs-legacy nodejs npm\n```\n\n### 法二：源码安装(用root用户操作)\n \n**（6版本以下要升级g++及其他库，去官网下载带linux字样的编译好的版本简单点）**\n### gcc版本要4.8以上\nCentos: **yum install g++ cmake gcc-c++ gmake -y**           \n\nUbuntu：**apt-get install python build-essential gcc g++**   \n\n```\ngit clone https://github.com/nodejs/node.git\nchmod -R 755 node\ncd node\n./configure    #指定安装目录加上--prefix=/usr/local/node/版本号\nmake\nmake install\n```\n\n也可在**https://nodejs.org/en/download/**下载Nodejs带**Source Code**字样的源码，`tar -zxvf filename` 解压，之后的操作是一样的。\n\n查看 node 版本：`node --version`\n\n命令无法运行的话,需要设置nodejs环境变量：\n`vim /etc/profile`\n在空行出添加以下内容：\n\n```\n\t#set for nodejs\n\t#若./configure时指定了安装路径则改为安装路径：/usr/local/node/版本号\n\texport NODE_HOME=/usr/bin/node  \t\n\texport PATH=$NODE_HOME/bin:$PATH\n```\n\n保存并退出，编译**/etc/profile** 使配置生效\n\n`source /etc/profile`\n\n现在就可以正常使用啦！\n\nnpm模块安装路径\n默认：**/usr/local/lib/node_modules**\n\n指定路径：**/usr/local/node/版本号/lib/node_modules**\n\n--------------------------------------------------------------------------------\n\n# 淘宝 NPM 镜像源\n国内直接使用 npm 的官方镜像可能非常慢的，可以使用淘宝 NPM 镜像。\n淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n**http://npm.taobao.org/**\n### 方法一、通过config命令\n\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm info underscore #（如果上面配置正确这个命令会有字符串response） \n```\n\n### 方法二、命令行指定\n`npm --registry https://registry.npm.taobao.org info underscore` \n\n### 方法三、编辑 ~/.npmrc 加入下面内容\n`registry = https://registry.npm.taobao.org`\n\n你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n(不推荐，这样自由手动安装是用cnpm,脚本安装还是用的默认npm)\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n这样就可以使用 cnpm 命令来安装模块了：\n\n`cnpm install [name]`\n\n\nNode.js教程:\nhttp://www.runoob.com/nodejs/nodejs-npm.html","source":"_posts/环境搭建/2016-11-02-Node-js开发环境搭建.md","raw":"---\ntitle: Node.js开发环境搭建\ncategories:\n  - 环境搭建\ntags:\n  - Node.js\ndate: 2016-11-02 11:44:34\n---\n\n\n官网：https://nodejs.org \n# Mac、Windows\n官网下载对应的安装包安装即可。\n带有**Source Code**字样的才是源码；带有**linux** 字样的是编译好的文件，解压**bin**目录下可以看到**node、npm** 文件，复制到**/usr/local/bin/**下即可，**node_modules**目录是模块（不推荐，很多库及模块没有安装，这种方法我没有安装成功）。\n\n---\n\n# Ubuntu 16 、CentOS 7 \n### 法一：apt-get命令安装\n\n```\napt install nodejs-legacy nodejs npm\n```\n\n### 法二：源码安装(用root用户操作)\n \n**（6版本以下要升级g++及其他库，去官网下载带linux字样的编译好的版本简单点）**\n### gcc版本要4.8以上\nCentos: **yum install g++ cmake gcc-c++ gmake -y**           \n\nUbuntu：**apt-get install python build-essential gcc g++**   \n\n```\ngit clone https://github.com/nodejs/node.git\nchmod -R 755 node\ncd node\n./configure    #指定安装目录加上--prefix=/usr/local/node/版本号\nmake\nmake install\n```\n\n也可在**https://nodejs.org/en/download/**下载Nodejs带**Source Code**字样的源码，`tar -zxvf filename` 解压，之后的操作是一样的。\n\n查看 node 版本：`node --version`\n\n命令无法运行的话,需要设置nodejs环境变量：\n`vim /etc/profile`\n在空行出添加以下内容：\n\n```\n\t#set for nodejs\n\t#若./configure时指定了安装路径则改为安装路径：/usr/local/node/版本号\n\texport NODE_HOME=/usr/bin/node  \t\n\texport PATH=$NODE_HOME/bin:$PATH\n```\n\n保存并退出，编译**/etc/profile** 使配置生效\n\n`source /etc/profile`\n\n现在就可以正常使用啦！\n\nnpm模块安装路径\n默认：**/usr/local/lib/node_modules**\n\n指定路径：**/usr/local/node/版本号/lib/node_modules**\n\n--------------------------------------------------------------------------------\n\n# 淘宝 NPM 镜像源\n国内直接使用 npm 的官方镜像可能非常慢的，可以使用淘宝 NPM 镜像。\n淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n**http://npm.taobao.org/**\n### 方法一、通过config命令\n\n```\nnpm config set registry https://registry.npm.taobao.org\nnpm info underscore #（如果上面配置正确这个命令会有字符串response） \n```\n\n### 方法二、命令行指定\n`npm --registry https://registry.npm.taobao.org info underscore` \n\n### 方法三、编辑 ~/.npmrc 加入下面内容\n`registry = https://registry.npm.taobao.org`\n\n你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n(不推荐，这样自由手动安装是用cnpm,脚本安装还是用的默认npm)\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n这样就可以使用 cnpm 命令来安装模块了：\n\n`cnpm install [name]`\n\n\nNode.js教程:\nhttp://www.runoob.com/nodejs/nodejs-npm.html","slug":"环境搭建-2016-11-02-Node-js开发环境搭建","published":1,"updated":"2016-11-02T04:15:30.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnva001l0gpkvm2go8xp","content":"<p>官网：<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">https://nodejs.org</a> </p>\n<h1 id=\"Mac、Windows\"><a href=\"#Mac、Windows\" class=\"headerlink\" title=\"Mac、Windows\"></a>Mac、Windows</h1><p>官网下载对应的安装包安装即可。<br>带有<strong>Source Code</strong>字样的才是源码；带有<strong>linux</strong> 字样的是编译好的文件，解压<strong>bin</strong>目录下可以看到<strong>node、npm</strong> 文件，复制到<strong>/usr/local/bin/</strong>下即可，<strong>node_modules</strong>目录是模块（不推荐，很多库及模块没有安装，这种方法我没有安装成功）。</p>\n<hr>\n<h1 id=\"Ubuntu-16-、CentOS-7\"><a href=\"#Ubuntu-16-、CentOS-7\" class=\"headerlink\" title=\"Ubuntu 16 、CentOS 7\"></a>Ubuntu 16 、CentOS 7</h1><h3 id=\"法一：apt-get命令安装\"><a href=\"#法一：apt-get命令安装\" class=\"headerlink\" title=\"法一：apt-get命令安装\"></a>法一：apt-get命令安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt <span class=\"keyword\">install</span> nodejs-legacy nodejs npm</div></pre></td></tr></table></figure>\n<h3 id=\"法二：源码安装-用root用户操作\"><a href=\"#法二：源码安装-用root用户操作\" class=\"headerlink\" title=\"法二：源码安装(用root用户操作)\"></a>法二：源码安装(用root用户操作)</h3><p><strong>（6版本以下要升级g++及其他库，去官网下载带linux字样的编译好的版本简单点）</strong></p>\n<h3 id=\"gcc版本要4-8以上\"><a href=\"#gcc版本要4-8以上\" class=\"headerlink\" title=\"gcc版本要4.8以上\"></a>gcc版本要4.8以上</h3><p>Centos: <strong>yum install g++ cmake gcc-c++ gmake -y</strong>           </p>\n<p>Ubuntu：<strong>apt-get install python build-essential gcc g++</strong>   </p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/nodejs/<span class=\"keyword\">node</span>.<span class=\"title\">git</span></div><div class=\"line\">chmod -R <span class=\"number\">755</span> <span class=\"keyword\">node</span></div><div class=\"line\"><span class=\"title\">cd</span> <span class=\"keyword\">node</span></div><div class=\"line\"><span class=\"title\">./configure</span>    <span class=\"comment\">#指定安装目录加上--prefix=/usr/local/node/版本号</span></div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>也可在<strong><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/download/</a></strong>下载Nodejs带<strong>Source Code</strong>字样的源码，<code>tar -zxvf filename</code> 解压，之后的操作是一样的。</p>\n<p>查看 node 版本：<code>node --version</code></p>\n<p>命令无法运行的话,需要设置nodejs环境变量：<br><code>vim /etc/profile</code><br>在空行出添加以下内容：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">set</span> for <span class=\"comment\">nodejs</span></div><div class=\"line\">#若./configure时指定了安装路径则改为安装路径：/usr/local/node/版本号</div><div class=\"line\">export NODE_HOME=/usr/bin/node  \t</div><div class=\"line\">export <span class=\"comment\">PATH=$NODE_HOME</span>/bin:$PATH</div></pre></td></tr></table></figure>\n<p>保存并退出，编译<strong>/etc/profile</strong> 使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<p>现在就可以正常使用啦！</p>\n<p>npm模块安装路径<br>默认：<strong>/usr/local/lib/node_modules</strong></p>\n<p>指定路径：<strong>/usr/local/node/版本号/lib/node_modules</strong></p>\n<hr>\n<h1 id=\"淘宝-NPM-镜像源\"><a href=\"#淘宝-NPM-镜像源\" class=\"headerlink\" title=\"淘宝 NPM 镜像源\"></a>淘宝 NPM 镜像源</h1><p>国内直接使用 npm 的官方镜像可能非常慢的，可以使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br><strong><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></strong></p>\n<h3 id=\"方法一、通过config命令\"><a href=\"#方法一、通过config命令\" class=\"headerlink\" title=\"方法一、通过config命令\"></a>方法一、通过config命令</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span> config set registry https:<span class=\"regexp\">//</span>registry.<span class=\"built_in\">npm</span>.taobao.org</div><div class=\"line\"><span class=\"built_in\">npm</span> info underscore <span class=\"comment\">#（如果上面配置正确这个命令会有字符串response）</span></div></pre></td></tr></table></figure>\n<h3 id=\"方法二、命令行指定\"><a href=\"#方法二、命令行指定\" class=\"headerlink\" title=\"方法二、命令行指定\"></a>方法二、命令行指定</h3><p><code>npm --registry https://registry.npm.taobao.org info underscore</code> </p>\n<h3 id=\"方法三、编辑-npmrc-加入下面内容\"><a href=\"#方法三、编辑-npmrc-加入下面内容\" class=\"headerlink\" title=\"方法三、编辑 ~/.npmrc 加入下面内容\"></a>方法三、编辑 ~/.npmrc 加入下面内容</h3><p><code>registry = https://registry.npm.taobao.org</code></p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:<br>(不推荐，这样自由手动安装是用cnpm,脚本安装还是用的默认npm)<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：</p>\n<p><code>cnpm install [name]</code></p>\n<p>Node.js教程:<br><a href=\"http://www.runoob.com/nodejs/nodejs-npm.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/nodejs/nodejs-npm.html</a></p>\n","excerpt":"","more":"<p>官网：<a href=\"https://nodejs.org\">https://nodejs.org</a> </p>\n<h1 id=\"Mac、Windows\"><a href=\"#Mac、Windows\" class=\"headerlink\" title=\"Mac、Windows\"></a>Mac、Windows</h1><p>官网下载对应的安装包安装即可。<br>带有<strong>Source Code</strong>字样的才是源码；带有<strong>linux</strong> 字样的是编译好的文件，解压<strong>bin</strong>目录下可以看到<strong>node、npm</strong> 文件，复制到<strong>/usr/local/bin/</strong>下即可，<strong>node_modules</strong>目录是模块（不推荐，很多库及模块没有安装，这种方法我没有安装成功）。</p>\n<hr>\n<h1 id=\"Ubuntu-16-、CentOS-7\"><a href=\"#Ubuntu-16-、CentOS-7\" class=\"headerlink\" title=\"Ubuntu 16 、CentOS 7\"></a>Ubuntu 16 、CentOS 7</h1><h3 id=\"法一：apt-get命令安装\"><a href=\"#法一：apt-get命令安装\" class=\"headerlink\" title=\"法一：apt-get命令安装\"></a>法一：apt-get命令安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt <span class=\"keyword\">install</span> nodejs-legacy nodejs npm</div></pre></td></tr></table></figure>\n<h3 id=\"法二：源码安装-用root用户操作\"><a href=\"#法二：源码安装-用root用户操作\" class=\"headerlink\" title=\"法二：源码安装(用root用户操作)\"></a>法二：源码安装(用root用户操作)</h3><p><strong>（6版本以下要升级g++及其他库，去官网下载带linux字样的编译好的版本简单点）</strong></p>\n<h3 id=\"gcc版本要4-8以上\"><a href=\"#gcc版本要4-8以上\" class=\"headerlink\" title=\"gcc版本要4.8以上\"></a>gcc版本要4.8以上</h3><p>Centos: <strong>yum install g++ cmake gcc-c++ gmake -y</strong>           </p>\n<p>Ubuntu：<strong>apt-get install python build-essential gcc g++</strong>   </p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/nodejs/<span class=\"keyword\">node</span>.<span class=\"title\">git</span></div><div class=\"line\">chmod -R <span class=\"number\">755</span> <span class=\"keyword\">node</span></div><div class=\"line\"><span class=\"title\">cd</span> <span class=\"keyword\">node</span></div><div class=\"line\"><span class=\"title\">./configure</span>    <span class=\"comment\">#指定安装目录加上--prefix=/usr/local/node/版本号</span></div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>也可在<strong><a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></strong>下载Nodejs带<strong>Source Code</strong>字样的源码，<code>tar -zxvf filename</code> 解压，之后的操作是一样的。</p>\n<p>查看 node 版本：<code>node --version</code></p>\n<p>命令无法运行的话,需要设置nodejs环境变量：<br><code>vim /etc/profile</code><br>在空行出添加以下内容：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">set</span> for <span class=\"comment\">nodejs</span></div><div class=\"line\">#若./configure时指定了安装路径则改为安装路径：/usr/local/node/版本号</div><div class=\"line\">export NODE_HOME=/usr/bin/node  \t</div><div class=\"line\">export <span class=\"comment\">PATH=$NODE_HOME</span>/bin:$PATH</div></pre></td></tr></table></figure>\n<p>保存并退出，编译<strong>/etc/profile</strong> 使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<p>现在就可以正常使用啦！</p>\n<p>npm模块安装路径<br>默认：<strong>/usr/local/lib/node_modules</strong></p>\n<p>指定路径：<strong>/usr/local/node/版本号/lib/node_modules</strong></p>\n<hr>\n<h1 id=\"淘宝-NPM-镜像源\"><a href=\"#淘宝-NPM-镜像源\" class=\"headerlink\" title=\"淘宝 NPM 镜像源\"></a>淘宝 NPM 镜像源</h1><p>国内直接使用 npm 的官方镜像可能非常慢的，可以使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br><strong><a href=\"http://npm.taobao.org/\">http://npm.taobao.org/</a></strong></p>\n<h3 id=\"方法一、通过config命令\"><a href=\"#方法一、通过config命令\" class=\"headerlink\" title=\"方法一、通过config命令\"></a>方法一、通过config命令</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span> config set registry https:<span class=\"regexp\">//</span>registry.<span class=\"built_in\">npm</span>.taobao.org</div><div class=\"line\"><span class=\"built_in\">npm</span> info underscore <span class=\"comment\">#（如果上面配置正确这个命令会有字符串response）</span></div></pre></td></tr></table></figure>\n<h3 id=\"方法二、命令行指定\"><a href=\"#方法二、命令行指定\" class=\"headerlink\" title=\"方法二、命令行指定\"></a>方法二、命令行指定</h3><p><code>npm --registry https://registry.npm.taobao.org info underscore</code> </p>\n<h3 id=\"方法三、编辑-npmrc-加入下面内容\"><a href=\"#方法三、编辑-npmrc-加入下面内容\" class=\"headerlink\" title=\"方法三、编辑 ~/.npmrc 加入下面内容\"></a>方法三、编辑 ~/.npmrc 加入下面内容</h3><p><code>registry = https://registry.npm.taobao.org</code></p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:<br>(不推荐，这样自由手动安装是用cnpm,脚本安装还是用的默认npm)<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：</p>\n<p><code>cnpm install [name]</code></p>\n<p>Node.js教程:<br><a href=\"http://www.runoob.com/nodejs/nodejs-npm.html\">http://www.runoob.com/nodejs/nodejs-npm.html</a></p>\n"},{"title":"grub引导修复","date":"2016-11-02T08:52:46.000Z","_content":"\n## 法一：\n特别是在linux调整分区后，开机重启时会出现\nerror : unknow filesystem\ngrub rescue>\n的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。\n        \n在救援模式下只有很少的命令可以用：set  ,  ls , insmod , root , prefix\n\n\t(1)set  查看环境变量，这里可以查看启动路径和分区。\n\t(2)ls   查看设备\n\t(3)insmod  加载模块\n\t(4)root  指定用于启动系统的分区,在救援模式下设置grub启动分区\n\t(5)prefix 设定grub启动路径\n\n具体修复步骤如下：\n\n* 1、查看分区：grub rescue> `ls`   回车\n会出现如下字样：\n\n(hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1)\n\n注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub> `find /boot/grub/grub.conf`   也行\n\n* 2、寻找ubuntu所在分区：\n（就是寻找你的Linux系统是装在以上哪个分区里）\n\ngrub rescue> `ls (hd0,msdos1)/`\n\n若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。\n\n* 3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）\ngrub rescue>`root=(hd0,msdos8)`\ngrub rescue>`prefix=/boot/grub`     //grub路径设置\ngrub rescue>`set root=(hd0,msdos8)`\ngrub rescue>`set prefix=(hd0,msdos8)/boot/grub`\ngrub rescue>`insmod normal`    //启动normal启动\ngrub rescue>`normal`\n之后你就会看到熟悉的启动菜单栏了\n\n* 4、进入命令行启动ubuntu\n\n进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。\ngrub >`set root=hd0,msdos8`\ngrub >`set prefix=(hd0,msdos8)/boot/grub`\ngrub >`linux /vmlinuz-xxx-xxx root=/dev/sda8` //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=off\ngrub >`initrd /initrd.img-xxx-xxx`\ngrub >`boot`\n这样就可以进入了\n\n* 5、进入ubuntu修复grub\n\n在终端里运行\n```\nsudo update-grub`\nsudo grub-install /dev/sda```\n\n* 6、重启，搞定！！\n\n 注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。\n在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。\n\n---\n\n## 法二：\n首先制作 Ubuntu 启动 USB\n\n复制代码代码如下：\n```\nsudo dd if=ubuntu-13.10-desktop-amd64.iso of=/dev/sdb1 #/dev/sdb1 为 USB 盘符```\n\n* 1.使用启动 USB 进入 Ubuntu 试用环境\n\n* 2.查看硬盘分区状况，获取 Linux 系统安装分区编号\n`sudo fdisk -l`\n查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在**/dev/sda3**安装了 **Ubuntu**。\n或者，打开 **Gparted** 图形化工具来查看分区信息也可以。\n挂载Ubuntu分区\n\n* 3.已知**Ubuntu**安装在了**/dev/sda3**上，所以我们可以用下面命令来挂载**Ubuntu**安装分区。你需要将**/dev/sda3**换成自己的 Linux 安装分区。\n`sudo mount /dev/sda3 /mnt`\n\n* 4.挂载其他所需的目录（使用 --bind）\n```\nsudo mount --bind /dev /mnt/dev\nsudo mount --bind /proc /mnt/proc\nsudo mount --bind /sys /mnt/sys```\n\n* 5.Chroot 到硬盘上的 Linux 系统\n代码如下：\n`sudo chroot /mnt ` chroot命令把根目录切换到指定目录下\n\n* 6.安装&更新 Grub\n```\ngrub2-install /dev/sda\ngrub2-mkconfig -o /boot/grub2/grub.cfg```\n\n* 7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录：\n```\nexit #退出 chroot 环境\nsudo umount /mnt/dev\nsudo umount /mnt/proc\nsudo umount /mnt/sys\nsudo umount /mnt```\n\n* 8.重启。\n\n---\n\n可以进grub 这就好办了 >**root (hd0,x)** 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区\n```\n>linux /vmlinuz ro quiet \n>initrd /initrd.lz\n>boot\n```\n\n先找到menu.lst菜单文件：\n`find --set-root /boot/grub/menu.lst`\n然后加载：\nGrub 命令索引`configfile /boot/grub/menu.lst`\n菜单文件可以换成grub.conf试试。\n\n\n\n参考：\n1、http://www.xitongzhijia.net/xtjc/20141208/32106.html （推荐）\n2、http://blog.chinaunix.net/uid-27037833-id-3235145.html\n\n\n\n","source":"_posts/系统管理/2016-11-02-grub引导修复.md","raw":"---\ntitle: grub引导修复\ncategories:\n  - 系统管理\ntags:\n  - grub引导修复\ndate: 2016-11-02 16:52:46\n---\n\n## 法一：\n特别是在linux调整分区后，开机重启时会出现\nerror : unknow filesystem\ngrub rescue>\n的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。\n        \n在救援模式下只有很少的命令可以用：set  ,  ls , insmod , root , prefix\n\n\t(1)set  查看环境变量，这里可以查看启动路径和分区。\n\t(2)ls   查看设备\n\t(3)insmod  加载模块\n\t(4)root  指定用于启动系统的分区,在救援模式下设置grub启动分区\n\t(5)prefix 设定grub启动路径\n\n具体修复步骤如下：\n\n* 1、查看分区：grub rescue> `ls`   回车\n会出现如下字样：\n\n(hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1)\n\n注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub> `find /boot/grub/grub.conf`   也行\n\n* 2、寻找ubuntu所在分区：\n（就是寻找你的Linux系统是装在以上哪个分区里）\n\ngrub rescue> `ls (hd0,msdos1)/`\n\n若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。\n\n* 3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）\ngrub rescue>`root=(hd0,msdos8)`\ngrub rescue>`prefix=/boot/grub`     //grub路径设置\ngrub rescue>`set root=(hd0,msdos8)`\ngrub rescue>`set prefix=(hd0,msdos8)/boot/grub`\ngrub rescue>`insmod normal`    //启动normal启动\ngrub rescue>`normal`\n之后你就会看到熟悉的启动菜单栏了\n\n* 4、进入命令行启动ubuntu\n\n进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。\ngrub >`set root=hd0,msdos8`\ngrub >`set prefix=(hd0,msdos8)/boot/grub`\ngrub >`linux /vmlinuz-xxx-xxx root=/dev/sda8` //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=off\ngrub >`initrd /initrd.img-xxx-xxx`\ngrub >`boot`\n这样就可以进入了\n\n* 5、进入ubuntu修复grub\n\n在终端里运行\n```\nsudo update-grub`\nsudo grub-install /dev/sda```\n\n* 6、重启，搞定！！\n\n 注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。\n在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。\n\n---\n\n## 法二：\n首先制作 Ubuntu 启动 USB\n\n复制代码代码如下：\n```\nsudo dd if=ubuntu-13.10-desktop-amd64.iso of=/dev/sdb1 #/dev/sdb1 为 USB 盘符```\n\n* 1.使用启动 USB 进入 Ubuntu 试用环境\n\n* 2.查看硬盘分区状况，获取 Linux 系统安装分区编号\n`sudo fdisk -l`\n查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在**/dev/sda3**安装了 **Ubuntu**。\n或者，打开 **Gparted** 图形化工具来查看分区信息也可以。\n挂载Ubuntu分区\n\n* 3.已知**Ubuntu**安装在了**/dev/sda3**上，所以我们可以用下面命令来挂载**Ubuntu**安装分区。你需要将**/dev/sda3**换成自己的 Linux 安装分区。\n`sudo mount /dev/sda3 /mnt`\n\n* 4.挂载其他所需的目录（使用 --bind）\n```\nsudo mount --bind /dev /mnt/dev\nsudo mount --bind /proc /mnt/proc\nsudo mount --bind /sys /mnt/sys```\n\n* 5.Chroot 到硬盘上的 Linux 系统\n代码如下：\n`sudo chroot /mnt ` chroot命令把根目录切换到指定目录下\n\n* 6.安装&更新 Grub\n```\ngrub2-install /dev/sda\ngrub2-mkconfig -o /boot/grub2/grub.cfg```\n\n* 7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录：\n```\nexit #退出 chroot 环境\nsudo umount /mnt/dev\nsudo umount /mnt/proc\nsudo umount /mnt/sys\nsudo umount /mnt```\n\n* 8.重启。\n\n---\n\n可以进grub 这就好办了 >**root (hd0,x)** 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区\n```\n>linux /vmlinuz ro quiet \n>initrd /initrd.lz\n>boot\n```\n\n先找到menu.lst菜单文件：\n`find --set-root /boot/grub/menu.lst`\n然后加载：\nGrub 命令索引`configfile /boot/grub/menu.lst`\n菜单文件可以换成grub.conf试试。\n\n\n\n参考：\n1、http://www.xitongzhijia.net/xtjc/20141208/32106.html （推荐）\n2、http://blog.chinaunix.net/uid-27037833-id-3235145.html\n\n\n\n","slug":"系统管理-2016-11-02-grub引导修复","published":1,"updated":"2016-11-02T09:15:51.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnva001p0gpk9njjpbze","content":"<h2 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h2><p>特别是在linux调整分区后，开机重启时会出现<br>error : unknow filesystem<br>grub rescue&gt;<br>的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。</p>\n<p>在救援模式下只有很少的命令可以用：set  ,  ls , insmod , root , prefix</p>\n<pre><code>(1)set  查看环境变量，这里可以查看启动路径和分区。\n(2)ls   查看设备\n(3)insmod  加载模块\n(4)root  指定用于启动系统的分区,在救援模式下设置grub启动分区\n(5)prefix 设定grub启动路径\n</code></pre><p>具体修复步骤如下：</p>\n<ul>\n<li>1、查看分区：grub rescue&gt; <code>ls</code>   回车<br>会出现如下字样：</li>\n</ul>\n<p>(hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1)</p>\n<p>注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub&gt; <code>find /boot/grub/grub.conf</code>   也行</p>\n<ul>\n<li>2、寻找ubuntu所在分区：<br>（就是寻找你的Linux系统是装在以上哪个分区里）</li>\n</ul>\n<p>grub rescue&gt; <code>ls (hd0,msdos1)/</code></p>\n<p>若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。</p>\n<ul>\n<li><p>3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）<br>grub rescue&gt;<code>root=(hd0,msdos8)</code><br>grub rescue&gt;<code>prefix=/boot/grub</code>     //grub路径设置<br>grub rescue&gt;<code>set root=(hd0,msdos8)</code><br>grub rescue&gt;<code>set prefix=(hd0,msdos8)/boot/grub</code><br>grub rescue&gt;<code>insmod normal</code>    //启动normal启动<br>grub rescue&gt;<code>normal</code><br>之后你就会看到熟悉的启动菜单栏了</p>\n</li>\n<li><p>4、进入命令行启动ubuntu</p>\n</li>\n</ul>\n<p>进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。<br>grub &gt;<code>set root=hd0,msdos8</code><br>grub &gt;<code>set prefix=(hd0,msdos8)/boot/grub</code><br>grub &gt;<code>linux /vmlinuz-xxx-xxx root=/dev/sda8</code> //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=off<br>grub &gt;<code>initrd /initrd.img-xxx-xxx</code><br>grub &gt;<code>boot</code><br>这样就可以进入了</p>\n<ul>\n<li>5、进入ubuntu修复grub</li>\n</ul>\n<p>在终端里运行<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">update</span>-grub`</div><div class=\"line\">sudo grub-install /<span class=\"built_in\">dev</span>/sda</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>6、重启，搞定！！</p>\n<p>注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。<br>在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h2><p>首先制作 Ubuntu 启动 USB</p>\n<p>复制代码代码如下：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"selector-tag\">dd</span> <span class=\"keyword\">if</span>=ubuntu-<span class=\"number\">13.10</span>-desktop-amd64<span class=\"selector-class\">.iso</span> of=/dev/sdb1 #/dev/sdb1 为 USB 盘符</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>1.使用启动 USB 进入 Ubuntu 试用环境</p>\n</li>\n<li><p>2.查看硬盘分区状况，获取 Linux 系统安装分区编号<br><code>sudo fdisk -l</code><br>查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在<strong>/dev/sda3</strong>安装了 <strong>Ubuntu</strong>。<br>或者，打开 <strong>Gparted</strong> 图形化工具来查看分区信息也可以。<br>挂载Ubuntu分区</p>\n</li>\n<li><p>3.已知<strong>Ubuntu</strong>安装在了<strong>/dev/sda3</strong>上，所以我们可以用下面命令来挂载<strong>Ubuntu</strong>安装分区。你需要将<strong>/dev/sda3</strong>换成自己的 Linux 安装分区。<br><code>sudo mount /dev/sda3 /mnt</code></p>\n</li>\n<li><p>4.挂载其他所需的目录（使用 –bind）</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/dev /mnt/dev</div><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/<span class=\"meta\">proc</span> /mnt/<span class=\"meta\">proc</span></div><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/sys /mnt/sys</div></pre></td></tr></table></figure>\n</li>\n<li><p>5.Chroot 到硬盘上的 Linux 系统<br>代码如下：<br><code>sudo chroot /mnt</code> chroot命令把根目录切换到指定目录下</p>\n</li>\n<li><p>6.安装&amp;更新 Grub</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">grub2-install <span class=\"regexp\">/dev/</span>sda</div><div class=\"line\">grub2-mkconfig -o <span class=\"regexp\">/boot/g</span>rub2<span class=\"regexp\">/grub.cfg</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">exit</span> <span class=\"comment\">#退出 chroot 环境</span></div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>dev</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>proc</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>sys</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>8.重启。</p>\n</li>\n</ul>\n<hr>\n<p>可以进grub 这就好办了 &gt;<strong>root (hd0,x)</strong> 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;linux /vmlinuz ro quiet </div><div class=\"line\">&gt;initrd /initrd<span class=\"selector-class\">.lz</span></div><div class=\"line\">&gt;boot</div></pre></td></tr></table></figure></p>\n<p>先找到menu.lst菜单文件：<br><code>find --set-root /boot/grub/menu.lst</code><br>然后加载：<br>Grub 命令索引<code>configfile /boot/grub/menu.lst</code><br>菜单文件可以换成grub.conf试试。</p>\n<p>参考：<br>1、<a href=\"http://www.xitongzhijia.net/xtjc/20141208/32106.html\" target=\"_blank\" rel=\"external\">http://www.xitongzhijia.net/xtjc/20141208/32106.html</a> （推荐）<br>2、<a href=\"http://blog.chinaunix.net/uid-27037833-id-3235145.html\" target=\"_blank\" rel=\"external\">http://blog.chinaunix.net/uid-27037833-id-3235145.html</a></p>\n","excerpt":"","more":"<h2 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h2><p>特别是在linux调整分区后，开机重启时会出现<br>error : unknow filesystem<br>grub rescue&gt;<br>的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。</p>\n<p>在救援模式下只有很少的命令可以用：set  ,  ls , insmod , root , prefix</p>\n<pre><code>(1)set  查看环境变量，这里可以查看启动路径和分区。\n(2)ls   查看设备\n(3)insmod  加载模块\n(4)root  指定用于启动系统的分区,在救援模式下设置grub启动分区\n(5)prefix 设定grub启动路径\n</code></pre><p>具体修复步骤如下：</p>\n<ul>\n<li>1、查看分区：grub rescue&gt; <code>ls</code>   回车<br>会出现如下字样：</li>\n</ul>\n<p>(hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1)</p>\n<p>注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub&gt; <code>find /boot/grub/grub.conf</code>   也行</p>\n<ul>\n<li>2、寻找ubuntu所在分区：<br>（就是寻找你的Linux系统是装在以上哪个分区里）</li>\n</ul>\n<p>grub rescue&gt; <code>ls (hd0,msdos1)/</code></p>\n<p>若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。</p>\n<ul>\n<li><p>3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）<br>grub rescue&gt;<code>root=(hd0,msdos8)</code><br>grub rescue&gt;<code>prefix=/boot/grub</code>     //grub路径设置<br>grub rescue&gt;<code>set root=(hd0,msdos8)</code><br>grub rescue&gt;<code>set prefix=(hd0,msdos8)/boot/grub</code><br>grub rescue&gt;<code>insmod normal</code>    //启动normal启动<br>grub rescue&gt;<code>normal</code><br>之后你就会看到熟悉的启动菜单栏了</p>\n</li>\n<li><p>4、进入命令行启动ubuntu</p>\n</li>\n</ul>\n<p>进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。<br>grub &gt;<code>set root=hd0,msdos8</code><br>grub &gt;<code>set prefix=(hd0,msdos8)/boot/grub</code><br>grub &gt;<code>linux /vmlinuz-xxx-xxx root=/dev/sda8</code> //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=off<br>grub &gt;<code>initrd /initrd.img-xxx-xxx</code><br>grub &gt;<code>boot</code><br>这样就可以进入了</p>\n<ul>\n<li>5、进入ubuntu修复grub</li>\n</ul>\n<p>在终端里运行<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">update</span>-grub`</div><div class=\"line\">sudo grub-install /<span class=\"built_in\">dev</span>/sda</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>6、重启，搞定！！</p>\n<p>注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。<br>在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h2><p>首先制作 Ubuntu 启动 USB</p>\n<p>复制代码代码如下：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"selector-tag\">dd</span> <span class=\"keyword\">if</span>=ubuntu-<span class=\"number\">13.10</span>-desktop-amd64<span class=\"selector-class\">.iso</span> of=/dev/sdb1 #/dev/sdb1 为 USB 盘符</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>1.使用启动 USB 进入 Ubuntu 试用环境</p>\n</li>\n<li><p>2.查看硬盘分区状况，获取 Linux 系统安装分区编号<br><code>sudo fdisk -l</code><br>查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在<strong>/dev/sda3</strong>安装了 <strong>Ubuntu</strong>。<br>或者，打开 <strong>Gparted</strong> 图形化工具来查看分区信息也可以。<br>挂载Ubuntu分区</p>\n</li>\n<li><p>3.已知<strong>Ubuntu</strong>安装在了<strong>/dev/sda3</strong>上，所以我们可以用下面命令来挂载<strong>Ubuntu</strong>安装分区。你需要将<strong>/dev/sda3</strong>换成自己的 Linux 安装分区。<br><code>sudo mount /dev/sda3 /mnt</code></p>\n</li>\n<li><p>4.挂载其他所需的目录（使用 –bind）</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/dev /mnt/dev</div><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/<span class=\"meta\">proc</span> /mnt/<span class=\"meta\">proc</span></div><div class=\"line\"><span class=\"symbol\">sudo</span> mount --<span class=\"keyword\">bind </span>/sys /mnt/sys</div></pre></td></tr></table></figure>\n</li>\n<li><p>5.Chroot 到硬盘上的 Linux 系统<br>代码如下：<br><code>sudo chroot /mnt</code> chroot命令把根目录切换到指定目录下</p>\n</li>\n<li><p>6.安装&amp;更新 Grub</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">grub2-install <span class=\"regexp\">/dev/</span>sda</div><div class=\"line\">grub2-mkconfig -o <span class=\"regexp\">/boot/g</span>rub2<span class=\"regexp\">/grub.cfg</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">exit</span> <span class=\"comment\">#退出 chroot 环境</span></div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>dev</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>proc</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt/</span>sys</div><div class=\"line\">sudo umount <span class=\"regexp\">/mnt</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>8.重启。</p>\n</li>\n</ul>\n<hr>\n<p>可以进grub 这就好办了 &gt;<strong>root (hd0,x)</strong> 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;linux /vmlinuz ro quiet </div><div class=\"line\">&gt;initrd /initrd<span class=\"selector-class\">.lz</span></div><div class=\"line\">&gt;boot</div></pre></td></tr></table></figure></p>\n<p>先找到menu.lst菜单文件：<br><code>find --set-root /boot/grub/menu.lst</code><br>然后加载：<br>Grub 命令索引<code>configfile /boot/grub/menu.lst</code><br>菜单文件可以换成grub.conf试试。</p>\n<p>参考：<br>1、<a href=\"http://www.xitongzhijia.net/xtjc/20141208/32106.html\">http://www.xitongzhijia.net/xtjc/20141208/32106.html</a> （推荐）<br>2、<a href=\"http://blog.chinaunix.net/uid-27037833-id-3235145.html\">http://blog.chinaunix.net/uid-27037833-id-3235145.html</a></p>\n"},{"title":"SSH远程重装Centos系统","date":"2016-11-02T08:29:28.000Z","_content":"\n#### 注意：\n旧Linux系统必须能够正常ssh登录。旧Linux系统可以是任意Linux版本，现在的Linux用的一般都是grub引导管理器,新Linux系统必须是CentOS,RHEL或者Fedora，可以是32位或者64位。这几个Linux都支持VNC安装。\n\n\n## 步骤如下： \n可以建一个内网镜像源，也可以不建立，用公网的源（建议用公网源，简单快捷）。\n### 一.建一个内网的镜像源（如果使用在线源则跳过此步骤）\n登录服务器 192.168.1.83 （用此服务器搭建内网源）\n#### 1、安装apache \n```\nyum install httpd \nmkdir /var/www/html/centos/6 -p ```\n挂载iso镜像 \n```\nmount -o loop /opt/CentOS-6.6-x86_64-bin-DVD1.iso /var/www/html/centos/6 ```\n启动apache，通过浏览器访问**http://192.168.1.83/centos/6** 看是否有内容\n只有带**bin**字样的完整版光盘才有对应的启动内核，别的版本都不行\n\n### 二.远程重装服务器 \n#### 2、ssh登录要重装的服务器 \n如果用在线源请按网易源的修改方法修改\n\n```\nmkdir /centos_install \ncd /centos_install \nwget http://192.168.1.83/centos/6/images/pxeboot/initrd.img \nwget http://192.168.1.83/centos/6/images/pxeboot/vmlinuz \ncp vmlinuz /boot/vmlinuz.cent.pxe \ncp initrd.img /boot/initrd.img.cent.pxe```\n\n网址可用**网易源：http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/**代替       \ncentos 7目前还不支持pxe安装\n```\ncd /boot\nwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/initrd.img\nwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/vmlinuz\nchmod 755 vmlinuz\nchmod 600 initrd.img\n```\n启动文件是放在**/boot**下的，启动时以**/boot**为一级目录，所以注意**grub.conf**里的文件位置。\n#### 3.修改grub \n`vim /boot/grub/grub.conf`   或者 `menu.lst`  也行，这两个文件是链接在一起的。\n`default=0` 看情况修改，**default=0**表示默认启动**第一个标有title的项目**，**=1**为**第二个标有title**的项目，以此类推，直接把新增的放在最前面就不用修改**default=0**了。\n增加：\n```\ntitle Centos Install (PXE) \nroot (hd0,0) \nkernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.1.106 netmask=255.225.255.0 gateway=192.168.1.1 dns=8.8.8.8 ksdevice=eth0 method=http://192.168.1.83/centos/6/或[http://mirrors.163.com/centos/6.8/os/x86_64/] lang=en_US或zh_CH.UTF-8 keymap=us \ninitrd /initrd.img```\n例：\n```\ntitle Centos Install (PXE) \n        root (hd0,0)\n        kernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.30.145 netmask=255.225.255.0 gateway=192.168.30.1 dns=8.8.8.8 ksdevice=eth0 method=http://mirrors.163.com/centos/6.8/os/x86_64/ lang=zh_CH.UTF-8 keymap=us\n        initrd /initrd.img```\n                  \n保存退出   重启系统\n\n* root用户参数，要和grub.conf中的其他root参数一致；\nkernel参数和initrd参数后面的路径（是否/boot/开头）也要和grub.conf中的其他项一致；\n* ip地址，子网掩码和网关地址一定要和服务器一致；\nksdevice是主网卡\n* method后面的地址是新Linux系统的安装文件地址。如果这些配置有一项出错，就会导致远程安装失败。\n\n#### 4、开始安装 \nping服务器ip，ping通时，打开vnc重新连接**IP:1**或**IP:5901**，开始安装centos\n此时主机端显示\n\n安装好后重启系统，**登陆用户，root 密码，静态IP**等不变。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/系统管理/2016-11-02-SSH远程重装Centos系统.md","raw":"---\ntitle: SSH远程重装Centos系统\ncategories:\n  - 系统管理\ntags:\n  - ssh远程重装centos系统\ndate: 2016-11-02 16:29:28\n---\n\n#### 注意：\n旧Linux系统必须能够正常ssh登录。旧Linux系统可以是任意Linux版本，现在的Linux用的一般都是grub引导管理器,新Linux系统必须是CentOS,RHEL或者Fedora，可以是32位或者64位。这几个Linux都支持VNC安装。\n\n\n## 步骤如下： \n可以建一个内网镜像源，也可以不建立，用公网的源（建议用公网源，简单快捷）。\n### 一.建一个内网的镜像源（如果使用在线源则跳过此步骤）\n登录服务器 192.168.1.83 （用此服务器搭建内网源）\n#### 1、安装apache \n```\nyum install httpd \nmkdir /var/www/html/centos/6 -p ```\n挂载iso镜像 \n```\nmount -o loop /opt/CentOS-6.6-x86_64-bin-DVD1.iso /var/www/html/centos/6 ```\n启动apache，通过浏览器访问**http://192.168.1.83/centos/6** 看是否有内容\n只有带**bin**字样的完整版光盘才有对应的启动内核，别的版本都不行\n\n### 二.远程重装服务器 \n#### 2、ssh登录要重装的服务器 \n如果用在线源请按网易源的修改方法修改\n\n```\nmkdir /centos_install \ncd /centos_install \nwget http://192.168.1.83/centos/6/images/pxeboot/initrd.img \nwget http://192.168.1.83/centos/6/images/pxeboot/vmlinuz \ncp vmlinuz /boot/vmlinuz.cent.pxe \ncp initrd.img /boot/initrd.img.cent.pxe```\n\n网址可用**网易源：http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/**代替       \ncentos 7目前还不支持pxe安装\n```\ncd /boot\nwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/initrd.img\nwget http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/vmlinuz\nchmod 755 vmlinuz\nchmod 600 initrd.img\n```\n启动文件是放在**/boot**下的，启动时以**/boot**为一级目录，所以注意**grub.conf**里的文件位置。\n#### 3.修改grub \n`vim /boot/grub/grub.conf`   或者 `menu.lst`  也行，这两个文件是链接在一起的。\n`default=0` 看情况修改，**default=0**表示默认启动**第一个标有title的项目**，**=1**为**第二个标有title**的项目，以此类推，直接把新增的放在最前面就不用修改**default=0**了。\n增加：\n```\ntitle Centos Install (PXE) \nroot (hd0,0) \nkernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.1.106 netmask=255.225.255.0 gateway=192.168.1.1 dns=8.8.8.8 ksdevice=eth0 method=http://192.168.1.83/centos/6/或[http://mirrors.163.com/centos/6.8/os/x86_64/] lang=en_US或zh_CH.UTF-8 keymap=us \ninitrd /initrd.img```\n例：\n```\ntitle Centos Install (PXE) \n        root (hd0,0)\n        kernel /vmlinuz vnc vncpassword=123456 headless ip=192.168.30.145 netmask=255.225.255.0 gateway=192.168.30.1 dns=8.8.8.8 ksdevice=eth0 method=http://mirrors.163.com/centos/6.8/os/x86_64/ lang=zh_CH.UTF-8 keymap=us\n        initrd /initrd.img```\n                  \n保存退出   重启系统\n\n* root用户参数，要和grub.conf中的其他root参数一致；\nkernel参数和initrd参数后面的路径（是否/boot/开头）也要和grub.conf中的其他项一致；\n* ip地址，子网掩码和网关地址一定要和服务器一致；\nksdevice是主网卡\n* method后面的地址是新Linux系统的安装文件地址。如果这些配置有一项出错，就会导致远程安装失败。\n\n#### 4、开始安装 \nping服务器ip，ping通时，打开vnc重新连接**IP:1**或**IP:5901**，开始安装centos\n此时主机端显示\n\n安装好后重启系统，**登陆用户，root 密码，静态IP**等不变。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"系统管理-2016-11-02-SSH远程重装Centos系统","published":1,"updated":"2016-11-02T08:47:03.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnvp001s0gpkm07l1sp5","content":"<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>旧Linux系统必须能够正常ssh登录。旧Linux系统可以是任意Linux版本，现在的Linux用的一般都是grub引导管理器,新Linux系统必须是CentOS,RHEL或者Fedora，可以是32位或者64位。这几个Linux都支持VNC安装。</p>\n<h2 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h2><p>可以建一个内网镜像源，也可以不建立，用公网的源（建议用公网源，简单快捷）。</p>\n<h3 id=\"一-建一个内网的镜像源（如果使用在线源则跳过此步骤）\"><a href=\"#一-建一个内网的镜像源（如果使用在线源则跳过此步骤）\" class=\"headerlink\" title=\"一.建一个内网的镜像源（如果使用在线源则跳过此步骤）\"></a>一.建一个内网的镜像源（如果使用在线源则跳过此步骤）</h3><p>登录服务器 192.168.1.83 （用此服务器搭建内网源）</p>\n<h4 id=\"1、安装apache\"><a href=\"#1、安装apache\" class=\"headerlink\" title=\"1、安装apache\"></a>1、安装apache</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd </div><div class=\"line\">mkdir <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html/</span>centos<span class=\"regexp\">/6 -p</span></div></pre></td></tr></table></figure>\n<p>挂载iso镜像<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -o loop <span class=\"regexp\">/opt/</span>CentOS-<span class=\"number\">6.6</span>-x86_64-bin-DVD1.iso <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html/</span>centos<span class=\"regexp\">/6</span></div></pre></td></tr></table></figure></p>\n<p>启动apache，通过浏览器访问<strong><a href=\"http://192.168.1.83/centos/6\" target=\"_blank\" rel=\"external\">http://192.168.1.83/centos/6</a></strong> 看是否有内容<br>只有带<strong>bin</strong>字样的完整版光盘才有对应的启动内核，别的版本都不行</p>\n<h3 id=\"二-远程重装服务器\"><a href=\"#二-远程重装服务器\" class=\"headerlink\" title=\"二.远程重装服务器\"></a>二.远程重装服务器</h3><h4 id=\"2、ssh登录要重装的服务器\"><a href=\"#2、ssh登录要重装的服务器\" class=\"headerlink\" title=\"2、ssh登录要重装的服务器\"></a>2、ssh登录要重装的服务器</h4><p>如果用在线源请按网易源的修改方法修改</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /centos_install </div><div class=\"line\">cd /centos_install </div><div class=\"line\">wget http:<span class=\"comment\">//192.168.1.83/centos/6/images/pxeboot/initrd.img </span></div><div class=\"line\">wget http:<span class=\"comment\">//192.168.1.83/centos/6/images/pxeboot/vmlinuz </span></div><div class=\"line\">cp vmlinuz /boot/vmlinuz<span class=\"selector-class\">.cent</span><span class=\"selector-class\">.pxe</span> </div><div class=\"line\">cp initrd<span class=\"selector-class\">.img</span> /boot/initrd<span class=\"selector-class\">.img</span><span class=\"selector-class\">.cent</span><span class=\"selector-class\">.pxe</span></div></pre></td></tr></table></figure>\n<p>网址可用<strong>网易源：<a href=\"http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/\" target=\"_blank\" rel=\"external\">http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/</a></strong>代替<br>centos 7目前还不支持pxe安装<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /boot</div><div class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.163.com/centos</span><span class=\"regexp\">/6.8/os</span><span class=\"regexp\">/x86_64/images</span><span class=\"regexp\">/pxeboot/initrd</span>.img</div><div class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.163.com/centos</span><span class=\"regexp\">/6.8/os</span><span class=\"regexp\">/x86_64/images</span><span class=\"regexp\">/pxeboot/vmlinuz</span></div><div class=\"line\">chmod <span class=\"number\">755</span> vmlinuz</div><div class=\"line\">chmod <span class=\"number\">600</span> initrd.img</div></pre></td></tr></table></figure></p>\n<p>启动文件是放在<strong>/boot</strong>下的，启动时以<strong>/boot</strong>为一级目录，所以注意<strong>grub.conf</strong>里的文件位置。</p>\n<h4 id=\"3-修改grub\"><a href=\"#3-修改grub\" class=\"headerlink\" title=\"3.修改grub\"></a>3.修改grub</h4><p><code>vim /boot/grub/grub.conf</code>   或者 <code>menu.lst</code>  也行，这两个文件是链接在一起的。<br><code>default=0</code> 看情况修改，<strong>default=0</strong>表示默认启动<strong>第一个标有title的项目</strong>，<strong>=1</strong>为<strong>第二个标有title</strong>的项目，以此类推，直接把新增的放在最前面就不用修改<strong>default=0</strong>了。<br>增加：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title Centos Install (PXE) </div><div class=\"line\">root (hd0,<span class=\"number\">0</span>) </div><div class=\"line\">kernel /vmlinuz vnc vncpassword=<span class=\"number\">123456</span> headless ip=<span class=\"number\">192.168</span>.<span class=\"number\">1.106</span> netmask=<span class=\"number\">255.225</span>.<span class=\"number\">255.0</span> gateway=<span class=\"number\">192.168</span>.<span class=\"number\">1.1</span> dns=<span class=\"number\">8.8</span>.<span class=\"number\">8.8</span> ksdevice=eth0 <span class=\"function\"><span class=\"keyword\">method</span>=<span class=\"title\">http</span>:</span><span class=\"comment\">//192.168.1.83/centos/6/或[http://mirrors.163.com/centos/6.8/os/x86_64/] lang=en_US或zh_CH.UTF-8 keymap=us </span></div><div class=\"line\">initrd /initrd.img</div></pre></td></tr></table></figure></p>\n<p>例：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title Centos Install (PXE) </div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz vnc vncpassword=<span class=\"number\">123456</span> headless ip=<span class=\"number\">192.168</span>.<span class=\"number\">30.145</span> netmask=<span class=\"number\">255.225</span>.<span class=\"number\">255.0</span> gateway=<span class=\"number\">192.168</span>.<span class=\"number\">30.1</span> dns=<span class=\"number\">8.8</span>.<span class=\"number\">8.8</span> ksdevice=eth0 <span class=\"function\"><span class=\"keyword\">method</span>=<span class=\"title\">http</span>:</span><span class=\"comment\">//mirrors.163.com/centos/6.8/os/x86_64/ lang=zh_CH.UTF-8 keymap=us</span></div><div class=\"line\">        initrd /initrd.img</div></pre></td></tr></table></figure></p>\n<p>保存退出   重启系统</p>\n<ul>\n<li>root用户参数，要和grub.conf中的其他root参数一致；<br>kernel参数和initrd参数后面的路径（是否/boot/开头）也要和grub.conf中的其他项一致；</li>\n<li>ip地址，子网掩码和网关地址一定要和服务器一致；<br>ksdevice是主网卡</li>\n<li>method后面的地址是新Linux系统的安装文件地址。如果这些配置有一项出错，就会导致远程安装失败。</li>\n</ul>\n<h4 id=\"4、开始安装\"><a href=\"#4、开始安装\" class=\"headerlink\" title=\"4、开始安装\"></a>4、开始安装</h4><p>ping服务器ip，ping通时，打开vnc重新连接<strong>IP:1</strong>或<strong>IP:5901</strong>，开始安装centos<br>此时主机端显示</p>\n<p>安装好后重启系统，<strong>登陆用户，root 密码，静态IP</strong>等不变。</p>\n","excerpt":"","more":"<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>旧Linux系统必须能够正常ssh登录。旧Linux系统可以是任意Linux版本，现在的Linux用的一般都是grub引导管理器,新Linux系统必须是CentOS,RHEL或者Fedora，可以是32位或者64位。这几个Linux都支持VNC安装。</p>\n<h2 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h2><p>可以建一个内网镜像源，也可以不建立，用公网的源（建议用公网源，简单快捷）。</p>\n<h3 id=\"一-建一个内网的镜像源（如果使用在线源则跳过此步骤）\"><a href=\"#一-建一个内网的镜像源（如果使用在线源则跳过此步骤）\" class=\"headerlink\" title=\"一.建一个内网的镜像源（如果使用在线源则跳过此步骤）\"></a>一.建一个内网的镜像源（如果使用在线源则跳过此步骤）</h3><p>登录服务器 192.168.1.83 （用此服务器搭建内网源）</p>\n<h4 id=\"1、安装apache\"><a href=\"#1、安装apache\" class=\"headerlink\" title=\"1、安装apache\"></a>1、安装apache</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd </div><div class=\"line\">mkdir <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html/</span>centos<span class=\"regexp\">/6 -p</span></div></pre></td></tr></table></figure>\n<p>挂载iso镜像<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -o loop <span class=\"regexp\">/opt/</span>CentOS-<span class=\"number\">6.6</span>-x86_64-bin-DVD1.iso <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html/</span>centos<span class=\"regexp\">/6</span></div></pre></td></tr></table></figure></p>\n<p>启动apache，通过浏览器访问<strong><a href=\"http://192.168.1.83/centos/6\">http://192.168.1.83/centos/6</a></strong> 看是否有内容<br>只有带<strong>bin</strong>字样的完整版光盘才有对应的启动内核，别的版本都不行</p>\n<h3 id=\"二-远程重装服务器\"><a href=\"#二-远程重装服务器\" class=\"headerlink\" title=\"二.远程重装服务器\"></a>二.远程重装服务器</h3><h4 id=\"2、ssh登录要重装的服务器\"><a href=\"#2、ssh登录要重装的服务器\" class=\"headerlink\" title=\"2、ssh登录要重装的服务器\"></a>2、ssh登录要重装的服务器</h4><p>如果用在线源请按网易源的修改方法修改</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /centos_install </div><div class=\"line\">cd /centos_install </div><div class=\"line\">wget http:<span class=\"comment\">//192.168.1.83/centos/6/images/pxeboot/initrd.img </span></div><div class=\"line\">wget http:<span class=\"comment\">//192.168.1.83/centos/6/images/pxeboot/vmlinuz </span></div><div class=\"line\">cp vmlinuz /boot/vmlinuz<span class=\"selector-class\">.cent</span><span class=\"selector-class\">.pxe</span> </div><div class=\"line\">cp initrd<span class=\"selector-class\">.img</span> /boot/initrd<span class=\"selector-class\">.img</span><span class=\"selector-class\">.cent</span><span class=\"selector-class\">.pxe</span></div></pre></td></tr></table></figure>\n<p>网址可用<strong>网易源：<a href=\"http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/\">http://mirrors.163.com/centos/6.8/os/x86_64/images/pxeboot/</a></strong>代替<br>centos 7目前还不支持pxe安装<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /boot</div><div class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.163.com/centos</span><span class=\"regexp\">/6.8/os</span><span class=\"regexp\">/x86_64/images</span><span class=\"regexp\">/pxeboot/initrd</span>.img</div><div class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.163.com/centos</span><span class=\"regexp\">/6.8/os</span><span class=\"regexp\">/x86_64/images</span><span class=\"regexp\">/pxeboot/vmlinuz</span></div><div class=\"line\">chmod <span class=\"number\">755</span> vmlinuz</div><div class=\"line\">chmod <span class=\"number\">600</span> initrd.img</div></pre></td></tr></table></figure></p>\n<p>启动文件是放在<strong>/boot</strong>下的，启动时以<strong>/boot</strong>为一级目录，所以注意<strong>grub.conf</strong>里的文件位置。</p>\n<h4 id=\"3-修改grub\"><a href=\"#3-修改grub\" class=\"headerlink\" title=\"3.修改grub\"></a>3.修改grub</h4><p><code>vim /boot/grub/grub.conf</code>   或者 <code>menu.lst</code>  也行，这两个文件是链接在一起的。<br><code>default=0</code> 看情况修改，<strong>default=0</strong>表示默认启动<strong>第一个标有title的项目</strong>，<strong>=1</strong>为<strong>第二个标有title</strong>的项目，以此类推，直接把新增的放在最前面就不用修改<strong>default=0</strong>了。<br>增加：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title Centos Install (PXE) </div><div class=\"line\">root (hd0,<span class=\"number\">0</span>) </div><div class=\"line\">kernel /vmlinuz vnc vncpassword=<span class=\"number\">123456</span> headless ip=<span class=\"number\">192.168</span>.<span class=\"number\">1.106</span> netmask=<span class=\"number\">255.225</span>.<span class=\"number\">255.0</span> gateway=<span class=\"number\">192.168</span>.<span class=\"number\">1.1</span> dns=<span class=\"number\">8.8</span>.<span class=\"number\">8.8</span> ksdevice=eth0 <span class=\"function\"><span class=\"keyword\">method</span>=<span class=\"title\">http</span>:</span><span class=\"comment\">//192.168.1.83/centos/6/或[http://mirrors.163.com/centos/6.8/os/x86_64/] lang=en_US或zh_CH.UTF-8 keymap=us </span></div><div class=\"line\">initrd /initrd.img</div></pre></td></tr></table></figure></p>\n<p>例：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title Centos Install (PXE) </div><div class=\"line\">        root (hd0,<span class=\"number\">0</span>)</div><div class=\"line\">        kernel /vmlinuz vnc vncpassword=<span class=\"number\">123456</span> headless ip=<span class=\"number\">192.168</span>.<span class=\"number\">30.145</span> netmask=<span class=\"number\">255.225</span>.<span class=\"number\">255.0</span> gateway=<span class=\"number\">192.168</span>.<span class=\"number\">30.1</span> dns=<span class=\"number\">8.8</span>.<span class=\"number\">8.8</span> ksdevice=eth0 <span class=\"function\"><span class=\"keyword\">method</span>=<span class=\"title\">http</span>:</span><span class=\"comment\">//mirrors.163.com/centos/6.8/os/x86_64/ lang=zh_CH.UTF-8 keymap=us</span></div><div class=\"line\">        initrd /initrd.img</div></pre></td></tr></table></figure></p>\n<p>保存退出   重启系统</p>\n<ul>\n<li>root用户参数，要和grub.conf中的其他root参数一致；<br>kernel参数和initrd参数后面的路径（是否/boot/开头）也要和grub.conf中的其他项一致；</li>\n<li>ip地址，子网掩码和网关地址一定要和服务器一致；<br>ksdevice是主网卡</li>\n<li>method后面的地址是新Linux系统的安装文件地址。如果这些配置有一项出错，就会导致远程安装失败。</li>\n</ul>\n<h4 id=\"4、开始安装\"><a href=\"#4、开始安装\" class=\"headerlink\" title=\"4、开始安装\"></a>4、开始安装</h4><p>ping服务器ip，ping通时，打开vnc重新连接<strong>IP:1</strong>或<strong>IP:5901</strong>，开始安装centos<br>此时主机端显示</p>\n<p>安装好后重启系统，<strong>登陆用户，root 密码，静态IP</strong>等不变。</p>\n"},{"title":"iptables防火墙","date":"2016-11-02T08:08:29.000Z","_content":"\n#### 网上看到一篇博客，讲的很详细，摘录分享。\n\niptables 是一个安装在Ubuntu Server上的默认防火墙。在正常的ubuntu安装过程中，iptables是被安装上了的，但是它默认允许所有的流量(不管防火墙是否是无效的)\n关于iptables有价值的信息很多，但是大多都描述的很复杂。如果你想做些基本的配置，下面的 How To 很适合你。 \n◆ 基本命令 \n键入： \n\n`iptables -L `\n\n列出您当前iptables中在规则。如果您是刚刚建立您的服务器，那么可能此时还没有任何规则，而且您应该看到如下： \n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \n\nChain FORWARD (policy ACCEPT) \ntarget prot opt source destination \n\nChain OUTPUT (policy ACCEPT) \ntarget prot opt source destination \n\n◆ 允许建立会话 \n\n我们可以允许建立会话来接受流量： \n\n`iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT `\n\n◆ 在指定端口上允许入站流量 \n\n阻断所有流量您也可以启动系统，但是您可能正在通过SSH工作，所有在您阻断其他流量前有必要允许SSH流量。 \n\n为了在22端口号(默认的SSH端口)上的允许流量入站，您可以告诉iptables允许您的网卡接受所有的目的端口为22的TCP流量。 \n\n`iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT `\n\n特别的，这将向表中追加(-A)INPUT规则，允许目的端口号为SSH的所有流量进入接口(-i) eth0，以便iptables完成跳转(-j)或动作：ACCEPT \n\n让我们核对下这些规则：(这里仅显示了少数行，您应该看到更多) \n\n`iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \n\n现在，让我们允许所有的web流量 \n\n`iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT `\n\n检查我们现有的规则 \n\n`iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \n\n我们已经指定SSH和web端口为允许通过的TCP流量，但是因为我们还没阻断任何流量，所以到目前为止所有的流量仍然可以进入。 \n\n◆ 阻断流量 \n\n一旦一条规则对一个包进行了匹配，其他规则不再对这个包有效。因为我们的规则首先允许SSH和WEB流量，所以只要我们阻断所有流量的规则紧跟其後，我们依然能接受我们感兴趣的流量。我们要做的仅仅是把阻断所有流量的规则放在最後，所以我们需要再次用到它。 \n\n`iptables -A INPUT -j DROP `\n\n` iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \nDROP all -- anywhere anywhere \n\n因为我们刚才没有指定一个接口或一个协议，所以除了web和ssh流量外其他任何流量都会被阻断。 \n\n◆ 编辑 iptables \n\n到目前为止我们设置过程中唯一的问题是回环端口(loopbakc)也被阻断了。我们本可以通过指定 -i eth0 来仅仅丢弃eth0上的数据包，但我们也可以为回环端口(loopback)添加一条规则。如果我们追加这条规则，这将太晚了----因为所有的流量已经 被丢弃。我们必须插入这条跪着到第4行。 \n\n`iptables -I INPUT 4 -i lo -j ACCEPT `\n\n` iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \nACCEPT all -- anywhere anywhere \nDROP all -- anywhere anywhere \n\n最後2行看起来几乎一样，因此我们可以让iptables列的更详细些。 \n\n` iptables -L -v `\n\n◆ 日志记录 \n\n在上面的例子中，所有的流量都不会被记录。如果您愿意在syslog中记录被丢弃的包, 下面将是最快捷的方式: \n```\niptables -I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix \"iptables denied: \" --log-level 7 ```\n\n看 提示 段获得更多关于logging的ideas. \n\n◆ 保存 iptables \n\n如果您现在要重新启动机器的话，您的iptables配置将会消失。为了不用每次重新启动时敲入这些命令，您可以保存你的配置，让它在系统启动时自动启动。你可以通过iptables-save 和iptables-restore命令来保存配置。 \n\n\n◆ 配置启动时自动加载规则 \n\n保存您的防火墙股则到一个文件 \n\n`iptables-save > /etc/iptables.up.rules `\n\n接着修改**/etc/network/interfaces** 脚本自动应用这些规则(末行是添加的) \n```\nauto eth0 \niface eth0 inet dhcp \npre-up iptables-restore < /etc/iptables.up.rules ```\n\n你也可以准备一组规则并自动应用它 \n```\nauto eth0 \niface eth0 inet dhcp \npre-up iptables-restore < /etc/iptables.up.rules \npost-down iptables-restore < /etc/iptables.down.rules ```\n\n◆ 提示 \n◆ 如果你要在一个规则基础上手动编辑iptables \n\n下面的步骤复习了怎样建立你的防火墙规则，并假定它们相对固定(而且对于大多数人来说它们也应该是)。但是如果你要做许多研究工作，你也许想要你的 iptables在你每次重启时保存一次。你可以在**/etc/network/interfaces ** 里添加像下面的一行: \n```\npre-up iptables-restore < /etc/iptables.up.rules \npost-down iptables-save > /etc/iptables.up.rules #此行将保存规则用于下次启动时使用。```\n\n\n◆ 用iptables-save/restore来测试规则 \n\n如果你超出了这个指南来编辑iptables，你可能想利用iptables-save和iptables-restore来编辑和测试你的规则。你可以通过使用你喜爱的文本编辑器(此处为gedit)来打开这些规则文件来完成编辑。 \n\n```\niptables-save > /etc/iptables.test.rules \ngedit /etc/iptables.test.rules ```\n\n你会得到一个如下类似的文件(下面是紧接上的例子文件)： \n\nGenerated by iptables-save v1.3.1 on Sun Apr 23 06:19:53 2006 \n*filter \n:INPUT ACCEPT [368:102354] \n:FORWARD ACCEPT [0:0] \n:OUTPUT ACCEPT [92952:20764374] \n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT \n-A INPUT -i lo -j ACCEPT \n-A INPUT -m limit --limit 5/min -j LOG --log-prefix \"iptables denied: \" --log-level 7 \n-A INPUT -j DROP \nCOMMIT \n Completed on Sun Apr 23 06:19:53 2006 \n\n注意到这些都是减去iptables命令的iptables语句。随意编辑这些命令、完成後保存它们。然後简单的测试下： \n\n` iptables-restore < /etc/iptables.test.rules `\n\n测试完毕後，如果你还没添加iptables-save命令 到**/etc/network/interfaces** 里面，记得不要丢失了你的更改： \n\n`iptables-save > /etc/iptables.up.rules `\n\n◆ 更详细的日志 \n为了在你的syslog中获得更多细节，你可能想创建一个额外的链。下面是个很简短的例子---我的**/etc/iptables.up.rules** ,它将展示我是如何设置iptables记录到syslog中的： \n\nGenerated by iptables-save v1.3.1 on Sun Apr 23 05:32:09 2006 \n*filter \n:INPUT ACCEPT [273:55355] \n:FORWARD ACCEPT [0:0] \n:LOGNDROP - [0:0] \n:OUTPUT ACCEPT [92376:20668252] \n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT \n-A INPUT -i lo -j ACCEPT \n-A INPUT -j LOGNDROP \n-A LOGNDROP -p tcp -m limit --limit 5/min -j LOG --log-prefix \"Denied TCP: \" --log-level 7 \n-A LOGNDROP -p udp -m limit --limit 5/min -j LOG --log-prefix \"Denied UDP: \" --log-level 7 \n-A LOGNDROP -p icmp -m limit --limit 5/min -j LOG --log-prefix \"Denied ICMP: \" --log-level 7 \n-A LOGNDROP -j DROP \nCOMMIT \nCompleted on Sun Apr 23 05:32:09 2006 \n\n请注意 一个名为 LOGNDROP的链在文件顶部。而且，INPUT链底部标准的DROP被替换成了LOGNDROP，同时添加了协议描述so it makes sense looking at the log。最後我们在LOGNDROP链尾部丢弃了这些流量。下面的行告诉我们发生了什么： \n\n* --limit 设置记录相同规则到syslog中的次数 \n* --log-prefix \"Denied...\" 添加一个前缀使得在syslog中查找更easy \n* --log-level 7 设置syslog的消息级别 (see man syslog for more detail, but you can probably leave this) \n\n◆ 禁用防火墙 \n\n如果您要临时禁用防火墙，您可以通过下面的命令清空所偶的规则： \n\n` iptables -F `\n\n◆ 轻松配置通过 GUI \n\n新手可以利用 Firetarter(一个gui工具)---仓库中的可用软件(新立德或apt-get 获得)来配置她或他的iptables规则，而需要命令行知识。请查看指南，尽管...... 配置很简单，但是对于高级用户来说可能远远不能满足。然而它对于大多数的家庭用户来说是足够的...... 。(我)建议您使用firestarter在策略表中将出站配置为 “限制”，而将您需要的连接类型(如用于http的80、https的443，msn chat的1683等等)加入白名单。您也可以通过它查看进出您计算机的活动连接...... 。防火墙会一直保持下去一旦通过向导配置完毕。拨号用户必须在向导中指定它在拨号时自动启动。 \n\nfirestarter主页： http://www.fs-security.com/ (仓库源中可用, 不需要编译) \n指南: http://www.fs-security.com/docs/tutorial.php \n\n个人笔记：不幸运的是，它没有阻断(或询问用户)特定应用/程序的选项......。因此，我的理解是一旦启用了80端口(例如，用于访问网页)，那么任何程序都可以通过80端口连接任何服务器、做任何它想做的事......\n\n\n\n","source":"_posts/系统管理/2016-11-02-iptables防火墙.md","raw":"---\ntitle: iptables防火墙\ncategories:\n  - 系统管理\ntags:\n  - iptables防火墙\ndate: 2016-11-02 16:08:29\n---\n\n#### 网上看到一篇博客，讲的很详细，摘录分享。\n\niptables 是一个安装在Ubuntu Server上的默认防火墙。在正常的ubuntu安装过程中，iptables是被安装上了的，但是它默认允许所有的流量(不管防火墙是否是无效的)\n关于iptables有价值的信息很多，但是大多都描述的很复杂。如果你想做些基本的配置，下面的 How To 很适合你。 \n◆ 基本命令 \n键入： \n\n`iptables -L `\n\n列出您当前iptables中在规则。如果您是刚刚建立您的服务器，那么可能此时还没有任何规则，而且您应该看到如下： \n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \n\nChain FORWARD (policy ACCEPT) \ntarget prot opt source destination \n\nChain OUTPUT (policy ACCEPT) \ntarget prot opt source destination \n\n◆ 允许建立会话 \n\n我们可以允许建立会话来接受流量： \n\n`iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT `\n\n◆ 在指定端口上允许入站流量 \n\n阻断所有流量您也可以启动系统，但是您可能正在通过SSH工作，所有在您阻断其他流量前有必要允许SSH流量。 \n\n为了在22端口号(默认的SSH端口)上的允许流量入站，您可以告诉iptables允许您的网卡接受所有的目的端口为22的TCP流量。 \n\n`iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT `\n\n特别的，这将向表中追加(-A)INPUT规则，允许目的端口号为SSH的所有流量进入接口(-i) eth0，以便iptables完成跳转(-j)或动作：ACCEPT \n\n让我们核对下这些规则：(这里仅显示了少数行，您应该看到更多) \n\n`iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \n\n现在，让我们允许所有的web流量 \n\n`iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT `\n\n检查我们现有的规则 \n\n`iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \n\n我们已经指定SSH和web端口为允许通过的TCP流量，但是因为我们还没阻断任何流量，所以到目前为止所有的流量仍然可以进入。 \n\n◆ 阻断流量 \n\n一旦一条规则对一个包进行了匹配，其他规则不再对这个包有效。因为我们的规则首先允许SSH和WEB流量，所以只要我们阻断所有流量的规则紧跟其後，我们依然能接受我们感兴趣的流量。我们要做的仅仅是把阻断所有流量的规则放在最後，所以我们需要再次用到它。 \n\n`iptables -A INPUT -j DROP `\n\n` iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \nDROP all -- anywhere anywhere \n\n因为我们刚才没有指定一个接口或一个协议，所以除了web和ssh流量外其他任何流量都会被阻断。 \n\n◆ 编辑 iptables \n\n到目前为止我们设置过程中唯一的问题是回环端口(loopbakc)也被阻断了。我们本可以通过指定 -i eth0 来仅仅丢弃eth0上的数据包，但我们也可以为回环端口(loopback)添加一条规则。如果我们追加这条规则，这将太晚了----因为所有的流量已经 被丢弃。我们必须插入这条跪着到第4行。 \n\n`iptables -I INPUT 4 -i lo -j ACCEPT `\n\n` iptables -L `\n\nChain INPUT (policy ACCEPT) \ntarget prot opt source destination \nACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED \nACCEPT tcp -- anywhere anywhere tcp dpt:ssh \nACCEPT tcp -- anywhere anywhere tcp dpt:www \nACCEPT all -- anywhere anywhere \nDROP all -- anywhere anywhere \n\n最後2行看起来几乎一样，因此我们可以让iptables列的更详细些。 \n\n` iptables -L -v `\n\n◆ 日志记录 \n\n在上面的例子中，所有的流量都不会被记录。如果您愿意在syslog中记录被丢弃的包, 下面将是最快捷的方式: \n```\niptables -I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix \"iptables denied: \" --log-level 7 ```\n\n看 提示 段获得更多关于logging的ideas. \n\n◆ 保存 iptables \n\n如果您现在要重新启动机器的话，您的iptables配置将会消失。为了不用每次重新启动时敲入这些命令，您可以保存你的配置，让它在系统启动时自动启动。你可以通过iptables-save 和iptables-restore命令来保存配置。 \n\n\n◆ 配置启动时自动加载规则 \n\n保存您的防火墙股则到一个文件 \n\n`iptables-save > /etc/iptables.up.rules `\n\n接着修改**/etc/network/interfaces** 脚本自动应用这些规则(末行是添加的) \n```\nauto eth0 \niface eth0 inet dhcp \npre-up iptables-restore < /etc/iptables.up.rules ```\n\n你也可以准备一组规则并自动应用它 \n```\nauto eth0 \niface eth0 inet dhcp \npre-up iptables-restore < /etc/iptables.up.rules \npost-down iptables-restore < /etc/iptables.down.rules ```\n\n◆ 提示 \n◆ 如果你要在一个规则基础上手动编辑iptables \n\n下面的步骤复习了怎样建立你的防火墙规则，并假定它们相对固定(而且对于大多数人来说它们也应该是)。但是如果你要做许多研究工作，你也许想要你的 iptables在你每次重启时保存一次。你可以在**/etc/network/interfaces ** 里添加像下面的一行: \n```\npre-up iptables-restore < /etc/iptables.up.rules \npost-down iptables-save > /etc/iptables.up.rules #此行将保存规则用于下次启动时使用。```\n\n\n◆ 用iptables-save/restore来测试规则 \n\n如果你超出了这个指南来编辑iptables，你可能想利用iptables-save和iptables-restore来编辑和测试你的规则。你可以通过使用你喜爱的文本编辑器(此处为gedit)来打开这些规则文件来完成编辑。 \n\n```\niptables-save > /etc/iptables.test.rules \ngedit /etc/iptables.test.rules ```\n\n你会得到一个如下类似的文件(下面是紧接上的例子文件)： \n\nGenerated by iptables-save v1.3.1 on Sun Apr 23 06:19:53 2006 \n*filter \n:INPUT ACCEPT [368:102354] \n:FORWARD ACCEPT [0:0] \n:OUTPUT ACCEPT [92952:20764374] \n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT \n-A INPUT -i lo -j ACCEPT \n-A INPUT -m limit --limit 5/min -j LOG --log-prefix \"iptables denied: \" --log-level 7 \n-A INPUT -j DROP \nCOMMIT \n Completed on Sun Apr 23 06:19:53 2006 \n\n注意到这些都是减去iptables命令的iptables语句。随意编辑这些命令、完成後保存它们。然後简单的测试下： \n\n` iptables-restore < /etc/iptables.test.rules `\n\n测试完毕後，如果你还没添加iptables-save命令 到**/etc/network/interfaces** 里面，记得不要丢失了你的更改： \n\n`iptables-save > /etc/iptables.up.rules `\n\n◆ 更详细的日志 \n为了在你的syslog中获得更多细节，你可能想创建一个额外的链。下面是个很简短的例子---我的**/etc/iptables.up.rules** ,它将展示我是如何设置iptables记录到syslog中的： \n\nGenerated by iptables-save v1.3.1 on Sun Apr 23 05:32:09 2006 \n*filter \n:INPUT ACCEPT [273:55355] \n:FORWARD ACCEPT [0:0] \n:LOGNDROP - [0:0] \n:OUTPUT ACCEPT [92376:20668252] \n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT \n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT \n-A INPUT -i lo -j ACCEPT \n-A INPUT -j LOGNDROP \n-A LOGNDROP -p tcp -m limit --limit 5/min -j LOG --log-prefix \"Denied TCP: \" --log-level 7 \n-A LOGNDROP -p udp -m limit --limit 5/min -j LOG --log-prefix \"Denied UDP: \" --log-level 7 \n-A LOGNDROP -p icmp -m limit --limit 5/min -j LOG --log-prefix \"Denied ICMP: \" --log-level 7 \n-A LOGNDROP -j DROP \nCOMMIT \nCompleted on Sun Apr 23 05:32:09 2006 \n\n请注意 一个名为 LOGNDROP的链在文件顶部。而且，INPUT链底部标准的DROP被替换成了LOGNDROP，同时添加了协议描述so it makes sense looking at the log。最後我们在LOGNDROP链尾部丢弃了这些流量。下面的行告诉我们发生了什么： \n\n* --limit 设置记录相同规则到syslog中的次数 \n* --log-prefix \"Denied...\" 添加一个前缀使得在syslog中查找更easy \n* --log-level 7 设置syslog的消息级别 (see man syslog for more detail, but you can probably leave this) \n\n◆ 禁用防火墙 \n\n如果您要临时禁用防火墙，您可以通过下面的命令清空所偶的规则： \n\n` iptables -F `\n\n◆ 轻松配置通过 GUI \n\n新手可以利用 Firetarter(一个gui工具)---仓库中的可用软件(新立德或apt-get 获得)来配置她或他的iptables规则，而需要命令行知识。请查看指南，尽管...... 配置很简单，但是对于高级用户来说可能远远不能满足。然而它对于大多数的家庭用户来说是足够的...... 。(我)建议您使用firestarter在策略表中将出站配置为 “限制”，而将您需要的连接类型(如用于http的80、https的443，msn chat的1683等等)加入白名单。您也可以通过它查看进出您计算机的活动连接...... 。防火墙会一直保持下去一旦通过向导配置完毕。拨号用户必须在向导中指定它在拨号时自动启动。 \n\nfirestarter主页： http://www.fs-security.com/ (仓库源中可用, 不需要编译) \n指南: http://www.fs-security.com/docs/tutorial.php \n\n个人笔记：不幸运的是，它没有阻断(或询问用户)特定应用/程序的选项......。因此，我的理解是一旦启用了80端口(例如，用于访问网页)，那么任何程序都可以通过80端口连接任何服务器、做任何它想做的事......\n\n\n\n","slug":"系统管理-2016-11-02-iptables防火墙","published":1,"updated":"2016-11-02T08:22:09.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnvp001v0gpk8nx9u2sb","content":"<h4 id=\"网上看到一篇博客，讲的很详细，摘录分享。\"><a href=\"#网上看到一篇博客，讲的很详细，摘录分享。\" class=\"headerlink\" title=\"网上看到一篇博客，讲的很详细，摘录分享。\"></a>网上看到一篇博客，讲的很详细，摘录分享。</h4><p>iptables 是一个安装在Ubuntu Server上的默认防火墙。在正常的ubuntu安装过程中，iptables是被安装上了的，但是它默认允许所有的流量(不管防火墙是否是无效的)<br>关于iptables有价值的信息很多，但是大多都描述的很复杂。如果你想做些基本的配置，下面的 How To 很适合你。<br>◆ 基本命令<br>键入： </p>\n<p><code>iptables -L</code></p>\n<p>列出您当前iptables中在规则。如果您是刚刚建立您的服务器，那么可能此时还没有任何规则，而且您应该看到如下： </p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination </p>\n<p>Chain FORWARD (policy ACCEPT)<br>target prot opt source destination </p>\n<p>Chain OUTPUT (policy ACCEPT)<br>target prot opt source destination </p>\n<p>◆ 允许建立会话 </p>\n<p>我们可以允许建立会话来接受流量： </p>\n<p><code>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</code></p>\n<p>◆ 在指定端口上允许入站流量 </p>\n<p>阻断所有流量您也可以启动系统，但是您可能正在通过SSH工作，所有在您阻断其他流量前有必要允许SSH流量。 </p>\n<p>为了在22端口号(默认的SSH端口)上的允许流量入站，您可以告诉iptables允许您的网卡接受所有的目的端口为22的TCP流量。 </p>\n<p><code>iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT</code></p>\n<p>特别的，这将向表中追加(-A)INPUT规则，允许目的端口号为SSH的所有流量进入接口(-i) eth0，以便iptables完成跳转(-j)或动作：ACCEPT </p>\n<p>让我们核对下这些规则：(这里仅显示了少数行，您应该看到更多) </p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh </p>\n<p>现在，让我们允许所有的web流量 </p>\n<p><code>iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT</code></p>\n<p>检查我们现有的规则 </p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www </p>\n<p>我们已经指定SSH和web端口为允许通过的TCP流量，但是因为我们还没阻断任何流量，所以到目前为止所有的流量仍然可以进入。 </p>\n<p>◆ 阻断流量 </p>\n<p>一旦一条规则对一个包进行了匹配，其他规则不再对这个包有效。因为我们的规则首先允许SSH和WEB流量，所以只要我们阻断所有流量的规则紧跟其後，我们依然能接受我们感兴趣的流量。我们要做的仅仅是把阻断所有流量的规则放在最後，所以我们需要再次用到它。 </p>\n<p><code>iptables -A INPUT -j DROP</code></p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www<br>DROP all – anywhere anywhere </p>\n<p>因为我们刚才没有指定一个接口或一个协议，所以除了web和ssh流量外其他任何流量都会被阻断。 </p>\n<p>◆ 编辑 iptables </p>\n<p>到目前为止我们设置过程中唯一的问题是回环端口(loopbakc)也被阻断了。我们本可以通过指定 -i eth0 来仅仅丢弃eth0上的数据包，但我们也可以为回环端口(loopback)添加一条规则。如果我们追加这条规则，这将太晚了—-因为所有的流量已经 被丢弃。我们必须插入这条跪着到第4行。 </p>\n<p><code>iptables -I INPUT 4 -i lo -j ACCEPT</code></p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www<br>ACCEPT all – anywhere anywhere<br>DROP all – anywhere anywhere </p>\n<p>最後2行看起来几乎一样，因此我们可以让iptables列的更详细些。 </p>\n<p><code>iptables -L -v</code></p>\n<p>◆ 日志记录 </p>\n<p>在上面的例子中，所有的流量都不会被记录。如果您愿意在syslog中记录被丢弃的包, 下面将是最快捷的方式:<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iptables -I INPUT <span class=\"number\">5</span> -m <span class=\"built_in\">limit</span> --<span class=\"built_in\">limit</span> <span class=\"number\">5</span>/<span class=\"built_in\">min</span> -j LOG --<span class=\"built_in\">log</span>-<span class=\"built_in\">prefix</span> <span class=\"string\">\"iptables denied: \"</span> --<span class=\"built_in\">log</span>-level <span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p>看 提示 段获得更多关于logging的ideas. </p>\n<p>◆ 保存 iptables </p>\n<p>如果您现在要重新启动机器的话，您的iptables配置将会消失。为了不用每次重新启动时敲入这些命令，您可以保存你的配置，让它在系统启动时自动启动。你可以通过iptables-save 和iptables-restore命令来保存配置。 </p>\n<p>◆ 配置启动时自动加载规则 </p>\n<p>保存您的防火墙股则到一个文件 </p>\n<p><code>iptables-save &gt; /etc/iptables.up.rules</code></p>\n<p>接着修改<strong>/etc/network/interfaces</strong> 脚本自动应用这些规则(末行是添加的)<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">auto</span> eth0 </div><div class=\"line\">iface eth0 inet dhcp </div><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure></p>\n<p>你也可以准备一组规则并自动应用它<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">auto</span> eth0 </div><div class=\"line\">iface eth0 inet dhcp </div><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">post-down iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.down</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure></p>\n<p>◆ 提示<br>◆ 如果你要在一个规则基础上手动编辑iptables </p>\n<p>下面的步骤复习了怎样建立你的防火墙规则，并假定它们相对固定(而且对于大多数人来说它们也应该是)。但是如果你要做许多研究工作，你也许想要你的 iptables在你每次重启时保存一次。你可以在<strong>/etc/network/interfaces </strong> 里添加像下面的一行:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">post-down iptables-save &gt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> #此行将保存规则用于下次启动时使用。</div></pre></td></tr></table></figure></p>\n<p>◆ 用iptables-save/restore来测试规则 </p>\n<p>如果你超出了这个指南来编辑iptables，你可能想利用iptables-save和iptables-restore来编辑和测试你的规则。你可以通过使用你喜爱的文本编辑器(此处为gedit)来打开这些规则文件来完成编辑。 </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">iptables-save &gt; /etc/iptables<span class=\"selector-class\">.test</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">gedit /etc/iptables<span class=\"selector-class\">.test</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure>\n<p>你会得到一个如下类似的文件(下面是紧接上的例子文件)： </p>\n<p>Generated by iptables-save v1.3.1 on Sun Apr 23 06:19:53 2006<br>*filter<br>:INPUT ACCEPT [368:102354]<br>:FORWARD ACCEPT [0:0]<br>:OUTPUT ACCEPT [92952:20764374]<br>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -m limit –limit 5/min -j LOG –log-prefix “iptables denied: “ –log-level 7<br>-A INPUT -j DROP<br>COMMIT<br> Completed on Sun Apr 23 06:19:53 2006 </p>\n<p>注意到这些都是减去iptables命令的iptables语句。随意编辑这些命令、完成後保存它们。然後简单的测试下： </p>\n<p><code>iptables-restore &lt; /etc/iptables.test.rules</code></p>\n<p>测试完毕後，如果你还没添加iptables-save命令 到<strong>/etc/network/interfaces</strong> 里面，记得不要丢失了你的更改： </p>\n<p><code>iptables-save &gt; /etc/iptables.up.rules</code></p>\n<p>◆ 更详细的日志<br>为了在你的syslog中获得更多细节，你可能想创建一个额外的链。下面是个很简短的例子—我的<strong>/etc/iptables.up.rules</strong> ,它将展示我是如何设置iptables记录到syslog中的： </p>\n<p>Generated by iptables-save v1.3.1 on Sun Apr 23 05:32:09 2006<br>*filter<br>:INPUT ACCEPT [273:55355]<br>:FORWARD ACCEPT [0:0]<br>:LOGNDROP - [0:0]<br>:OUTPUT ACCEPT [92376:20668252]<br>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -j LOGNDROP<br>-A LOGNDROP -p tcp -m limit –limit 5/min -j LOG –log-prefix “Denied TCP: “ –log-level 7<br>-A LOGNDROP -p udp -m limit –limit 5/min -j LOG –log-prefix “Denied UDP: “ –log-level 7<br>-A LOGNDROP -p icmp -m limit –limit 5/min -j LOG –log-prefix “Denied ICMP: “ –log-level 7<br>-A LOGNDROP -j DROP<br>COMMIT<br>Completed on Sun Apr 23 05:32:09 2006 </p>\n<p>请注意 一个名为 LOGNDROP的链在文件顶部。而且，INPUT链底部标准的DROP被替换成了LOGNDROP，同时添加了协议描述so it makes sense looking at the log。最後我们在LOGNDROP链尾部丢弃了这些流量。下面的行告诉我们发生了什么： </p>\n<ul>\n<li>–limit 设置记录相同规则到syslog中的次数 </li>\n<li>–log-prefix “Denied…” 添加一个前缀使得在syslog中查找更easy </li>\n<li>–log-level 7 设置syslog的消息级别 (see man syslog for more detail, but you can probably leave this) </li>\n</ul>\n<p>◆ 禁用防火墙 </p>\n<p>如果您要临时禁用防火墙，您可以通过下面的命令清空所偶的规则： </p>\n<p><code>iptables -F</code></p>\n<p>◆ 轻松配置通过 GUI </p>\n<p>新手可以利用 Firetarter(一个gui工具)—仓库中的可用软件(新立德或apt-get 获得)来配置她或他的iptables规则，而需要命令行知识。请查看指南，尽管…… 配置很简单，但是对于高级用户来说可能远远不能满足。然而它对于大多数的家庭用户来说是足够的…… 。(我)建议您使用firestarter在策略表中将出站配置为 “限制”，而将您需要的连接类型(如用于http的80、https的443，msn chat的1683等等)加入白名单。您也可以通过它查看进出您计算机的活动连接…… 。防火墙会一直保持下去一旦通过向导配置完毕。拨号用户必须在向导中指定它在拨号时自动启动。 </p>\n<p>firestarter主页： <a href=\"http://www.fs-security.com/\" target=\"_blank\" rel=\"external\">http://www.fs-security.com/</a> (仓库源中可用, 不需要编译)<br>指南: <a href=\"http://www.fs-security.com/docs/tutorial.php\" target=\"_blank\" rel=\"external\">http://www.fs-security.com/docs/tutorial.php</a> </p>\n<p>个人笔记：不幸运的是，它没有阻断(或询问用户)特定应用/程序的选项……。因此，我的理解是一旦启用了80端口(例如，用于访问网页)，那么任何程序都可以通过80端口连接任何服务器、做任何它想做的事……</p>\n","excerpt":"","more":"<h4 id=\"网上看到一篇博客，讲的很详细，摘录分享。\"><a href=\"#网上看到一篇博客，讲的很详细，摘录分享。\" class=\"headerlink\" title=\"网上看到一篇博客，讲的很详细，摘录分享。\"></a>网上看到一篇博客，讲的很详细，摘录分享。</h4><p>iptables 是一个安装在Ubuntu Server上的默认防火墙。在正常的ubuntu安装过程中，iptables是被安装上了的，但是它默认允许所有的流量(不管防火墙是否是无效的)<br>关于iptables有价值的信息很多，但是大多都描述的很复杂。如果你想做些基本的配置，下面的 How To 很适合你。<br>◆ 基本命令<br>键入： </p>\n<p><code>iptables -L</code></p>\n<p>列出您当前iptables中在规则。如果您是刚刚建立您的服务器，那么可能此时还没有任何规则，而且您应该看到如下： </p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination </p>\n<p>Chain FORWARD (policy ACCEPT)<br>target prot opt source destination </p>\n<p>Chain OUTPUT (policy ACCEPT)<br>target prot opt source destination </p>\n<p>◆ 允许建立会话 </p>\n<p>我们可以允许建立会话来接受流量： </p>\n<p><code>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</code></p>\n<p>◆ 在指定端口上允许入站流量 </p>\n<p>阻断所有流量您也可以启动系统，但是您可能正在通过SSH工作，所有在您阻断其他流量前有必要允许SSH流量。 </p>\n<p>为了在22端口号(默认的SSH端口)上的允许流量入站，您可以告诉iptables允许您的网卡接受所有的目的端口为22的TCP流量。 </p>\n<p><code>iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT</code></p>\n<p>特别的，这将向表中追加(-A)INPUT规则，允许目的端口号为SSH的所有流量进入接口(-i) eth0，以便iptables完成跳转(-j)或动作：ACCEPT </p>\n<p>让我们核对下这些规则：(这里仅显示了少数行，您应该看到更多) </p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh </p>\n<p>现在，让我们允许所有的web流量 </p>\n<p><code>iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT</code></p>\n<p>检查我们现有的规则 </p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www </p>\n<p>我们已经指定SSH和web端口为允许通过的TCP流量，但是因为我们还没阻断任何流量，所以到目前为止所有的流量仍然可以进入。 </p>\n<p>◆ 阻断流量 </p>\n<p>一旦一条规则对一个包进行了匹配，其他规则不再对这个包有效。因为我们的规则首先允许SSH和WEB流量，所以只要我们阻断所有流量的规则紧跟其後，我们依然能接受我们感兴趣的流量。我们要做的仅仅是把阻断所有流量的规则放在最後，所以我们需要再次用到它。 </p>\n<p><code>iptables -A INPUT -j DROP</code></p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www<br>DROP all – anywhere anywhere </p>\n<p>因为我们刚才没有指定一个接口或一个协议，所以除了web和ssh流量外其他任何流量都会被阻断。 </p>\n<p>◆ 编辑 iptables </p>\n<p>到目前为止我们设置过程中唯一的问题是回环端口(loopbakc)也被阻断了。我们本可以通过指定 -i eth0 来仅仅丢弃eth0上的数据包，但我们也可以为回环端口(loopback)添加一条规则。如果我们追加这条规则，这将太晚了—-因为所有的流量已经 被丢弃。我们必须插入这条跪着到第4行。 </p>\n<p><code>iptables -I INPUT 4 -i lo -j ACCEPT</code></p>\n<p><code>iptables -L</code></p>\n<p>Chain INPUT (policy ACCEPT)<br>target prot opt source destination<br>ACCEPT all – anywhere anywhere state RELATED,ESTABLISHED<br>ACCEPT tcp – anywhere anywhere tcp dpt:ssh<br>ACCEPT tcp – anywhere anywhere tcp dpt:www<br>ACCEPT all – anywhere anywhere<br>DROP all – anywhere anywhere </p>\n<p>最後2行看起来几乎一样，因此我们可以让iptables列的更详细些。 </p>\n<p><code>iptables -L -v</code></p>\n<p>◆ 日志记录 </p>\n<p>在上面的例子中，所有的流量都不会被记录。如果您愿意在syslog中记录被丢弃的包, 下面将是最快捷的方式:<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iptables -I INPUT <span class=\"number\">5</span> -m <span class=\"built_in\">limit</span> --<span class=\"built_in\">limit</span> <span class=\"number\">5</span>/<span class=\"built_in\">min</span> -j LOG --<span class=\"built_in\">log</span>-<span class=\"built_in\">prefix</span> <span class=\"string\">\"iptables denied: \"</span> --<span class=\"built_in\">log</span>-level <span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p>看 提示 段获得更多关于logging的ideas. </p>\n<p>◆ 保存 iptables </p>\n<p>如果您现在要重新启动机器的话，您的iptables配置将会消失。为了不用每次重新启动时敲入这些命令，您可以保存你的配置，让它在系统启动时自动启动。你可以通过iptables-save 和iptables-restore命令来保存配置。 </p>\n<p>◆ 配置启动时自动加载规则 </p>\n<p>保存您的防火墙股则到一个文件 </p>\n<p><code>iptables-save &gt; /etc/iptables.up.rules</code></p>\n<p>接着修改<strong>/etc/network/interfaces</strong> 脚本自动应用这些规则(末行是添加的)<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">auto</span> eth0 </div><div class=\"line\">iface eth0 inet dhcp </div><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure></p>\n<p>你也可以准备一组规则并自动应用它<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">auto</span> eth0 </div><div class=\"line\">iface eth0 inet dhcp </div><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">post-down iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.down</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure></p>\n<p>◆ 提示<br>◆ 如果你要在一个规则基础上手动编辑iptables </p>\n<p>下面的步骤复习了怎样建立你的防火墙规则，并假定它们相对固定(而且对于大多数人来说它们也应该是)。但是如果你要做许多研究工作，你也许想要你的 iptables在你每次重启时保存一次。你可以在<strong>/etc/network/interfaces </strong> 里添加像下面的一行:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pre-up iptables-restore &lt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">post-down iptables-save &gt; /etc/iptables<span class=\"selector-class\">.up</span><span class=\"selector-class\">.rules</span> #此行将保存规则用于下次启动时使用。</div></pre></td></tr></table></figure></p>\n<p>◆ 用iptables-save/restore来测试规则 </p>\n<p>如果你超出了这个指南来编辑iptables，你可能想利用iptables-save和iptables-restore来编辑和测试你的规则。你可以通过使用你喜爱的文本编辑器(此处为gedit)来打开这些规则文件来完成编辑。 </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">iptables-save &gt; /etc/iptables<span class=\"selector-class\">.test</span><span class=\"selector-class\">.rules</span> </div><div class=\"line\">gedit /etc/iptables<span class=\"selector-class\">.test</span><span class=\"selector-class\">.rules</span></div></pre></td></tr></table></figure>\n<p>你会得到一个如下类似的文件(下面是紧接上的例子文件)： </p>\n<p>Generated by iptables-save v1.3.1 on Sun Apr 23 06:19:53 2006<br>*filter<br>:INPUT ACCEPT [368:102354]<br>:FORWARD ACCEPT [0:0]<br>:OUTPUT ACCEPT [92952:20764374]<br>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -m limit –limit 5/min -j LOG –log-prefix “iptables denied: “ –log-level 7<br>-A INPUT -j DROP<br>COMMIT<br> Completed on Sun Apr 23 06:19:53 2006 </p>\n<p>注意到这些都是减去iptables命令的iptables语句。随意编辑这些命令、完成後保存它们。然後简单的测试下： </p>\n<p><code>iptables-restore &lt; /etc/iptables.test.rules</code></p>\n<p>测试完毕後，如果你还没添加iptables-save命令 到<strong>/etc/network/interfaces</strong> 里面，记得不要丢失了你的更改： </p>\n<p><code>iptables-save &gt; /etc/iptables.up.rules</code></p>\n<p>◆ 更详细的日志<br>为了在你的syslog中获得更多细节，你可能想创建一个额外的链。下面是个很简短的例子—我的<strong>/etc/iptables.up.rules</strong> ,它将展示我是如何设置iptables记录到syslog中的： </p>\n<p>Generated by iptables-save v1.3.1 on Sun Apr 23 05:32:09 2006<br>*filter<br>:INPUT ACCEPT [273:55355]<br>:FORWARD ACCEPT [0:0]<br>:LOGNDROP - [0:0]<br>:OUTPUT ACCEPT [92376:20668252]<br>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 22 -j ACCEPT<br>-A INPUT -i eth0 -p tcp -m tcp –dport 80 -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -j LOGNDROP<br>-A LOGNDROP -p tcp -m limit –limit 5/min -j LOG –log-prefix “Denied TCP: “ –log-level 7<br>-A LOGNDROP -p udp -m limit –limit 5/min -j LOG –log-prefix “Denied UDP: “ –log-level 7<br>-A LOGNDROP -p icmp -m limit –limit 5/min -j LOG –log-prefix “Denied ICMP: “ –log-level 7<br>-A LOGNDROP -j DROP<br>COMMIT<br>Completed on Sun Apr 23 05:32:09 2006 </p>\n<p>请注意 一个名为 LOGNDROP的链在文件顶部。而且，INPUT链底部标准的DROP被替换成了LOGNDROP，同时添加了协议描述so it makes sense looking at the log。最後我们在LOGNDROP链尾部丢弃了这些流量。下面的行告诉我们发生了什么： </p>\n<ul>\n<li>–limit 设置记录相同规则到syslog中的次数 </li>\n<li>–log-prefix “Denied…” 添加一个前缀使得在syslog中查找更easy </li>\n<li>–log-level 7 设置syslog的消息级别 (see man syslog for more detail, but you can probably leave this) </li>\n</ul>\n<p>◆ 禁用防火墙 </p>\n<p>如果您要临时禁用防火墙，您可以通过下面的命令清空所偶的规则： </p>\n<p><code>iptables -F</code></p>\n<p>◆ 轻松配置通过 GUI </p>\n<p>新手可以利用 Firetarter(一个gui工具)—仓库中的可用软件(新立德或apt-get 获得)来配置她或他的iptables规则，而需要命令行知识。请查看指南，尽管…… 配置很简单，但是对于高级用户来说可能远远不能满足。然而它对于大多数的家庭用户来说是足够的…… 。(我)建议您使用firestarter在策略表中将出站配置为 “限制”，而将您需要的连接类型(如用于http的80、https的443，msn chat的1683等等)加入白名单。您也可以通过它查看进出您计算机的活动连接…… 。防火墙会一直保持下去一旦通过向导配置完毕。拨号用户必须在向导中指定它在拨号时自动启动。 </p>\n<p>firestarter主页： <a href=\"http://www.fs-security.com/\">http://www.fs-security.com/</a> (仓库源中可用, 不需要编译)<br>指南: <a href=\"http://www.fs-security.com/docs/tutorial.php\">http://www.fs-security.com/docs/tutorial.php</a> </p>\n<p>个人笔记：不幸运的是，它没有阻断(或询问用户)特定应用/程序的选项……。因此，我的理解是一旦启用了80端口(例如，用于访问网页)，那么任何程序都可以通过80端口连接任何服务器、做任何它想做的事……</p>\n"},{"title":"Docker安装","date":"2016-11-03T04:23:58.000Z","_content":"\nDocker官网下载：https://www.docker.com/products/overview\n\n官方文档：https://docs.docker.com/\n\n官方安装文档：https://docs.docker.com/engine/installation/\n\n---\n# Centos 7\n### 1、root用户登录，`uname -r`确保内核版本大于等于3.10\n`yum update`更新系统\n### 2、加入Docker源\n```\ntee /etc/yum.repos.d/docker.repo <<-'EOF'\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF```\n### 3、安装：\n```\nyum install docker-engine\nsystemctl enable docker.service\nsystemctl start docker```\n\n---\n\n# Windows\n下载最新exe安装包进行安装。\nhttps://github.com/boot2docker/windows-installer/releases\n\n---\n\n# Ubuntu 14 && Ubuntu 16\n### 1、root用户登录，`uname -r`确保内核版本大于等于3.10\n### 2、加入Docker源\n```\napt-get update\napt-get install apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D```\n##### 选择对应版本在终端运行命令\nTrusty 14.04 (LTS)\t`deb https://apt.dockerproject.org/repo ubuntu-trusty main`\nXenial 16.04 (LTS)\t`deb https://apt.dockerproject.org/repo ubuntu-xenial main`\n```\necho \"<REPO>\" | sudo tee /etc/apt/sources.list.d/docker.list\napt-get update\napt-cache policy docker-engine```\n### 3、安装：\n```\napt-get update\napt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\napt-get install docker-engine\nservice docker start\n```\n---\n\n# Mac\n1 安装\n下载最新pkg格式安装包：Boot2Docker-1.3.2.pkg进行安装。\n**https://github.com/boot2docker/osx-installer/releases/latest**\n\n\n或者手动初始化Boot2Docker，打开终端并运行:\n```\nboot2docker init\nboot2docker start\nexport DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375```\n\n一旦你初始化化好了一个虚拟机，你就能用boot2docker stop和boot2docker start来进行控制。\n安装好后带有virtualBox虚拟机。\n\n更新\n* 1.下载最新版的Docker for OS X Installer\n* 2.运行安装程序, 更新VirtualBox和Boot2Docker管理工具。\n* 3.更新现有虚拟机，打开终端并运行:\n\n```\nboot2docker stop\nboot2docker download\nboot2docker start```\n\n\n### Brew方式安装\n```\nbrew update\nbrew install docker\nbrew link docker\nbrew link boot2docker```\n\n当用brew安装某个应用后，但没有成功创建brew link（比如，link的目录已经存在相同的老版本文件导致link创建失败），此时可以将老版本删除，然后再次执行`brew link xxx`就可以创建link了，之后就可以使用brew安装的新版本了。\n\n注：`ls -lh /usr/local/bin/*docker*` 　就可以看到Docker安装的位置。\n\n**Boot2Docker的缺省用户名为docker，密码为tcuser。**\n\n## 运行Docker\n在终端上跑一个“hello world” 的示例来测试Docker。启动虚拟机然后运行：\n`docker run ubuntu echo hello world`\n这样应该会下载ubuntu镜像并打印hello world。\n\n## 容器端口跳转\n最新版的boot2docker建立了一个仅有网络适配器的主机提供可以接入容器的端口。\n如果你运行一个有公开端口的容器，\n\n`docker run --rm -i -t -p 80:80 nginx`\n然后你应该能用IP地址接入Nginx服务器:\n\n`boot2docker ip` 显示当前IP\n这个IP地址可能被VirtualBox启用的DHCP修改。\n\n#### Boot2Docker管理工具提供了很多命令:\n`./boot2docker [<options>] [<args>]`\n\n参数：**{help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete**\n**|download|version} **","source":"_posts/虚拟化/2016-11-03-Docker安装.md","raw":"---\ntitle: Docker安装\ncategories:\n  - 虚拟化\ntags:\n  - Docker安装\ndate: 2016-11-03 12:23:58\n---\n\nDocker官网下载：https://www.docker.com/products/overview\n\n官方文档：https://docs.docker.com/\n\n官方安装文档：https://docs.docker.com/engine/installation/\n\n---\n# Centos 7\n### 1、root用户登录，`uname -r`确保内核版本大于等于3.10\n`yum update`更新系统\n### 2、加入Docker源\n```\ntee /etc/yum.repos.d/docker.repo <<-'EOF'\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF```\n### 3、安装：\n```\nyum install docker-engine\nsystemctl enable docker.service\nsystemctl start docker```\n\n---\n\n# Windows\n下载最新exe安装包进行安装。\nhttps://github.com/boot2docker/windows-installer/releases\n\n---\n\n# Ubuntu 14 && Ubuntu 16\n### 1、root用户登录，`uname -r`确保内核版本大于等于3.10\n### 2、加入Docker源\n```\napt-get update\napt-get install apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D```\n##### 选择对应版本在终端运行命令\nTrusty 14.04 (LTS)\t`deb https://apt.dockerproject.org/repo ubuntu-trusty main`\nXenial 16.04 (LTS)\t`deb https://apt.dockerproject.org/repo ubuntu-xenial main`\n```\necho \"<REPO>\" | sudo tee /etc/apt/sources.list.d/docker.list\napt-get update\napt-cache policy docker-engine```\n### 3、安装：\n```\napt-get update\napt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\napt-get install docker-engine\nservice docker start\n```\n---\n\n# Mac\n1 安装\n下载最新pkg格式安装包：Boot2Docker-1.3.2.pkg进行安装。\n**https://github.com/boot2docker/osx-installer/releases/latest**\n\n\n或者手动初始化Boot2Docker，打开终端并运行:\n```\nboot2docker init\nboot2docker start\nexport DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375```\n\n一旦你初始化化好了一个虚拟机，你就能用boot2docker stop和boot2docker start来进行控制。\n安装好后带有virtualBox虚拟机。\n\n更新\n* 1.下载最新版的Docker for OS X Installer\n* 2.运行安装程序, 更新VirtualBox和Boot2Docker管理工具。\n* 3.更新现有虚拟机，打开终端并运行:\n\n```\nboot2docker stop\nboot2docker download\nboot2docker start```\n\n\n### Brew方式安装\n```\nbrew update\nbrew install docker\nbrew link docker\nbrew link boot2docker```\n\n当用brew安装某个应用后，但没有成功创建brew link（比如，link的目录已经存在相同的老版本文件导致link创建失败），此时可以将老版本删除，然后再次执行`brew link xxx`就可以创建link了，之后就可以使用brew安装的新版本了。\n\n注：`ls -lh /usr/local/bin/*docker*` 　就可以看到Docker安装的位置。\n\n**Boot2Docker的缺省用户名为docker，密码为tcuser。**\n\n## 运行Docker\n在终端上跑一个“hello world” 的示例来测试Docker。启动虚拟机然后运行：\n`docker run ubuntu echo hello world`\n这样应该会下载ubuntu镜像并打印hello world。\n\n## 容器端口跳转\n最新版的boot2docker建立了一个仅有网络适配器的主机提供可以接入容器的端口。\n如果你运行一个有公开端口的容器，\n\n`docker run --rm -i -t -p 80:80 nginx`\n然后你应该能用IP地址接入Nginx服务器:\n\n`boot2docker ip` 显示当前IP\n这个IP地址可能被VirtualBox启用的DHCP修改。\n\n#### Boot2Docker管理工具提供了很多命令:\n`./boot2docker [<options>] [<args>]`\n\n参数：**{help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete**\n**|download|version} **","slug":"虚拟化-2016-11-03-Docker安装","published":1,"updated":"2016-11-03T08:17:40.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnw5001z0gpk0l2bg2im","content":"<p>Docker官网下载：<a href=\"https://www.docker.com/products/overview\" target=\"_blank\" rel=\"external\">https://www.docker.com/products/overview</a></p>\n<p>官方文档：<a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/</a></p>\n<p>官方安装文档：<a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/</a></p>\n<hr>\n<h1 id=\"Centos-7\"><a href=\"#Centos-7\" class=\"headerlink\" title=\"Centos 7\"></a>Centos 7</h1><h3 id=\"1、root用户登录，uname-r确保内核版本大于等于3-10\"><a href=\"#1、root用户登录，uname-r确保内核版本大于等于3-10\" class=\"headerlink\" title=\"1、root用户登录，uname -r确保内核版本大于等于3.10\"></a>1、root用户登录，<code>uname -r</code>确保内核版本大于等于3.10</h3><p><code>yum update</code>更新系统</p>\n<h3 id=\"2、加入Docker源\"><a href=\"#2、加入Docker源\" class=\"headerlink\" title=\"2、加入Docker源\"></a>2、加入Docker源</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tee /etc/yum<span class=\"selector-class\">.repos</span><span class=\"selector-class\">.d</span>/docker<span class=\"selector-class\">.repo</span> &lt;&lt;-<span class=\"string\">'EOF'</span></div><div class=\"line\">[dockerrepo]</div><div class=\"line\">name=Docker Repository</div><div class=\"line\">baseurl=https:<span class=\"comment\">//yum.dockerproject.org/repo/main/centos/7/</span></div><div class=\"line\">enabled=<span class=\"number\">1</span></div><div class=\"line\">gpgcheck=<span class=\"number\">1</span></div><div class=\"line\">gpgkey=https:<span class=\"comment\">//yum.dockerproject.org/gpg</span></div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<h3 id=\"3、安装：\"><a href=\"#3、安装：\" class=\"headerlink\" title=\"3、安装：\"></a>3、安装：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> docker-<span class=\"keyword\">engine</span></div><div class=\"line\">systemctl <span class=\"keyword\">enable</span> docker.service</div><div class=\"line\">systemctl <span class=\"keyword\">start</span> docker</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><p>下载最新exe安装包进行安装。<br><a href=\"https://github.com/boot2docker/windows-installer/releases\" target=\"_blank\" rel=\"external\">https://github.com/boot2docker/windows-installer/releases</a></p>\n<hr>\n<h1 id=\"Ubuntu-14-amp-amp-Ubuntu-16\"><a href=\"#Ubuntu-14-amp-amp-Ubuntu-16\" class=\"headerlink\" title=\"Ubuntu 14 &amp;&amp; Ubuntu 16\"></a>Ubuntu 14 &amp;&amp; Ubuntu 16</h1><h3 id=\"1、root用户登录，uname-r确保内核版本大于等于3-10-1\"><a href=\"#1、root用户登录，uname-r确保内核版本大于等于3-10-1\" class=\"headerlink\" title=\"1、root用户登录，uname -r确保内核版本大于等于3.10\"></a>1、root用户登录，<code>uname -r</code>确保内核版本大于等于3.10</h3><h3 id=\"2、加入Docker源-1\"><a href=\"#2、加入Docker源-1\" class=\"headerlink\" title=\"2、加入Docker源\"></a>2、加入Docker源</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> install apt-transport-https <span class=\"keyword\">ca</span>-certificates</div><div class=\"line\">apt-key adv --keyserver hkp://p80.pool.sks-keyservers.ne<span class=\"variable\">t:80</span> --recv-<span class=\"built_in\">keys</span> <span class=\"number\">58118</span>E89F3A912897C070ADBF76221572C52609D</div></pre></td></tr></table></figure>\n<h5 id=\"选择对应版本在终端运行命令\"><a href=\"#选择对应版本在终端运行命令\" class=\"headerlink\" title=\"选择对应版本在终端运行命令\"></a>选择对应版本在终端运行命令</h5><p>Trusty 14.04 (LTS)    <code>deb https://apt.dockerproject.org/repo ubuntu-trusty main</code><br>Xenial 16.04 (LTS)    <code>deb https://apt.dockerproject.org/repo ubuntu-xenial main</code><br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;REPO&gt;\"</span> | sudo tee /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.<span class=\"keyword\">list</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-cache policy docker-engine</div></pre></td></tr></table></figure></p>\n<h3 id=\"3、安装：-1\"><a href=\"#3、安装：-1\" class=\"headerlink\" title=\"3、安装：\"></a>3、安装：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> linux-image-extra-$(uname -r) linux-image-extra-<span class=\"keyword\">virtual</span></div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> docker-<span class=\"keyword\">engine</span></div><div class=\"line\">service docker <span class=\"keyword\">start</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h1><p>1 安装<br>下载最新pkg格式安装包：Boot2Docker-1.3.2.pkg进行安装。<br><strong><a href=\"https://github.com/boot2docker/osx-installer/releases/latest\" target=\"_blank\" rel=\"external\">https://github.com/boot2docker/osx-installer/releases/latest</a></strong></p>\n<p>或者手动初始化Boot2Docker，打开终端并运行:<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boot2docker </span>init</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>start</div><div class=\"line\"><span class=\"symbol\">export</span> DOCKER_HOST<span class=\"symbol\">=tcp</span>://$(<span class=\"keyword\">boot2docker </span><span class=\"built_in\">ip</span> <span class=\"number\">2</span>&gt;/dev/null):<span class=\"number\">2375</span></div></pre></td></tr></table></figure></p>\n<p>一旦你初始化化好了一个虚拟机，你就能用boot2docker stop和boot2docker start来进行控制。<br>安装好后带有virtualBox虚拟机。</p>\n<p>更新</p>\n<ul>\n<li>1.下载最新版的Docker for OS X Installer</li>\n<li>2.运行安装程序, 更新VirtualBox和Boot2Docker管理工具。</li>\n<li>3.更新现有虚拟机，打开终端并运行:</li>\n</ul>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boot2docker </span>stop</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>download</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>start</div></pre></td></tr></table></figure>\n<h3 id=\"Brew方式安装\"><a href=\"#Brew方式安装\" class=\"headerlink\" title=\"Brew方式安装\"></a>Brew方式安装</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>update</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>docker</div><div class=\"line\"><span class=\"keyword\">brew </span>link docker</div><div class=\"line\"><span class=\"keyword\">brew </span>link <span class=\"keyword\">boot2docker</span></div></pre></td></tr></table></figure>\n<p>当用brew安装某个应用后，但没有成功创建brew link（比如，link的目录已经存在相同的老版本文件导致link创建失败），此时可以将老版本删除，然后再次执行<code>brew link xxx</code>就可以创建link了，之后就可以使用brew安装的新版本了。</p>\n<p>注：<code>ls -lh /usr/local/bin/*docker*</code> 　就可以看到Docker安装的位置。</p>\n<p><strong>Boot2Docker的缺省用户名为docker，密码为tcuser。</strong></p>\n<h2 id=\"运行Docker\"><a href=\"#运行Docker\" class=\"headerlink\" title=\"运行Docker\"></a>运行Docker</h2><p>在终端上跑一个“hello world” 的示例来测试Docker。启动虚拟机然后运行：<br><code>docker run ubuntu echo hello world</code><br>这样应该会下载ubuntu镜像并打印hello world。</p>\n<h2 id=\"容器端口跳转\"><a href=\"#容器端口跳转\" class=\"headerlink\" title=\"容器端口跳转\"></a>容器端口跳转</h2><p>最新版的boot2docker建立了一个仅有网络适配器的主机提供可以接入容器的端口。<br>如果你运行一个有公开端口的容器，</p>\n<p><code>docker run --rm -i -t -p 80:80 nginx</code><br>然后你应该能用IP地址接入Nginx服务器:</p>\n<p><code>boot2docker ip</code> 显示当前IP<br>这个IP地址可能被VirtualBox启用的DHCP修改。</p>\n<h4 id=\"Boot2Docker管理工具提供了很多命令\"><a href=\"#Boot2Docker管理工具提供了很多命令\" class=\"headerlink\" title=\"Boot2Docker管理工具提供了很多命令:\"></a>Boot2Docker管理工具提供了很多命令:</h4><p><code>./boot2docker [&lt;options&gt;] [&lt;args&gt;]</code></p>\n<p>参数：<strong>{help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete</strong><br><strong>|download|version} </strong></p>\n","excerpt":"","more":"<p>Docker官网下载：<a href=\"https://www.docker.com/products/overview\">https://www.docker.com/products/overview</a></p>\n<p>官方文档：<a href=\"https://docs.docker.com/\">https://docs.docker.com/</a></p>\n<p>官方安装文档：<a href=\"https://docs.docker.com/engine/installation/\">https://docs.docker.com/engine/installation/</a></p>\n<hr>\n<h1 id=\"Centos-7\"><a href=\"#Centos-7\" class=\"headerlink\" title=\"Centos 7\"></a>Centos 7</h1><h3 id=\"1、root用户登录，uname-r确保内核版本大于等于3-10\"><a href=\"#1、root用户登录，uname-r确保内核版本大于等于3-10\" class=\"headerlink\" title=\"1、root用户登录，uname -r确保内核版本大于等于3.10\"></a>1、root用户登录，<code>uname -r</code>确保内核版本大于等于3.10</h3><p><code>yum update</code>更新系统</p>\n<h3 id=\"2、加入Docker源\"><a href=\"#2、加入Docker源\" class=\"headerlink\" title=\"2、加入Docker源\"></a>2、加入Docker源</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tee /etc/yum<span class=\"selector-class\">.repos</span><span class=\"selector-class\">.d</span>/docker<span class=\"selector-class\">.repo</span> &lt;&lt;-<span class=\"string\">'EOF'</span></div><div class=\"line\">[dockerrepo]</div><div class=\"line\">name=Docker Repository</div><div class=\"line\">baseurl=https:<span class=\"comment\">//yum.dockerproject.org/repo/main/centos/7/</span></div><div class=\"line\">enabled=<span class=\"number\">1</span></div><div class=\"line\">gpgcheck=<span class=\"number\">1</span></div><div class=\"line\">gpgkey=https:<span class=\"comment\">//yum.dockerproject.org/gpg</span></div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<h3 id=\"3、安装：\"><a href=\"#3、安装：\" class=\"headerlink\" title=\"3、安装：\"></a>3、安装：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> docker-<span class=\"keyword\">engine</span></div><div class=\"line\">systemctl <span class=\"keyword\">enable</span> docker.service</div><div class=\"line\">systemctl <span class=\"keyword\">start</span> docker</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h1><p>下载最新exe安装包进行安装。<br><a href=\"https://github.com/boot2docker/windows-installer/releases\">https://github.com/boot2docker/windows-installer/releases</a></p>\n<hr>\n<h1 id=\"Ubuntu-14-amp-amp-Ubuntu-16\"><a href=\"#Ubuntu-14-amp-amp-Ubuntu-16\" class=\"headerlink\" title=\"Ubuntu 14 &amp;&amp; Ubuntu 16\"></a>Ubuntu 14 &amp;&amp; Ubuntu 16</h1><h3 id=\"1、root用户登录，uname-r确保内核版本大于等于3-10-1\"><a href=\"#1、root用户登录，uname-r确保内核版本大于等于3-10-1\" class=\"headerlink\" title=\"1、root用户登录，uname -r确保内核版本大于等于3.10\"></a>1、root用户登录，<code>uname -r</code>确保内核版本大于等于3.10</h3><h3 id=\"2、加入Docker源-1\"><a href=\"#2、加入Docker源-1\" class=\"headerlink\" title=\"2、加入Docker源\"></a>2、加入Docker源</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> install apt-transport-https <span class=\"keyword\">ca</span>-certificates</div><div class=\"line\">apt-key adv --keyserver hkp://p80.pool.sks-keyservers.ne<span class=\"variable\">t:80</span> --recv-<span class=\"built_in\">keys</span> <span class=\"number\">58118</span>E89F3A912897C070ADBF76221572C52609D</div></pre></td></tr></table></figure>\n<h5 id=\"选择对应版本在终端运行命令\"><a href=\"#选择对应版本在终端运行命令\" class=\"headerlink\" title=\"选择对应版本在终端运行命令\"></a>选择对应版本在终端运行命令</h5><p>Trusty 14.04 (LTS)    <code>deb https://apt.dockerproject.org/repo ubuntu-trusty main</code><br>Xenial 16.04 (LTS)    <code>deb https://apt.dockerproject.org/repo ubuntu-xenial main</code><br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;REPO&gt;\"</span> | sudo tee /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.<span class=\"keyword\">list</span></div><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">apt-cache policy docker-engine</div></pre></td></tr></table></figure></p>\n<h3 id=\"3、安装：-1\"><a href=\"#3、安装：-1\" class=\"headerlink\" title=\"3、安装：\"></a>3、安装：</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">update</span></div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> linux-image-extra-$(uname -r) linux-image-extra-<span class=\"keyword\">virtual</span></div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> docker-<span class=\"keyword\">engine</span></div><div class=\"line\">service docker <span class=\"keyword\">start</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h1><p>1 安装<br>下载最新pkg格式安装包：Boot2Docker-1.3.2.pkg进行安装。<br><strong><a href=\"https://github.com/boot2docker/osx-installer/releases/latest\">https://github.com/boot2docker/osx-installer/releases/latest</a></strong></p>\n<p>或者手动初始化Boot2Docker，打开终端并运行:<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boot2docker </span>init</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>start</div><div class=\"line\"><span class=\"symbol\">export</span> DOCKER_HOST<span class=\"symbol\">=tcp</span>://$(<span class=\"keyword\">boot2docker </span><span class=\"built_in\">ip</span> <span class=\"number\">2</span>&gt;/dev/null):<span class=\"number\">2375</span></div></pre></td></tr></table></figure></p>\n<p>一旦你初始化化好了一个虚拟机，你就能用boot2docker stop和boot2docker start来进行控制。<br>安装好后带有virtualBox虚拟机。</p>\n<p>更新</p>\n<ul>\n<li>1.下载最新版的Docker for OS X Installer</li>\n<li>2.运行安装程序, 更新VirtualBox和Boot2Docker管理工具。</li>\n<li>3.更新现有虚拟机，打开终端并运行:</li>\n</ul>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boot2docker </span>stop</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>download</div><div class=\"line\"><span class=\"keyword\">boot2docker </span>start</div></pre></td></tr></table></figure>\n<h3 id=\"Brew方式安装\"><a href=\"#Brew方式安装\" class=\"headerlink\" title=\"Brew方式安装\"></a>Brew方式安装</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span>update</div><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>docker</div><div class=\"line\"><span class=\"keyword\">brew </span>link docker</div><div class=\"line\"><span class=\"keyword\">brew </span>link <span class=\"keyword\">boot2docker</span></div></pre></td></tr></table></figure>\n<p>当用brew安装某个应用后，但没有成功创建brew link（比如，link的目录已经存在相同的老版本文件导致link创建失败），此时可以将老版本删除，然后再次执行<code>brew link xxx</code>就可以创建link了，之后就可以使用brew安装的新版本了。</p>\n<p>注：<code>ls -lh /usr/local/bin/*docker*</code> 　就可以看到Docker安装的位置。</p>\n<p><strong>Boot2Docker的缺省用户名为docker，密码为tcuser。</strong></p>\n<h2 id=\"运行Docker\"><a href=\"#运行Docker\" class=\"headerlink\" title=\"运行Docker\"></a>运行Docker</h2><p>在终端上跑一个“hello world” 的示例来测试Docker。启动虚拟机然后运行：<br><code>docker run ubuntu echo hello world</code><br>这样应该会下载ubuntu镜像并打印hello world。</p>\n<h2 id=\"容器端口跳转\"><a href=\"#容器端口跳转\" class=\"headerlink\" title=\"容器端口跳转\"></a>容器端口跳转</h2><p>最新版的boot2docker建立了一个仅有网络适配器的主机提供可以接入容器的端口。<br>如果你运行一个有公开端口的容器，</p>\n<p><code>docker run --rm -i -t -p 80:80 nginx</code><br>然后你应该能用IP地址接入Nginx服务器:</p>\n<p><code>boot2docker ip</code> 显示当前IP<br>这个IP地址可能被VirtualBox启用的DHCP修改。</p>\n<h4 id=\"Boot2Docker管理工具提供了很多命令\"><a href=\"#Boot2Docker管理工具提供了很多命令\" class=\"headerlink\" title=\"Boot2Docker管理工具提供了很多命令:\"></a>Boot2Docker管理工具提供了很多命令:</h4><p><code>./boot2docker [&lt;options&gt;] [&lt;args&gt;]</code></p>\n<p>参数：<strong>{help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete</strong><br><strong>|download|version} </strong></p>\n"},{"title":"Docker常用命令","date":"2016-11-03T07:53:27.000Z","_content":"\n\nDocker是基于容器的，直接用带有相应功能的镜像就行，而不必运行Docker容器来自己搭建环境那么麻烦。\nDocker 中文网 http://www.docker.org.cn\n\n## 1. 查看docker信息\n\n#### 查看docker版本  \n`docker version`\n#### 显示docker系统的信息  \n`docker info ` \n\n## 2. 对image的操作\n#### 检索、搜索image  \n`docker search image_name  `\n#### 下载image  \n`docker pull image_name   `\n#### 列出镜像列表  \n`docker images `\n参数：\n* -a, --all=false Show all images; \n* --no-trunc=false Don't truncate output; \n* -q, --quiet=false Only show numeric IDs \n\n#### 删除一个或者多个镜像  \n`docker rmi image_name`\n（第六节是删除容器，注意两者区别）\n参数:\n-f, --force=false Force; \n--no-prune=false Do not delete untagged parents  \n\n#### 显示一个镜像的历史 \n`docker history image_name`\n参数：\n--no-trunc=false Don't truncate output; \n-q, --quiet=false Only show numeric IDs  \n\n## 3. 启动容器\n\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n\n#### 在容器中运行\"echo\"命令，输出\"hello word\"  \n`docker run image_name echo \"hello word\" ` \n\n#### 交互式进入容器中  \n`docker run -i -t image_name /bin/bash  `\n  \n#### 在容器中安装新的程序  \n`docker run image_name apt-get install -y app_name ` \n\nNote：  **Ubuntu在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。**apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。\n\n## 4. 查看容器（ps）\n#### 列出当前所有正在运行的container  \n`docker ps ` \n#### 列出所有的container  \n`docker ps -a  `\n#### 列出最近一次启动的container  \n`docker ps -l ` \n\n## 5. 保存对容器的修改（commit）\n\n当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。\n#### 保存对容器的修改\n`docker commit ID new_image_name `\n参数：\n* -a, --author=\"\" Author; \n* -m, --message=\"\" Commit message  \n\nNote：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。\n\n## 6. 对容器的操作\n\n#### 删除所有容器 \n\tdocker rm `docker ps -a -q`\n（删除的是容器，而不是镜像；注意容器和镜像的区别，一个镜像可以创建多个容器。删除镜像用rmi命令）    \n#### 删除单个容器参数：\n`docker rm Name/ID  `\n参数：\n* **-f, --force=false** \n* **-l, --link=false** Remove the specified link and not the underlying container; \n* **-v, --volumes=false** Remove the volumes associated to the container  \n\n#### 停止、启动、杀死一个容器  \n```\ndocker stop Name/ID  \ndocker start Name/ID  \ndocker kill Name/ID  ```\n  \n#### 从一个容器中取日志\n`docker logs Name/ID ` \n参数：\n* **-f, --follow=false** Follow log output; \n* **-t, --timestamps=false** Show timestamps  \n \n#### 列出一个容器里面被改变的文件或者目录\n`docker diff Name/ID  `\n（list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的）\n\n#### 显示一个运行的容器里面的进程信息  \n`docker top Name/ID  `\n  \n#### 从容器里面拷贝文件/目录到本地一个路径  \n`docker cp Name:/container_path to_path ` \n或者：\n`docker cp ID:/container_path to_path  `\n\n#### 重启一个正在运行的容器\n`docker restart Name/ID ` \n参数：\n* **-t, --time=10** Number of seconds to try to stop for before killing the container, Default=10  \n\n#### 附加到一个运行的容器上面 \n`docker attach ID ` \n参数：\n* **--no-stdin=false** Do not attach stdin; \n* **--sig-proxy=true** Proxify all received signal to the process  \n\nNote： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。\n\n\n## 7. 保存和加载镜像（save、load）\n\n当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。\n#### 保存镜像到一个tar包\n`docker save image_name -o file_path`\n参数：\n* **-o, --output=\"\"** Write to an file  \n  \n#### 加载一个tar包格式的镜像\n`docker load -i file_path ` \n参数：\n* **-i, --input=\"\"** Read from a tar archive file  \n \n#### 机器a  \n`docker save image_name > /home/save.tar ` \n#### 使用scp将save.tar拷到机器b上，然后：  \n`docker load < /home/save.tar  `\n\n## 8、 登录registry server（login）\n#### 登陆registry server\n`docker login`  \n参数：\n* **-e, --email=\"\"** Email; \n* **-p, --password=\"\"** Password; \n* **-u, --username=\"\"** Username  \n\n## 9. 发布image（push）\n#### 发布docker镜像  \n`docker push new_image_name  `\n\n## 10.  根据Dockerfile 构建出一个容器\n#### build  \n`docker build -t image_name Dockerfile_path`  \n参数：\n* **--no-cache=false** Do not use cache when building the image\n* **-q, --quiet=false** Suppress the verbose output generated by the containers\n* **--rm=true** Remove intermediate containers after a successful build\n* **-t, --tag=\"\"** Repository name (and optionally a tag) to be applied to the resulting image in case of success  \n\n---\n\n## 参考资料：\n搭建Docker环境:\n搭建Java Web环境：http://www.open-open.com/lib/view/open1422413794439.html\nDocker搭建私有仓库：http://blog.csdn.net/wangtaoking1/article/details/44180901\n搭建WordPress站点：https://linux.cn/article-5560-1.html\n\ndocker常用命令:\nhttp://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html\n\n\n\n\n","source":"_posts/虚拟化/2016-11-03-Docker常用命令.md","raw":"---\ntitle: Docker常用命令\ncategories:\n  - 虚拟化\ntags:\n  - Docker常用命令\ndate: 2016-11-03 15:53:27\n---\n\n\nDocker是基于容器的，直接用带有相应功能的镜像就行，而不必运行Docker容器来自己搭建环境那么麻烦。\nDocker 中文网 http://www.docker.org.cn\n\n## 1. 查看docker信息\n\n#### 查看docker版本  \n`docker version`\n#### 显示docker系统的信息  \n`docker info ` \n\n## 2. 对image的操作\n#### 检索、搜索image  \n`docker search image_name  `\n#### 下载image  \n`docker pull image_name   `\n#### 列出镜像列表  \n`docker images `\n参数：\n* -a, --all=false Show all images; \n* --no-trunc=false Don't truncate output; \n* -q, --quiet=false Only show numeric IDs \n\n#### 删除一个或者多个镜像  \n`docker rmi image_name`\n（第六节是删除容器，注意两者区别）\n参数:\n-f, --force=false Force; \n--no-prune=false Do not delete untagged parents  \n\n#### 显示一个镜像的历史 \n`docker history image_name`\n参数：\n--no-trunc=false Don't truncate output; \n-q, --quiet=false Only show numeric IDs  \n\n## 3. 启动容器\n\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。\n\n\n#### 在容器中运行\"echo\"命令，输出\"hello word\"  \n`docker run image_name echo \"hello word\" ` \n\n#### 交互式进入容器中  \n`docker run -i -t image_name /bin/bash  `\n  \n#### 在容器中安装新的程序  \n`docker run image_name apt-get install -y app_name ` \n\nNote：  **Ubuntu在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。**apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。\n\n## 4. 查看容器（ps）\n#### 列出当前所有正在运行的container  \n`docker ps ` \n#### 列出所有的container  \n`docker ps -a  `\n#### 列出最近一次启动的container  \n`docker ps -l ` \n\n## 5. 保存对容器的修改（commit）\n\n当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。\n#### 保存对容器的修改\n`docker commit ID new_image_name `\n参数：\n* -a, --author=\"\" Author; \n* -m, --message=\"\" Commit message  \n\nNote：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。\n\n## 6. 对容器的操作\n\n#### 删除所有容器 \n\tdocker rm `docker ps -a -q`\n（删除的是容器，而不是镜像；注意容器和镜像的区别，一个镜像可以创建多个容器。删除镜像用rmi命令）    \n#### 删除单个容器参数：\n`docker rm Name/ID  `\n参数：\n* **-f, --force=false** \n* **-l, --link=false** Remove the specified link and not the underlying container; \n* **-v, --volumes=false** Remove the volumes associated to the container  \n\n#### 停止、启动、杀死一个容器  \n```\ndocker stop Name/ID  \ndocker start Name/ID  \ndocker kill Name/ID  ```\n  \n#### 从一个容器中取日志\n`docker logs Name/ID ` \n参数：\n* **-f, --follow=false** Follow log output; \n* **-t, --timestamps=false** Show timestamps  \n \n#### 列出一个容器里面被改变的文件或者目录\n`docker diff Name/ID  `\n（list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的）\n\n#### 显示一个运行的容器里面的进程信息  \n`docker top Name/ID  `\n  \n#### 从容器里面拷贝文件/目录到本地一个路径  \n`docker cp Name:/container_path to_path ` \n或者：\n`docker cp ID:/container_path to_path  `\n\n#### 重启一个正在运行的容器\n`docker restart Name/ID ` \n参数：\n* **-t, --time=10** Number of seconds to try to stop for before killing the container, Default=10  \n\n#### 附加到一个运行的容器上面 \n`docker attach ID ` \n参数：\n* **--no-stdin=false** Do not attach stdin; \n* **--sig-proxy=true** Proxify all received signal to the process  \n\nNote： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。\n\n\n## 7. 保存和加载镜像（save、load）\n\n当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。\n#### 保存镜像到一个tar包\n`docker save image_name -o file_path`\n参数：\n* **-o, --output=\"\"** Write to an file  \n  \n#### 加载一个tar包格式的镜像\n`docker load -i file_path ` \n参数：\n* **-i, --input=\"\"** Read from a tar archive file  \n \n#### 机器a  \n`docker save image_name > /home/save.tar ` \n#### 使用scp将save.tar拷到机器b上，然后：  \n`docker load < /home/save.tar  `\n\n## 8、 登录registry server（login）\n#### 登陆registry server\n`docker login`  \n参数：\n* **-e, --email=\"\"** Email; \n* **-p, --password=\"\"** Password; \n* **-u, --username=\"\"** Username  \n\n## 9. 发布image（push）\n#### 发布docker镜像  \n`docker push new_image_name  `\n\n## 10.  根据Dockerfile 构建出一个容器\n#### build  \n`docker build -t image_name Dockerfile_path`  \n参数：\n* **--no-cache=false** Do not use cache when building the image\n* **-q, --quiet=false** Suppress the verbose output generated by the containers\n* **--rm=true** Remove intermediate containers after a successful build\n* **-t, --tag=\"\"** Repository name (and optionally a tag) to be applied to the resulting image in case of success  \n\n---\n\n## 参考资料：\n搭建Docker环境:\n搭建Java Web环境：http://www.open-open.com/lib/view/open1422413794439.html\nDocker搭建私有仓库：http://blog.csdn.net/wangtaoking1/article/details/44180901\n搭建WordPress站点：https://linux.cn/article-5560-1.html\n\ndocker常用命令:\nhttp://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html\n\n\n\n\n","slug":"虚拟化-2016-11-03-Docker常用命令","published":1,"updated":"2016-11-03T09:23:00.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnw500220gpk1jsinbjl","content":"<p>Docker是基于容器的，直接用带有相应功能的镜像就行，而不必运行Docker容器来自己搭建环境那么麻烦。<br>Docker 中文网 <a href=\"http://www.docker.org.cn\" target=\"_blank\" rel=\"external\">http://www.docker.org.cn</a></p>\n<h2 id=\"1-查看docker信息\"><a href=\"#1-查看docker信息\" class=\"headerlink\" title=\"1. 查看docker信息\"></a>1. 查看docker信息</h2><h4 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h4><p><code>docker version</code></p>\n<h4 id=\"显示docker系统的信息\"><a href=\"#显示docker系统的信息\" class=\"headerlink\" title=\"显示docker系统的信息\"></a>显示docker系统的信息</h4><p><code>docker info</code> </p>\n<h2 id=\"2-对image的操作\"><a href=\"#2-对image的操作\" class=\"headerlink\" title=\"2. 对image的操作\"></a>2. 对image的操作</h2><h4 id=\"检索、搜索image\"><a href=\"#检索、搜索image\" class=\"headerlink\" title=\"检索、搜索image\"></a>检索、搜索image</h4><p><code>docker search image_name</code></p>\n<h4 id=\"下载image\"><a href=\"#下载image\" class=\"headerlink\" title=\"下载image\"></a>下载image</h4><p><code>docker pull image_name</code></p>\n<h4 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h4><p><code>docker images</code><br>参数：</p>\n<ul>\n<li>-a, –all=false Show all images; </li>\n<li>–no-trunc=false Don’t truncate output; </li>\n<li>-q, –quiet=false Only show numeric IDs </li>\n</ul>\n<h4 id=\"删除一个或者多个镜像\"><a href=\"#删除一个或者多个镜像\" class=\"headerlink\" title=\"删除一个或者多个镜像\"></a>删除一个或者多个镜像</h4><p><code>docker rmi image_name</code><br>（第六节是删除容器，注意两者区别）<br>参数:<br>-f, –force=false Force;<br>–no-prune=false Do not delete untagged parents  </p>\n<h4 id=\"显示一个镜像的历史\"><a href=\"#显示一个镜像的历史\" class=\"headerlink\" title=\"显示一个镜像的历史\"></a>显示一个镜像的历史</h4><p><code>docker history image_name</code><br>参数：<br>–no-trunc=false Don’t truncate output;<br>-q, –quiet=false Only show numeric IDs  </p>\n<h2 id=\"3-启动容器\"><a href=\"#3-启动容器\" class=\"headerlink\" title=\"3. 启动容器\"></a>3. 启动容器</h2><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<h4 id=\"在容器中运行”echo”命令，输出”hello-word”\"><a href=\"#在容器中运行”echo”命令，输出”hello-word”\" class=\"headerlink\" title=\"在容器中运行”echo”命令，输出”hello word”\"></a>在容器中运行”echo”命令，输出”hello word”</h4><p><code>docker run image_name echo &quot;hello word&quot;</code> </p>\n<h4 id=\"交互式进入容器中\"><a href=\"#交互式进入容器中\" class=\"headerlink\" title=\"交互式进入容器中\"></a>交互式进入容器中</h4><p><code>docker run -i -t image_name /bin/bash</code></p>\n<h4 id=\"在容器中安装新的程序\"><a href=\"#在容器中安装新的程序\" class=\"headerlink\" title=\"在容器中安装新的程序\"></a>在容器中安装新的程序</h4><p><code>docker run image_name apt-get install -y app_name</code> </p>\n<p>Note：  <strong>Ubuntu在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。</strong>apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p>\n<h2 id=\"4-查看容器（ps）\"><a href=\"#4-查看容器（ps）\" class=\"headerlink\" title=\"4. 查看容器（ps）\"></a>4. 查看容器（ps）</h2><h4 id=\"列出当前所有正在运行的container\"><a href=\"#列出当前所有正在运行的container\" class=\"headerlink\" title=\"列出当前所有正在运行的container\"></a>列出当前所有正在运行的container</h4><p><code>docker ps</code> </p>\n<h4 id=\"列出所有的container\"><a href=\"#列出所有的container\" class=\"headerlink\" title=\"列出所有的container\"></a>列出所有的container</h4><p><code>docker ps -a</code></p>\n<h4 id=\"列出最近一次启动的container\"><a href=\"#列出最近一次启动的container\" class=\"headerlink\" title=\"列出最近一次启动的container\"></a>列出最近一次启动的container</h4><p><code>docker ps -l</code> </p>\n<h2 id=\"5-保存对容器的修改（commit）\"><a href=\"#5-保存对容器的修改（commit）\" class=\"headerlink\" title=\"5. 保存对容器的修改（commit）\"></a>5. 保存对容器的修改（commit）</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p>\n<h4 id=\"保存对容器的修改\"><a href=\"#保存对容器的修改\" class=\"headerlink\" title=\"保存对容器的修改\"></a>保存对容器的修改</h4><p><code>docker commit ID new_image_name</code><br>参数：</p>\n<ul>\n<li>-a, –author=”” Author; </li>\n<li>-m, –message=”” Commit message  </li>\n</ul>\n<p>Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。</p>\n<h2 id=\"6-对容器的操作\"><a href=\"#6-对容器的操作\" class=\"headerlink\" title=\"6. 对容器的操作\"></a>6. 对容器的操作</h2><h4 id=\"删除所有容器\"><a href=\"#删除所有容器\" class=\"headerlink\" title=\"删除所有容器\"></a>删除所有容器</h4><pre><code>docker rm `docker ps -a -q`\n</code></pre><p>（删除的是容器，而不是镜像；注意容器和镜像的区别，一个镜像可以创建多个容器。删除镜像用rmi命令）    </p>\n<h4 id=\"删除单个容器参数：\"><a href=\"#删除单个容器参数：\" class=\"headerlink\" title=\"删除单个容器参数：\"></a>删除单个容器参数：</h4><p><code>docker rm Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-f, –force=false</strong> </li>\n<li><strong>-l, –link=false</strong> Remove the specified link and not the underlying container; </li>\n<li><strong>-v, –volumes=false</strong> Remove the volumes associated to the container  </li>\n</ul>\n<h4 id=\"停止、启动、杀死一个容器\"><a href=\"#停止、启动、杀死一个容器\" class=\"headerlink\" title=\"停止、启动、杀死一个容器\"></a>停止、启动、杀死一个容器</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"keyword\">stop</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span>  </div><div class=\"line\">docker <span class=\"keyword\">start</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span>  </div><div class=\"line\">docker <span class=\"keyword\">kill</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span></div></pre></td></tr></table></figure>\n<h4 id=\"从一个容器中取日志\"><a href=\"#从一个容器中取日志\" class=\"headerlink\" title=\"从一个容器中取日志\"></a>从一个容器中取日志</h4><p><code>docker logs Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-f, –follow=false</strong> Follow log output; </li>\n<li><strong>-t, –timestamps=false</strong> Show timestamps  </li>\n</ul>\n<h4 id=\"列出一个容器里面被改变的文件或者目录\"><a href=\"#列出一个容器里面被改变的文件或者目录\" class=\"headerlink\" title=\"列出一个容器里面被改变的文件或者目录\"></a>列出一个容器里面被改变的文件或者目录</h4><p><code>docker diff Name/ID</code><br>（list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的）</p>\n<h4 id=\"显示一个运行的容器里面的进程信息\"><a href=\"#显示一个运行的容器里面的进程信息\" class=\"headerlink\" title=\"显示一个运行的容器里面的进程信息\"></a>显示一个运行的容器里面的进程信息</h4><p><code>docker top Name/ID</code></p>\n<h4 id=\"从容器里面拷贝文件-目录到本地一个路径\"><a href=\"#从容器里面拷贝文件-目录到本地一个路径\" class=\"headerlink\" title=\"从容器里面拷贝文件/目录到本地一个路径\"></a>从容器里面拷贝文件/目录到本地一个路径</h4><p><code>docker cp Name:/container_path to_path</code><br>或者：<br><code>docker cp ID:/container_path to_path</code></p>\n<h4 id=\"重启一个正在运行的容器\"><a href=\"#重启一个正在运行的容器\" class=\"headerlink\" title=\"重启一个正在运行的容器\"></a>重启一个正在运行的容器</h4><p><code>docker restart Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-t, –time=10</strong> Number of seconds to try to stop for before killing the container, Default=10  </li>\n</ul>\n<h4 id=\"附加到一个运行的容器上面\"><a href=\"#附加到一个运行的容器上面\" class=\"headerlink\" title=\"附加到一个运行的容器上面\"></a>附加到一个运行的容器上面</h4><p><code>docker attach ID</code><br>参数：</p>\n<ul>\n<li><strong>–no-stdin=false</strong> Do not attach stdin; </li>\n<li><strong>–sig-proxy=true</strong> Proxify all received signal to the process  </li>\n</ul>\n<p>Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。</p>\n<h2 id=\"7-保存和加载镜像（save、load）\"><a href=\"#7-保存和加载镜像（save、load）\" class=\"headerlink\" title=\"7. 保存和加载镜像（save、load）\"></a>7. 保存和加载镜像（save、load）</h2><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p>\n<h4 id=\"保存镜像到一个tar包\"><a href=\"#保存镜像到一个tar包\" class=\"headerlink\" title=\"保存镜像到一个tar包\"></a>保存镜像到一个tar包</h4><p><code>docker save image_name -o file_path</code><br>参数：</p>\n<ul>\n<li><strong>-o, –output=””</strong> Write to an file  </li>\n</ul>\n<h4 id=\"加载一个tar包格式的镜像\"><a href=\"#加载一个tar包格式的镜像\" class=\"headerlink\" title=\"加载一个tar包格式的镜像\"></a>加载一个tar包格式的镜像</h4><p><code>docker load -i file_path</code><br>参数：</p>\n<ul>\n<li><strong>-i, –input=””</strong> Read from a tar archive file  </li>\n</ul>\n<h4 id=\"机器a\"><a href=\"#机器a\" class=\"headerlink\" title=\"机器a\"></a>机器a</h4><p><code>docker save image_name &gt; /home/save.tar</code> </p>\n<h4 id=\"使用scp将save-tar拷到机器b上，然后：\"><a href=\"#使用scp将save-tar拷到机器b上，然后：\" class=\"headerlink\" title=\"使用scp将save.tar拷到机器b上，然后：\"></a>使用scp将save.tar拷到机器b上，然后：</h4><p><code>docker load &lt; /home/save.tar</code></p>\n<h2 id=\"8、-登录registry-server（login）\"><a href=\"#8、-登录registry-server（login）\" class=\"headerlink\" title=\"8、 登录registry server（login）\"></a>8、 登录registry server（login）</h2><h4 id=\"登陆registry-server\"><a href=\"#登陆registry-server\" class=\"headerlink\" title=\"登陆registry server\"></a>登陆registry server</h4><p><code>docker login</code><br>参数：</p>\n<ul>\n<li><strong>-e, –email=””</strong> Email; </li>\n<li><strong>-p, –password=””</strong> Password; </li>\n<li><strong>-u, –username=””</strong> Username  </li>\n</ul>\n<h2 id=\"9-发布image（push）\"><a href=\"#9-发布image（push）\" class=\"headerlink\" title=\"9. 发布image（push）\"></a>9. 发布image（push）</h2><h4 id=\"发布docker镜像\"><a href=\"#发布docker镜像\" class=\"headerlink\" title=\"发布docker镜像\"></a>发布docker镜像</h4><p><code>docker push new_image_name</code></p>\n<h2 id=\"10-根据Dockerfile-构建出一个容器\"><a href=\"#10-根据Dockerfile-构建出一个容器\" class=\"headerlink\" title=\"10.  根据Dockerfile 构建出一个容器\"></a>10.  根据Dockerfile 构建出一个容器</h2><h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p><code>docker build -t image_name Dockerfile_path</code><br>参数：</p>\n<ul>\n<li><strong>–no-cache=false</strong> Do not use cache when building the image</li>\n<li><strong>-q, –quiet=false</strong> Suppress the verbose output generated by the containers</li>\n<li><strong>–rm=true</strong> Remove intermediate containers after a successful build</li>\n<li><strong>-t, –tag=””</strong> Repository name (and optionally a tag) to be applied to the resulting image in case of success  </li>\n</ul>\n<hr>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>搭建Docker环境:<br>搭建Java Web环境：<a href=\"http://www.open-open.com/lib/view/open1422413794439.html\" target=\"_blank\" rel=\"external\">http://www.open-open.com/lib/view/open1422413794439.html</a><br>Docker搭建私有仓库：<a href=\"http://blog.csdn.net/wangtaoking1/article/details/44180901\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/wangtaoking1/article/details/44180901</a><br>搭建WordPress站点：<a href=\"https://linux.cn/article-5560-1.html\" target=\"_blank\" rel=\"external\">https://linux.cn/article-5560-1.html</a></p>\n<p>docker常用命令:<br><a href=\"http://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html</a></p>\n","excerpt":"","more":"<p>Docker是基于容器的，直接用带有相应功能的镜像就行，而不必运行Docker容器来自己搭建环境那么麻烦。<br>Docker 中文网 <a href=\"http://www.docker.org.cn\">http://www.docker.org.cn</a></p>\n<h2 id=\"1-查看docker信息\"><a href=\"#1-查看docker信息\" class=\"headerlink\" title=\"1. 查看docker信息\"></a>1. 查看docker信息</h2><h4 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h4><p><code>docker version</code></p>\n<h4 id=\"显示docker系统的信息\"><a href=\"#显示docker系统的信息\" class=\"headerlink\" title=\"显示docker系统的信息\"></a>显示docker系统的信息</h4><p><code>docker info</code> </p>\n<h2 id=\"2-对image的操作\"><a href=\"#2-对image的操作\" class=\"headerlink\" title=\"2. 对image的操作\"></a>2. 对image的操作</h2><h4 id=\"检索、搜索image\"><a href=\"#检索、搜索image\" class=\"headerlink\" title=\"检索、搜索image\"></a>检索、搜索image</h4><p><code>docker search image_name</code></p>\n<h4 id=\"下载image\"><a href=\"#下载image\" class=\"headerlink\" title=\"下载image\"></a>下载image</h4><p><code>docker pull image_name</code></p>\n<h4 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h4><p><code>docker images</code><br>参数：</p>\n<ul>\n<li>-a, –all=false Show all images; </li>\n<li>–no-trunc=false Don’t truncate output; </li>\n<li>-q, –quiet=false Only show numeric IDs </li>\n</ul>\n<h4 id=\"删除一个或者多个镜像\"><a href=\"#删除一个或者多个镜像\" class=\"headerlink\" title=\"删除一个或者多个镜像\"></a>删除一个或者多个镜像</h4><p><code>docker rmi image_name</code><br>（第六节是删除容器，注意两者区别）<br>参数:<br>-f, –force=false Force;<br>–no-prune=false Do not delete untagged parents  </p>\n<h4 id=\"显示一个镜像的历史\"><a href=\"#显示一个镜像的历史\" class=\"headerlink\" title=\"显示一个镜像的历史\"></a>显示一个镜像的历史</h4><p><code>docker history image_name</code><br>参数：<br>–no-trunc=false Don’t truncate output;<br>-q, –quiet=false Only show numeric IDs  </p>\n<h2 id=\"3-启动容器\"><a href=\"#3-启动容器\" class=\"headerlink\" title=\"3. 启动容器\"></a>3. 启动容器</h2><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>\n<h4 id=\"在容器中运行”echo”命令，输出”hello-word”\"><a href=\"#在容器中运行”echo”命令，输出”hello-word”\" class=\"headerlink\" title=\"在容器中运行”echo”命令，输出”hello word”\"></a>在容器中运行”echo”命令，输出”hello word”</h4><p><code>docker run image_name echo &quot;hello word&quot;</code> </p>\n<h4 id=\"交互式进入容器中\"><a href=\"#交互式进入容器中\" class=\"headerlink\" title=\"交互式进入容器中\"></a>交互式进入容器中</h4><p><code>docker run -i -t image_name /bin/bash</code></p>\n<h4 id=\"在容器中安装新的程序\"><a href=\"#在容器中安装新的程序\" class=\"headerlink\" title=\"在容器中安装新的程序\"></a>在容器中安装新的程序</h4><p><code>docker run image_name apt-get install -y app_name</code> </p>\n<p>Note：  <strong>Ubuntu在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。</strong>apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p>\n<h2 id=\"4-查看容器（ps）\"><a href=\"#4-查看容器（ps）\" class=\"headerlink\" title=\"4. 查看容器（ps）\"></a>4. 查看容器（ps）</h2><h4 id=\"列出当前所有正在运行的container\"><a href=\"#列出当前所有正在运行的container\" class=\"headerlink\" title=\"列出当前所有正在运行的container\"></a>列出当前所有正在运行的container</h4><p><code>docker ps</code> </p>\n<h4 id=\"列出所有的container\"><a href=\"#列出所有的container\" class=\"headerlink\" title=\"列出所有的container\"></a>列出所有的container</h4><p><code>docker ps -a</code></p>\n<h4 id=\"列出最近一次启动的container\"><a href=\"#列出最近一次启动的container\" class=\"headerlink\" title=\"列出最近一次启动的container\"></a>列出最近一次启动的container</h4><p><code>docker ps -l</code> </p>\n<h2 id=\"5-保存对容器的修改（commit）\"><a href=\"#5-保存对容器的修改（commit）\" class=\"headerlink\" title=\"5. 保存对容器的修改（commit）\"></a>5. 保存对容器的修改（commit）</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p>\n<h4 id=\"保存对容器的修改\"><a href=\"#保存对容器的修改\" class=\"headerlink\" title=\"保存对容器的修改\"></a>保存对容器的修改</h4><p><code>docker commit ID new_image_name</code><br>参数：</p>\n<ul>\n<li>-a, –author=”” Author; </li>\n<li>-m, –message=”” Commit message  </li>\n</ul>\n<p>Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。</p>\n<h2 id=\"6-对容器的操作\"><a href=\"#6-对容器的操作\" class=\"headerlink\" title=\"6. 对容器的操作\"></a>6. 对容器的操作</h2><h4 id=\"删除所有容器\"><a href=\"#删除所有容器\" class=\"headerlink\" title=\"删除所有容器\"></a>删除所有容器</h4><pre><code>docker rm `docker ps -a -q`\n</code></pre><p>（删除的是容器，而不是镜像；注意容器和镜像的区别，一个镜像可以创建多个容器。删除镜像用rmi命令）    </p>\n<h4 id=\"删除单个容器参数：\"><a href=\"#删除单个容器参数：\" class=\"headerlink\" title=\"删除单个容器参数：\"></a>删除单个容器参数：</h4><p><code>docker rm Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-f, –force=false</strong> </li>\n<li><strong>-l, –link=false</strong> Remove the specified link and not the underlying container; </li>\n<li><strong>-v, –volumes=false</strong> Remove the volumes associated to the container  </li>\n</ul>\n<h4 id=\"停止、启动、杀死一个容器\"><a href=\"#停止、启动、杀死一个容器\" class=\"headerlink\" title=\"停止、启动、杀死一个容器\"></a>停止、启动、杀死一个容器</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"keyword\">stop</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span>  </div><div class=\"line\">docker <span class=\"keyword\">start</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span>  </div><div class=\"line\">docker <span class=\"keyword\">kill</span> <span class=\"keyword\">Name</span>/<span class=\"keyword\">ID</span></div></pre></td></tr></table></figure>\n<h4 id=\"从一个容器中取日志\"><a href=\"#从一个容器中取日志\" class=\"headerlink\" title=\"从一个容器中取日志\"></a>从一个容器中取日志</h4><p><code>docker logs Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-f, –follow=false</strong> Follow log output; </li>\n<li><strong>-t, –timestamps=false</strong> Show timestamps  </li>\n</ul>\n<h4 id=\"列出一个容器里面被改变的文件或者目录\"><a href=\"#列出一个容器里面被改变的文件或者目录\" class=\"headerlink\" title=\"列出一个容器里面被改变的文件或者目录\"></a>列出一个容器里面被改变的文件或者目录</h4><p><code>docker diff Name/ID</code><br>（list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的）</p>\n<h4 id=\"显示一个运行的容器里面的进程信息\"><a href=\"#显示一个运行的容器里面的进程信息\" class=\"headerlink\" title=\"显示一个运行的容器里面的进程信息\"></a>显示一个运行的容器里面的进程信息</h4><p><code>docker top Name/ID</code></p>\n<h4 id=\"从容器里面拷贝文件-目录到本地一个路径\"><a href=\"#从容器里面拷贝文件-目录到本地一个路径\" class=\"headerlink\" title=\"从容器里面拷贝文件/目录到本地一个路径\"></a>从容器里面拷贝文件/目录到本地一个路径</h4><p><code>docker cp Name:/container_path to_path</code><br>或者：<br><code>docker cp ID:/container_path to_path</code></p>\n<h4 id=\"重启一个正在运行的容器\"><a href=\"#重启一个正在运行的容器\" class=\"headerlink\" title=\"重启一个正在运行的容器\"></a>重启一个正在运行的容器</h4><p><code>docker restart Name/ID</code><br>参数：</p>\n<ul>\n<li><strong>-t, –time=10</strong> Number of seconds to try to stop for before killing the container, Default=10  </li>\n</ul>\n<h4 id=\"附加到一个运行的容器上面\"><a href=\"#附加到一个运行的容器上面\" class=\"headerlink\" title=\"附加到一个运行的容器上面\"></a>附加到一个运行的容器上面</h4><p><code>docker attach ID</code><br>参数：</p>\n<ul>\n<li><strong>–no-stdin=false</strong> Do not attach stdin; </li>\n<li><strong>–sig-proxy=true</strong> Proxify all received signal to the process  </li>\n</ul>\n<p>Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。</p>\n<h2 id=\"7-保存和加载镜像（save、load）\"><a href=\"#7-保存和加载镜像（save、load）\" class=\"headerlink\" title=\"7. 保存和加载镜像（save、load）\"></a>7. 保存和加载镜像（save、load）</h2><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p>\n<h4 id=\"保存镜像到一个tar包\"><a href=\"#保存镜像到一个tar包\" class=\"headerlink\" title=\"保存镜像到一个tar包\"></a>保存镜像到一个tar包</h4><p><code>docker save image_name -o file_path</code><br>参数：</p>\n<ul>\n<li><strong>-o, –output=””</strong> Write to an file  </li>\n</ul>\n<h4 id=\"加载一个tar包格式的镜像\"><a href=\"#加载一个tar包格式的镜像\" class=\"headerlink\" title=\"加载一个tar包格式的镜像\"></a>加载一个tar包格式的镜像</h4><p><code>docker load -i file_path</code><br>参数：</p>\n<ul>\n<li><strong>-i, –input=””</strong> Read from a tar archive file  </li>\n</ul>\n<h4 id=\"机器a\"><a href=\"#机器a\" class=\"headerlink\" title=\"机器a\"></a>机器a</h4><p><code>docker save image_name &gt; /home/save.tar</code> </p>\n<h4 id=\"使用scp将save-tar拷到机器b上，然后：\"><a href=\"#使用scp将save-tar拷到机器b上，然后：\" class=\"headerlink\" title=\"使用scp将save.tar拷到机器b上，然后：\"></a>使用scp将save.tar拷到机器b上，然后：</h4><p><code>docker load &lt; /home/save.tar</code></p>\n<h2 id=\"8、-登录registry-server（login）\"><a href=\"#8、-登录registry-server（login）\" class=\"headerlink\" title=\"8、 登录registry server（login）\"></a>8、 登录registry server（login）</h2><h4 id=\"登陆registry-server\"><a href=\"#登陆registry-server\" class=\"headerlink\" title=\"登陆registry server\"></a>登陆registry server</h4><p><code>docker login</code><br>参数：</p>\n<ul>\n<li><strong>-e, –email=””</strong> Email; </li>\n<li><strong>-p, –password=””</strong> Password; </li>\n<li><strong>-u, –username=””</strong> Username  </li>\n</ul>\n<h2 id=\"9-发布image（push）\"><a href=\"#9-发布image（push）\" class=\"headerlink\" title=\"9. 发布image（push）\"></a>9. 发布image（push）</h2><h4 id=\"发布docker镜像\"><a href=\"#发布docker镜像\" class=\"headerlink\" title=\"发布docker镜像\"></a>发布docker镜像</h4><p><code>docker push new_image_name</code></p>\n<h2 id=\"10-根据Dockerfile-构建出一个容器\"><a href=\"#10-根据Dockerfile-构建出一个容器\" class=\"headerlink\" title=\"10.  根据Dockerfile 构建出一个容器\"></a>10.  根据Dockerfile 构建出一个容器</h2><h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p><code>docker build -t image_name Dockerfile_path</code><br>参数：</p>\n<ul>\n<li><strong>–no-cache=false</strong> Do not use cache when building the image</li>\n<li><strong>-q, –quiet=false</strong> Suppress the verbose output generated by the containers</li>\n<li><strong>–rm=true</strong> Remove intermediate containers after a successful build</li>\n<li><strong>-t, –tag=””</strong> Repository name (and optionally a tag) to be applied to the resulting image in case of success  </li>\n</ul>\n<hr>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>搭建Docker环境:<br>搭建Java Web环境：<a href=\"http://www.open-open.com/lib/view/open1422413794439.html\">http://www.open-open.com/lib/view/open1422413794439.html</a><br>Docker搭建私有仓库：<a href=\"http://blog.csdn.net/wangtaoking1/article/details/44180901\">http://blog.csdn.net/wangtaoking1/article/details/44180901</a><br>搭建WordPress站点：<a href=\"https://linux.cn/article-5560-1.html\">https://linux.cn/article-5560-1.html</a></p>\n<p>docker常用命令:<br><a href=\"http://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html\">http://www.cnblogs.com/ivictor/archive/2015/09/08/4791274.html</a></p>\n"},{"title":"VNC服务","date":"2016-11-02T08:23:15.000Z","_content":"\n# Centos\n\n## 安装vnc \n\n`yum -y install vnc-server tigervnc tigervnc-server`\n\n`vim /root/.vnc/xstartup`\n把最后一行 **twm &**  注释掉，然后添加一行内容**gnome-session &**\n然后保存退出\n\n`vim /etc/sysconfig/vncservers`\n修改一下最后两行如下\n```\nVNCSERVERS=\"1:root 2:root\"\nVNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -localhost\"\n```\n然后保存退出\n\nvncserver 设置密码\n\n最后启动vncserver 并设置为开机启动，【如果系统防火墙不会用，就关闭吧】\n```\nservice vncserver start\nchkconfig vncserver on\nservice iptables stop\nchkconfig iptables on```\n\n现在vncserver服务器端已经配置好了，使用客户端进行图形界面远程即可。注意vnc远程的时候，默认第一个端口是**5901**，第二个界面是 **5902**依次类推。所以在使用vnc客户端远程的时候，要注意。否则连接不上的。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/系统管理/2016-11-02-VNC服务.md","raw":"---\ntitle: VNC服务\ncategories:\n  - 系统管理\ntags:\n  - VNC服务\ndate: 2016-11-02 16:23:15\n---\n\n# Centos\n\n## 安装vnc \n\n`yum -y install vnc-server tigervnc tigervnc-server`\n\n`vim /root/.vnc/xstartup`\n把最后一行 **twm &**  注释掉，然后添加一行内容**gnome-session &**\n然后保存退出\n\n`vim /etc/sysconfig/vncservers`\n修改一下最后两行如下\n```\nVNCSERVERS=\"1:root 2:root\"\nVNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -localhost\"\n```\n然后保存退出\n\nvncserver 设置密码\n\n最后启动vncserver 并设置为开机启动，【如果系统防火墙不会用，就关闭吧】\n```\nservice vncserver start\nchkconfig vncserver on\nservice iptables stop\nchkconfig iptables on```\n\n现在vncserver服务器端已经配置好了，使用客户端进行图形界面远程即可。注意vnc远程的时候，默认第一个端口是**5901**，第二个界面是 **5902**依次类推。所以在使用vnc客户端远程的时候，要注意。否则连接不上的。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"系统管理-2016-11-02-VNC服务","published":1,"updated":"2016-11-02T08:27:47.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnw500260gpkxvw98otg","content":"<h1 id=\"Centos\"><a href=\"#Centos\" class=\"headerlink\" title=\"Centos\"></a>Centos</h1><h2 id=\"安装vnc\"><a href=\"#安装vnc\" class=\"headerlink\" title=\"安装vnc\"></a>安装vnc</h2><p><code>yum -y install vnc-server tigervnc tigervnc-server</code></p>\n<p><code>vim /root/.vnc/xstartup</code><br>把最后一行 <strong>twm &amp;</strong>  注释掉，然后添加一行内容<strong>gnome-session &amp;</strong><br>然后保存退出</p>\n<p><code>vim /etc/sysconfig/vncservers</code><br>修改一下最后两行如下<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">VNCSERVERS</span>=<span class=\"string\">\"1:root 2:root\"</span></div><div class=\"line\"><span class=\"attr\">VNCSERVERARGS[2]</span>=<span class=\"string\">\"-geometry 800x600 -nolisten tcp -localhost\"</span></div></pre></td></tr></table></figure></p>\n<p>然后保存退出</p>\n<p>vncserver 设置密码</p>\n<p>最后启动vncserver 并设置为开机启动，【如果系统防火墙不会用，就关闭吧】<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">service vncserver <span class=\"built_in\">start</span></div><div class=\"line\">chkconfig vncserver <span class=\"keyword\">on</span></div><div class=\"line\">service iptables <span class=\"built_in\">stop</span></div><div class=\"line\">chkconfig iptables <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>现在vncserver服务器端已经配置好了，使用客户端进行图形界面远程即可。注意vnc远程的时候，默认第一个端口是<strong>5901</strong>，第二个界面是 <strong>5902</strong>依次类推。所以在使用vnc客户端远程的时候，要注意。否则连接不上的。</p>\n","excerpt":"","more":"<h1 id=\"Centos\"><a href=\"#Centos\" class=\"headerlink\" title=\"Centos\"></a>Centos</h1><h2 id=\"安装vnc\"><a href=\"#安装vnc\" class=\"headerlink\" title=\"安装vnc\"></a>安装vnc</h2><p><code>yum -y install vnc-server tigervnc tigervnc-server</code></p>\n<p><code>vim /root/.vnc/xstartup</code><br>把最后一行 <strong>twm &amp;</strong>  注释掉，然后添加一行内容<strong>gnome-session &amp;</strong><br>然后保存退出</p>\n<p><code>vim /etc/sysconfig/vncservers</code><br>修改一下最后两行如下<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">VNCSERVERS</span>=<span class=\"string\">\"1:root 2:root\"</span></div><div class=\"line\"><span class=\"attr\">VNCSERVERARGS[2]</span>=<span class=\"string\">\"-geometry 800x600 -nolisten tcp -localhost\"</span></div></pre></td></tr></table></figure></p>\n<p>然后保存退出</p>\n<p>vncserver 设置密码</p>\n<p>最后启动vncserver 并设置为开机启动，【如果系统防火墙不会用，就关闭吧】<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">service vncserver <span class=\"built_in\">start</span></div><div class=\"line\">chkconfig vncserver <span class=\"keyword\">on</span></div><div class=\"line\">service iptables <span class=\"built_in\">stop</span></div><div class=\"line\">chkconfig iptables <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>现在vncserver服务器端已经配置好了，使用客户端进行图形界面远程即可。注意vnc远程的时候，默认第一个端口是<strong>5901</strong>，第二个界面是 <strong>5902</strong>依次类推。所以在使用vnc客户端远程的时候，要注意。否则连接不上的。</p>\n"},{"title":"集群、自动化链接更新页","date":"2016-11-03T09:51:42.000Z","_content":"\n## jumpserver\n官网：http://www.jumpserver.org/\nhttps://github.com/jumpserver/jumpserver\n\n## 堡垒机集群搭建\nhttp://www.tuicool.com/articles/vI7VzyB","source":"_posts/集群自动化/2016-11-03-集群、自动化链接更新页.md","raw":"---\ntitle: 集群、自动化链接更新页\ndate: 2016-11-03 17:51:42\ncategories:\n  - 集群自动化\ntags:\n  - 集群\n  - 自动化\n  - 堡垒机\n---\n\n## jumpserver\n官网：http://www.jumpserver.org/\nhttps://github.com/jumpserver/jumpserver\n\n## 堡垒机集群搭建\nhttp://www.tuicool.com/articles/vI7VzyB","slug":"集群自动化-2016-11-03-集群、自动化链接更新页","published":1,"updated":"2016-11-03T09:55:46.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnw500280gpkiw7uti3d","content":"<h2 id=\"jumpserver\"><a href=\"#jumpserver\" class=\"headerlink\" title=\"jumpserver\"></a>jumpserver</h2><p>官网：<a href=\"http://www.jumpserver.org/\" target=\"_blank\" rel=\"external\">http://www.jumpserver.org/</a><br><a href=\"https://github.com/jumpserver/jumpserver\" target=\"_blank\" rel=\"external\">https://github.com/jumpserver/jumpserver</a></p>\n<h2 id=\"堡垒机集群搭建\"><a href=\"#堡垒机集群搭建\" class=\"headerlink\" title=\"堡垒机集群搭建\"></a>堡垒机集群搭建</h2><p><a href=\"http://www.tuicool.com/articles/vI7VzyB\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/vI7VzyB</a></p>\n","excerpt":"","more":"<h2 id=\"jumpserver\"><a href=\"#jumpserver\" class=\"headerlink\" title=\"jumpserver\"></a>jumpserver</h2><p>官网：<a href=\"http://www.jumpserver.org/\">http://www.jumpserver.org/</a><br><a href=\"https://github.com/jumpserver/jumpserver\">https://github.com/jumpserver/jumpserver</a></p>\n<h2 id=\"堡垒机集群搭建\"><a href=\"#堡垒机集群搭建\" class=\"headerlink\" title=\"堡垒机集群搭建\"></a>堡垒机集群搭建</h2><p><a href=\"http://www.tuicool.com/articles/vI7VzyB\">http://www.tuicool.com/articles/vI7VzyB</a></p>\n"},{"title":"KVM虚拟化","date":"2016-11-03T02:27:18.000Z","_content":"\n* 检测\n`egrep 'vmx|svm' /proc/cpuinfo`\n\n* 安装 KVM\n```\nyum install -y kvm python-virtinst libvirt bridge-utils virt-manager gemu-kvm-tools virt-viewer virt-v2v libguestfs-tools```\n\n* 后台制作iso文件\n`nohup cp /dev/cdrom /data/iso/mini.iso &`\n\n* 安装iso文件\n```\nvirt-install --name=centos67 --ram 1024 --vcpus=1 --disk path=/data/kvm/centos67mini.img,size=20,bus=virtio --accelerate --cdrom /data/iso/mini.iso --vnc --vncport=5910 --vnclisten=0.0.0.0 --network bridge=be0,model=virtio --no-acpi --noautoconsole```\n\n----未完----","source":"_posts/虚拟化/2016-11-03-KVM虚拟化.md","raw":"---\ntitle: KVM虚拟化\ncategories:\n  - 虚拟化\ntags:\n  - KVM\ndate: 2016-11-03 10:27:18\n---\n\n* 检测\n`egrep 'vmx|svm' /proc/cpuinfo`\n\n* 安装 KVM\n```\nyum install -y kvm python-virtinst libvirt bridge-utils virt-manager gemu-kvm-tools virt-viewer virt-v2v libguestfs-tools```\n\n* 后台制作iso文件\n`nohup cp /dev/cdrom /data/iso/mini.iso &`\n\n* 安装iso文件\n```\nvirt-install --name=centos67 --ram 1024 --vcpus=1 --disk path=/data/kvm/centos67mini.img,size=20,bus=virtio --accelerate --cdrom /data/iso/mini.iso --vnc --vncport=5910 --vnclisten=0.0.0.0 --network bridge=be0,model=virtio --no-acpi --noautoconsole```\n\n----未完----","slug":"虚拟化-2016-11-03-KVM虚拟化","published":1,"updated":"2016-11-03T02:29:59.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnw5002b0gpkwry8yto4","content":"<ul>\n<li><p>检测<br><code>egrep &#39;vmx|svm&#39; /proc/cpuinfo</code></p>\n</li>\n<li><p>安装 KVM</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install </span>-y kvm python-virtinst libvirt <span class=\"keyword\">bridge-utils </span>virt-manager gemu-kvm-tools virt-viewer virt-v2v libguestfs-tools</div></pre></td></tr></table></figure>\n</li>\n<li><p>后台制作iso文件<br><code>nohup cp /dev/cdrom /data/iso/mini.iso &amp;</code></p>\n</li>\n<li><p>安装iso文件</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">virt</span><span class=\"literal\">-</span><span class=\"comment\">install</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">name=centos67</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">ram</span> <span class=\"comment\">1024</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vcpus=1</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">disk</span> <span class=\"comment\">path=/data/kvm/centos67mini</span><span class=\"string\">.</span><span class=\"comment\">img</span><span class=\"string\">,</span><span class=\"comment\">size=20</span><span class=\"string\">,</span><span class=\"comment\">bus=virtio</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">accelerate</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">cdrom</span> <span class=\"comment\">/data/iso/mini</span><span class=\"string\">.</span><span class=\"comment\">iso</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vnc</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vncport=5910</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vnclisten=0</span><span class=\"string\">.</span><span class=\"comment\">0</span><span class=\"string\">.</span><span class=\"comment\">0</span><span class=\"string\">.</span><span class=\"comment\">0</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">network</span> <span class=\"comment\">bridge=be0</span><span class=\"string\">,</span><span class=\"comment\">model=virtio</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">no</span><span class=\"literal\">-</span><span class=\"comment\">acpi</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">noautoconsole</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>—-未完—-</p>\n","excerpt":"","more":"<ul>\n<li><p>检测<br><code>egrep &#39;vmx|svm&#39; /proc/cpuinfo</code></p>\n</li>\n<li><p>安装 KVM</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install </span>-y kvm python-virtinst libvirt <span class=\"keyword\">bridge-utils </span>virt-manager gemu-kvm-tools virt-viewer virt-v2v libguestfs-tools</div></pre></td></tr></table></figure>\n</li>\n<li><p>后台制作iso文件<br><code>nohup cp /dev/cdrom /data/iso/mini.iso &amp;</code></p>\n</li>\n<li><p>安装iso文件</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">virt</span><span class=\"literal\">-</span><span class=\"comment\">install</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">name=centos67</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">ram</span> <span class=\"comment\">1024</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vcpus=1</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">disk</span> <span class=\"comment\">path=/data/kvm/centos67mini</span><span class=\"string\">.</span><span class=\"comment\">img</span><span class=\"string\">,</span><span class=\"comment\">size=20</span><span class=\"string\">,</span><span class=\"comment\">bus=virtio</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">accelerate</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">cdrom</span> <span class=\"comment\">/data/iso/mini</span><span class=\"string\">.</span><span class=\"comment\">iso</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vnc</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vncport=5910</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">vnclisten=0</span><span class=\"string\">.</span><span class=\"comment\">0</span><span class=\"string\">.</span><span class=\"comment\">0</span><span class=\"string\">.</span><span class=\"comment\">0</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">network</span> <span class=\"comment\">bridge=be0</span><span class=\"string\">,</span><span class=\"comment\">model=virtio</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">no</span><span class=\"literal\">-</span><span class=\"comment\">acpi</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">noautoconsole</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>—-未完—-</p>\n"},{"title":"tomcat单机多实例","date":"2016-11-03T09:25:35.000Z","_content":"\n运用了一个镜像启动多个容器，一个容器可以启动多个示例的原理，具体请搜索本博客：Docker常用命令\n\n此篇博客是学习“烂泥\"大神分享的笔记写的！\n\n主机IP：192.168.8.33\n容器IP：192.168.8.188\n从docker仓库下载最新的tomcat容器，然后使用这个tomcat容器，就可以启动多个tomcat实例，而我们只需要在192.168.0.100上通过端口进行区分就行了。\n\n启动第一个实例：\n```\ndocker run -dit --name tomcat8282 -v /root/:/root/ -p 8282:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash```\n\n`docker exec -it tomcat8282 /bin/bash`\n\n`cat webapps/ilanni/index.html`\n\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B001.png)\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B002.png)\n\n\n启动第二个实例：\n```\ndocker run -dit --name tomcat8383 -v /root/:/root/ -p 8383:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash```\n\n`docker exec -it tomcat8383 /bin/bash`\n\n`cat webapps/ilanni/index.html`\n\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B003.png)\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B004.png)\n\n","source":"_posts/虚拟化/2016-11-03-tomcat单机多实例.md","raw":"---\ntitle: tomcat单机多实例\ndate: 2016-11-03 17:25:35\ncategories:\n  - 虚拟化\ntags:\n  - \n---\n\n运用了一个镜像启动多个容器，一个容器可以启动多个示例的原理，具体请搜索本博客：Docker常用命令\n\n此篇博客是学习“烂泥\"大神分享的笔记写的！\n\n主机IP：192.168.8.33\n容器IP：192.168.8.188\n从docker仓库下载最新的tomcat容器，然后使用这个tomcat容器，就可以启动多个tomcat实例，而我们只需要在192.168.0.100上通过端口进行区分就行了。\n\n启动第一个实例：\n```\ndocker run -dit --name tomcat8282 -v /root/:/root/ -p 8282:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash```\n\n`docker exec -it tomcat8282 /bin/bash`\n\n`cat webapps/ilanni/index.html`\n\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B001.png)\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B002.png)\n\n\n启动第二个实例：\n```\ndocker run -dit --name tomcat8383 -v /root/:/root/ -p 8383:8080 192.168.8.188:5000/ilanni:160922-03-12 /bin/bash```\n\n`docker exec -it tomcat8383 /bin/bash`\n\n`cat webapps/ilanni/index.html`\n\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B003.png)\n![](http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B004.png)\n\n","slug":"虚拟化-2016-11-03-tomcat单机多实例","published":1,"updated":"2016-11-03T09:55:51.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnwk002d0gpk3dir2wq5","content":"<p>运用了一个镜像启动多个容器，一个容器可以启动多个示例的原理，具体请搜索本博客：Docker常用命令</p>\n<p>此篇博客是学习“烂泥”大神分享的笔记写的！</p>\n<p>主机IP：192.168.8.33<br>容器IP：192.168.8.188<br>从docker仓库下载最新的tomcat容器，然后使用这个tomcat容器，就可以启动多个tomcat实例，而我们只需要在192.168.0.100上通过端口进行区分就行了。</p>\n<p>启动第一个实例：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -dit --name tomcat8282 -v <span class=\"regexp\">/root/</span>:<span class=\"regexp\">/root/</span> -p <span class=\"number\">8282</span>:<span class=\"number\">8080</span> <span class=\"number\">192.168</span>.<span class=\"number\">8.188</span>:<span class=\"number\">5000</span><span class=\"regexp\">/ilanni:160922-03-12 /</span>bin<span class=\"regexp\">/bash</span></div></pre></td></tr></table></figure></p>\n<p><code>docker exec -it tomcat8282 /bin/bash</code></p>\n<p><code>cat webapps/ilanni/index.html</code></p>\n<p><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B002.png\" alt=\"\"></p>\n<p>启动第二个实例：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -dit --name tomcat8383 -v <span class=\"regexp\">/root/</span>:<span class=\"regexp\">/root/</span> -p <span class=\"number\">8383</span>:<span class=\"number\">8080</span> <span class=\"number\">192.168</span>.<span class=\"number\">8.188</span>:<span class=\"number\">5000</span><span class=\"regexp\">/ilanni:160922-03-12 /</span>bin<span class=\"regexp\">/bash</span></div></pre></td></tr></table></figure></p>\n<p><code>docker exec -it tomcat8383 /bin/bash</code></p>\n<p><code>cat webapps/ilanni/index.html</code></p>\n<p><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B003.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B004.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>运用了一个镜像启动多个容器，一个容器可以启动多个示例的原理，具体请搜索本博客：Docker常用命令</p>\n<p>此篇博客是学习“烂泥”大神分享的笔记写的！</p>\n<p>主机IP：192.168.8.33<br>容器IP：192.168.8.188<br>从docker仓库下载最新的tomcat容器，然后使用这个tomcat容器，就可以启动多个tomcat实例，而我们只需要在192.168.0.100上通过端口进行区分就行了。</p>\n<p>启动第一个实例：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -dit --name tomcat8282 -v <span class=\"regexp\">/root/</span>:<span class=\"regexp\">/root/</span> -p <span class=\"number\">8282</span>:<span class=\"number\">8080</span> <span class=\"number\">192.168</span>.<span class=\"number\">8.188</span>:<span class=\"number\">5000</span><span class=\"regexp\">/ilanni:160922-03-12 /</span>bin<span class=\"regexp\">/bash</span></div></pre></td></tr></table></figure></p>\n<p><code>docker exec -it tomcat8282 /bin/bash</code></p>\n<p><code>cat webapps/ilanni/index.html</code></p>\n<p><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B002.png\" alt=\"\"></p>\n<p>启动第二个实例：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -dit --name tomcat8383 -v <span class=\"regexp\">/root/</span>:<span class=\"regexp\">/root/</span> -p <span class=\"number\">8383</span>:<span class=\"number\">8080</span> <span class=\"number\">192.168</span>.<span class=\"number\">8.188</span>:<span class=\"number\">5000</span><span class=\"regexp\">/ilanni:160922-03-12 /</span>bin<span class=\"regexp\">/bash</span></div></pre></td></tr></table></figure></p>\n<p><code>docker exec -it tomcat8383 /bin/bash</code></p>\n<p><code>cat webapps/ilanni/index.html</code></p>\n<p><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B003.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/docker%20tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B004.png\" alt=\"\"></p>\n"},{"title":"LVM磁盘管理","date":"2016-11-03T00:57:16.000Z","_content":"\n## 动态扩容\nLVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：\n\n* 物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。\n* 物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。\n* 卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。\n* 逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。\n* PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。\n* LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n\n简单来说就是：\n\n* PV:是物理的磁盘分区\n* VG:LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。\n* LV：也就是从VG中划分的逻辑分区\n如下图所示PV、VG、LV三者关系：\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86001.png)\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86002.png)\n\n\n## 扩容原理：\n#### 用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\n貌似全程都不用格式化新建分区\n\n安装LVM\n首先确定系统中是否安装了lvm工具：\n\n* Centos:`yum install lvm2`              \n* Ubuntu:`apt-get install lvm2`\n\n`df -h` 和 `fdisk -l`  查看分区情况\n#### 开始分区：\n```\nfdisk /dev/sdb\nn          #新建\np          #设定为主分区\n回车       #设定起始扇区\n回车       #设定结束扇区（直接回车默认用全部空间创建，也可以输入+500M设定为500M）\n\nt         #此时输入L能看到所有格式的代码，指定分区格式，8e为LVM\nPartition number（1-4）：1     #指定分区，即为之后创建的sdb1-4(主分区只能4个)\n8e          # 设定为LVM\np           # 查看当前分区情况\nw           # 写入硬盘\n\npartprobe   # 重读分区表，可能会提示无法只读。。。。不用理会\n```\n查看当前PV:\n`pvdisplay` 或 `pvscan`\n\n创建PV（物理卷）\n`pvcreate /dev/sdb1`  使用之前创建的sdb1的全部空间创建PV，不想使用全部空间，之前分区时就要注意了。\n\n查看当前VG（卷组）\n`vgdisplay` 或 `vgscan`\n\n用/dev/sdb1创建VG并加到已存在的vg_bogon中\n`vgextend vg_bogon /dev/sdb1`  **vg_bogon是本机正在使用的vg_name**\n\n查看当前VG`vgdisplay`\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86003.png)\n发现有9.99G的空间\n\n#### 扩容/分区所在的LV（逻辑卷）\n**/dev/vg_bogon/LogVol01为正在使用的/分区**\n`lvextend -l +100%FREE /dev/vg_bogon/LogVol01`   **路径用/dev/vg_bogon/LogVol01**或**/dev/mapper/vg_bogon-LogVol01**都是可以的,**df -h**就能查看,或 `lvextend -L +10G  /dev/vg_bogon/LogVol01`   来增加10G空间。\n\n查看当前VG:\n`vgdisplay`已经扩容了，但**df -h** 显示没有扩容\n\n重设逻辑卷大小，对于当前正在使用的LogVol01有效\n`resize2fs /dev/vg_bogon/LogVol01`\n\n---\n\n#### 缩小其他分区扩容根分区\n* 1.首先查看磁盘使用情况:`df -h`\n文件系统 容量  已用 可用  已用% 挂载点\nFilesystem              Size  Used Avail Use% Mounted on  \n/dev/mapper/VolGroup-lv_root 154G  7.9G  139G   6% /\ntmpfs                  1.9G  100K  1.9G   1% /dev/shm\n/dev/sda1              485M   69M  391M  15% /boot\n/dev/mapper/VolGroup-lv_home 299G  984M  283G   1% /home\n\n* 2、卸载/home **这里缩小home，把扩容/分区**\n`umount /home`\n**umount /home** 如果提示无法卸载，则是有进程占用/home，使用如下命令来终止占用进程：`fuser -m /home`\n\n* 3、调整分区大小\n`resize2fs -p /dev/mapper/VolGroup-lv_home 20G`  **此处缩小home分区到20G**\n如果提示运行“e2fsck -f /dev/mapper/VolGroup-lv_home”，则执行相关命令： \n`e2fsck -f /dev/mapper/VolGroup-lv_home` \n然后重新执行命令:`resize2fs -p /dev/mapper/VolGroup-lv_home 20G`\n注：**resize2fs** 为重新设定磁盘大小，只是重新指定一下大小，并不对结果有影响，需要下面lvreduce的配合\n* 4、挂载上/home，查看磁盘使用情况\n```\nmount /home\ndf -h```\n 此时看/home分区只有20G了。\n\n* 5、设置空闲空间\n使用**lvreduce**指令用于减少LVM逻辑卷占用的空间大小。可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。记得输入 “y”\n`lvreduce -L 20G /dev/mapper/VolGroup-lv_home` **刚才只是把/home多余的空间标记为不使用，这一步开始真正分割lv，把/home的lv分割为刚刚设定的大小，只能比20G大，比20G小，多分割出来的地方数据会丢失（上面已经设定了为20G了）**\n\n注：**lvreduce -L 20G**的意思为设置当前文件系统为20G，如果lvreduce -l 20G是指从当前文件系统上减少20G **(-L设定为指定大小，-l减小指定大小),使用lvreduce减小逻辑卷的大小。注意：减小后的大小不能小于文件的大小，否则会丢失数据。 **\n \n可以使用**vgdisplay**命令等查看一下可以操作的大小。也可以是用fdisk -l命令查看详细信息。\n`vgdisplay` 注：vgdisplay为显示LVM卷组的元数据信息,此时可以看到有free空间。\n\n* 6.把闲置空间挂在到根目录下\n`lvextend -l +100%FREE  /dev/mapper/VolGroup-lv_root`  **把free空间全部分给/分区**\n注：如果使用**lvextend -L +283G**则为在文件系统上增加283G\n\n`resize2fs -p /dev/mapper/VolGroup-lv_root`   **重设磁盘大小**\n\n* 7、检查调整结果\n`df -h`\nOK扩容完成\n\n---\n\n#### 其他命令：\n* 移除lv逻辑卷：\n```\nlvdisplay\nlvremove -f /dev/vg_bogon/LogVol02  **移除该lv逻辑卷**```\n\n* lv逻辑卷重命名：\n`lvrename /dev/vg_bogon/LogVol02 /dev/vg_bogon/lv_root  `  \n如果无法修改可能是因为激活原因，激活VG就可以修改LV名了\n`lvchange -an /dev/vg_bogon/LogVol02`\n\n* VG重命名\n`vgrename vg_bogon vg_new `\n\n\n若不是用于扩容，只是用来做磁盘存储文件，则要挂载分区，开机自动挂载修改**/etc/fastab**文件。\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86004.png)\n如果改名的lv卷是启动分区的话，再修改**/etc/grub.conf**文件\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86005.png)\n   \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/系统管理/2016-11-03-LVM磁盘管理.md","raw":"---\ntitle: LVM磁盘管理\ncategories:\n  - 系统管理\ntags:\n  - LVM磁盘管理\n  - LVM扩容\ndate: 2016-11-03 08:57:16\n---\n\n## 动态扩容\nLVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：\n\n* 物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。\n* 物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。\n* 卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。\n* 逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。\n* PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。\n* LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。\n\n简单来说就是：\n\n* PV:是物理的磁盘分区\n* VG:LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。\n* LV：也就是从VG中划分的逻辑分区\n如下图所示PV、VG、LV三者关系：\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86001.png)\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86002.png)\n\n\n## 扩容原理：\n#### 用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\n貌似全程都不用格式化新建分区\n\n安装LVM\n首先确定系统中是否安装了lvm工具：\n\n* Centos:`yum install lvm2`              \n* Ubuntu:`apt-get install lvm2`\n\n`df -h` 和 `fdisk -l`  查看分区情况\n#### 开始分区：\n```\nfdisk /dev/sdb\nn          #新建\np          #设定为主分区\n回车       #设定起始扇区\n回车       #设定结束扇区（直接回车默认用全部空间创建，也可以输入+500M设定为500M）\n\nt         #此时输入L能看到所有格式的代码，指定分区格式，8e为LVM\nPartition number（1-4）：1     #指定分区，即为之后创建的sdb1-4(主分区只能4个)\n8e          # 设定为LVM\np           # 查看当前分区情况\nw           # 写入硬盘\n\npartprobe   # 重读分区表，可能会提示无法只读。。。。不用理会\n```\n查看当前PV:\n`pvdisplay` 或 `pvscan`\n\n创建PV（物理卷）\n`pvcreate /dev/sdb1`  使用之前创建的sdb1的全部空间创建PV，不想使用全部空间，之前分区时就要注意了。\n\n查看当前VG（卷组）\n`vgdisplay` 或 `vgscan`\n\n用/dev/sdb1创建VG并加到已存在的vg_bogon中\n`vgextend vg_bogon /dev/sdb1`  **vg_bogon是本机正在使用的vg_name**\n\n查看当前VG`vgdisplay`\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86003.png)\n发现有9.99G的空间\n\n#### 扩容/分区所在的LV（逻辑卷）\n**/dev/vg_bogon/LogVol01为正在使用的/分区**\n`lvextend -l +100%FREE /dev/vg_bogon/LogVol01`   **路径用/dev/vg_bogon/LogVol01**或**/dev/mapper/vg_bogon-LogVol01**都是可以的,**df -h**就能查看,或 `lvextend -L +10G  /dev/vg_bogon/LogVol01`   来增加10G空间。\n\n查看当前VG:\n`vgdisplay`已经扩容了，但**df -h** 显示没有扩容\n\n重设逻辑卷大小，对于当前正在使用的LogVol01有效\n`resize2fs /dev/vg_bogon/LogVol01`\n\n---\n\n#### 缩小其他分区扩容根分区\n* 1.首先查看磁盘使用情况:`df -h`\n文件系统 容量  已用 可用  已用% 挂载点\nFilesystem              Size  Used Avail Use% Mounted on  \n/dev/mapper/VolGroup-lv_root 154G  7.9G  139G   6% /\ntmpfs                  1.9G  100K  1.9G   1% /dev/shm\n/dev/sda1              485M   69M  391M  15% /boot\n/dev/mapper/VolGroup-lv_home 299G  984M  283G   1% /home\n\n* 2、卸载/home **这里缩小home，把扩容/分区**\n`umount /home`\n**umount /home** 如果提示无法卸载，则是有进程占用/home，使用如下命令来终止占用进程：`fuser -m /home`\n\n* 3、调整分区大小\n`resize2fs -p /dev/mapper/VolGroup-lv_home 20G`  **此处缩小home分区到20G**\n如果提示运行“e2fsck -f /dev/mapper/VolGroup-lv_home”，则执行相关命令： \n`e2fsck -f /dev/mapper/VolGroup-lv_home` \n然后重新执行命令:`resize2fs -p /dev/mapper/VolGroup-lv_home 20G`\n注：**resize2fs** 为重新设定磁盘大小，只是重新指定一下大小，并不对结果有影响，需要下面lvreduce的配合\n* 4、挂载上/home，查看磁盘使用情况\n```\nmount /home\ndf -h```\n 此时看/home分区只有20G了。\n\n* 5、设置空闲空间\n使用**lvreduce**指令用于减少LVM逻辑卷占用的空间大小。可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。记得输入 “y”\n`lvreduce -L 20G /dev/mapper/VolGroup-lv_home` **刚才只是把/home多余的空间标记为不使用，这一步开始真正分割lv，把/home的lv分割为刚刚设定的大小，只能比20G大，比20G小，多分割出来的地方数据会丢失（上面已经设定了为20G了）**\n\n注：**lvreduce -L 20G**的意思为设置当前文件系统为20G，如果lvreduce -l 20G是指从当前文件系统上减少20G **(-L设定为指定大小，-l减小指定大小),使用lvreduce减小逻辑卷的大小。注意：减小后的大小不能小于文件的大小，否则会丢失数据。 **\n \n可以使用**vgdisplay**命令等查看一下可以操作的大小。也可以是用fdisk -l命令查看详细信息。\n`vgdisplay` 注：vgdisplay为显示LVM卷组的元数据信息,此时可以看到有free空间。\n\n* 6.把闲置空间挂在到根目录下\n`lvextend -l +100%FREE  /dev/mapper/VolGroup-lv_root`  **把free空间全部分给/分区**\n注：如果使用**lvextend -L +283G**则为在文件系统上增加283G\n\n`resize2fs -p /dev/mapper/VolGroup-lv_root`   **重设磁盘大小**\n\n* 7、检查调整结果\n`df -h`\nOK扩容完成\n\n---\n\n#### 其他命令：\n* 移除lv逻辑卷：\n```\nlvdisplay\nlvremove -f /dev/vg_bogon/LogVol02  **移除该lv逻辑卷**```\n\n* lv逻辑卷重命名：\n`lvrename /dev/vg_bogon/LogVol02 /dev/vg_bogon/lv_root  `  \n如果无法修改可能是因为激活原因，激活VG就可以修改LV名了\n`lvchange -an /dev/vg_bogon/LogVol02`\n\n* VG重命名\n`vgrename vg_bogon vg_new `\n\n\n若不是用于扩容，只是用来做磁盘存储文件，则要挂载分区，开机自动挂载修改**/etc/fastab**文件。\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86004.png)\n如果改名的lv卷是启动分区的话，再修改**/etc/grub.conf**文件\n![](http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86005.png)\n   \n\n\n\n\n\n\n\n\n\n\n\n","slug":"系统管理-2016-11-03-LVM磁盘管理","published":1,"updated":"2016-11-03T01:32:04.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnwk002h0gpk55030ni0","content":"<h2 id=\"动态扩容\"><a href=\"#动态扩容\" class=\"headerlink\" title=\"动态扩容\"></a>动态扩容</h2><p>LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：</p>\n<ul>\n<li>物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。</li>\n<li>物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。</li>\n<li>卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。</li>\n<li>逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。</li>\n<li>PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。</li>\n<li>LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n</ul>\n<p>简单来说就是：</p>\n<ul>\n<li>PV:是物理的磁盘分区</li>\n<li>VG:LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。</li>\n<li>LV：也就是从VG中划分的逻辑分区<br>如下图所示PV、VG、LV三者关系：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86002.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"扩容原理：\"><a href=\"#扩容原理：\" class=\"headerlink\" title=\"扩容原理：\"></a>扩容原理：</h2><h4 id=\"用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\"><a href=\"#用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\" class=\"headerlink\" title=\"用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\"></a>用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。</h4><p>貌似全程都不用格式化新建分区</p>\n<p>安装LVM<br>首先确定系统中是否安装了lvm工具：</p>\n<ul>\n<li>Centos:<code>yum install lvm2</code>              </li>\n<li>Ubuntu:<code>apt-get install lvm2</code></li>\n</ul>\n<p><code>df -h</code> 和 <code>fdisk -l</code>  查看分区情况</p>\n<h4 id=\"开始分区：\"><a href=\"#开始分区：\" class=\"headerlink\" title=\"开始分区：\"></a>开始分区：</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb</div><div class=\"line\">n          <span class=\"comment\">#新建</span></div><div class=\"line\">p          <span class=\"comment\">#设定为主分区</span></div><div class=\"line\">回车       <span class=\"comment\">#设定起始扇区</span></div><div class=\"line\">回车       <span class=\"comment\">#设定结束扇区（直接回车默认用全部空间创建，也可以输入+500M设定为500M）</span></div><div class=\"line\"></div><div class=\"line\">t         <span class=\"comment\">#此时输入L能看到所有格式的代码，指定分区格式，8e为LVM</span></div><div class=\"line\">Partition <span class=\"built_in\">number</span>（<span class=\"number\">1</span><span class=\"number\">-4</span>）：<span class=\"number\">1</span>     <span class=\"comment\">#指定分区，即为之后创建的sdb1-4(主分区只能4个)</span></div><div class=\"line\"><span class=\"number\">8</span>e          <span class=\"comment\"># 设定为LVM</span></div><div class=\"line\">p           <span class=\"comment\"># 查看当前分区情况</span></div><div class=\"line\">w           <span class=\"comment\"># 写入硬盘</span></div><div class=\"line\"></div><div class=\"line\">partprobe   <span class=\"comment\"># 重读分区表，可能会提示无法只读。。。。不用理会</span></div></pre></td></tr></table></figure>\n<p>查看当前PV:<br><code>pvdisplay</code> 或 <code>pvscan</code></p>\n<p>创建PV（物理卷）<br><code>pvcreate /dev/sdb1</code>  使用之前创建的sdb1的全部空间创建PV，不想使用全部空间，之前分区时就要注意了。</p>\n<p>查看当前VG（卷组）<br><code>vgdisplay</code> 或 <code>vgscan</code></p>\n<p>用/dev/sdb1创建VG并加到已存在的vg_bogon中<br><code>vgextend vg_bogon /dev/sdb1</code>  <strong>vg_bogon是本机正在使用的vg_name</strong></p>\n<p>查看当前VG<code>vgdisplay</code><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86003.png\" alt=\"\"><br>发现有9.99G的空间</p>\n<h4 id=\"扩容-分区所在的LV（逻辑卷）\"><a href=\"#扩容-分区所在的LV（逻辑卷）\" class=\"headerlink\" title=\"扩容/分区所在的LV（逻辑卷）\"></a>扩容/分区所在的LV（逻辑卷）</h4><p><strong>/dev/vg_bogon/LogVol01为正在使用的/分区</strong><br><code>lvextend -l +100%FREE /dev/vg_bogon/LogVol01</code>   <strong>路径用/dev/vg_bogon/LogVol01</strong>或<strong>/dev/mapper/vg_bogon-LogVol01</strong>都是可以的,<strong>df -h</strong>就能查看,或 <code>lvextend -L +10G  /dev/vg_bogon/LogVol01</code>   来增加10G空间。</p>\n<p>查看当前VG:<br><code>vgdisplay</code>已经扩容了，但<strong>df -h</strong> 显示没有扩容</p>\n<p>重设逻辑卷大小，对于当前正在使用的LogVol01有效<br><code>resize2fs /dev/vg_bogon/LogVol01</code></p>\n<hr>\n<h4 id=\"缩小其他分区扩容根分区\"><a href=\"#缩小其他分区扩容根分区\" class=\"headerlink\" title=\"缩小其他分区扩容根分区\"></a>缩小其他分区扩容根分区</h4><ul>\n<li><p>1.首先查看磁盘使用情况:<code>df -h</code><br>文件系统 容量  已用 可用  已用% 挂载点<br>Filesystem              Size  Used Avail Use% Mounted on<br>/dev/mapper/VolGroup-lv_root 154G  7.9G  139G   6% /<br>tmpfs                  1.9G  100K  1.9G   1% /dev/shm<br>/dev/sda1              485M   69M  391M  15% /boot<br>/dev/mapper/VolGroup-lv_home 299G  984M  283G   1% /home</p>\n</li>\n<li><p>2、卸载/home <strong>这里缩小home，把扩容/分区</strong><br><code>umount /home</code><br><strong>umount /home</strong> 如果提示无法卸载，则是有进程占用/home，使用如下命令来终止占用进程：<code>fuser -m /home</code></p>\n</li>\n<li><p>3、调整分区大小<br><code>resize2fs -p /dev/mapper/VolGroup-lv_home 20G</code>  <strong>此处缩小home分区到20G</strong><br>如果提示运行“e2fsck -f /dev/mapper/VolGroup-lv_home”，则执行相关命令：<br><code>e2fsck -f /dev/mapper/VolGroup-lv_home</code><br>然后重新执行命令:<code>resize2fs -p /dev/mapper/VolGroup-lv_home 20G</code><br>注：<strong>resize2fs</strong> 为重新设定磁盘大小，只是重新指定一下大小，并不对结果有影响，需要下面lvreduce的配合</p>\n</li>\n<li><p>4、挂载上/home，查看磁盘使用情况</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount /<span class=\"built_in\">home</span></div><div class=\"line\">df -h</div></pre></td></tr></table></figure>\n<p>此时看/home分区只有20G了。</p>\n</li>\n<li><p>5、设置空闲空间<br>使用<strong>lvreduce</strong>指令用于减少LVM逻辑卷占用的空间大小。可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。记得输入 “y”<br><code>lvreduce -L 20G /dev/mapper/VolGroup-lv_home</code> <strong>刚才只是把/home多余的空间标记为不使用，这一步开始真正分割lv，把/home的lv分割为刚刚设定的大小，只能比20G大，比20G小，多分割出来的地方数据会丢失（上面已经设定了为20G了）</strong></p>\n</li>\n</ul>\n<p>注：<strong>lvreduce -L 20G</strong>的意思为设置当前文件系统为20G，如果lvreduce -l 20G是指从当前文件系统上减少20G <strong>(-L设定为指定大小，-l减小指定大小),使用lvreduce减小逻辑卷的大小。注意：减小后的大小不能小于文件的大小，否则会丢失数据。 </strong></p>\n<p>可以使用<strong>vgdisplay</strong>命令等查看一下可以操作的大小。也可以是用fdisk -l命令查看详细信息。<br><code>vgdisplay</code> 注：vgdisplay为显示LVM卷组的元数据信息,此时可以看到有free空间。</p>\n<ul>\n<li>6.把闲置空间挂在到根目录下<br><code>lvextend -l +100%FREE  /dev/mapper/VolGroup-lv_root</code>  <strong>把free空间全部分给/分区</strong><br>注：如果使用<strong>lvextend -L +283G</strong>则为在文件系统上增加283G</li>\n</ul>\n<p><code>resize2fs -p /dev/mapper/VolGroup-lv_root</code>   <strong>重设磁盘大小</strong></p>\n<ul>\n<li>7、检查调整结果<br><code>df -h</code><br>OK扩容完成</li>\n</ul>\n<hr>\n<h4 id=\"其他命令：\"><a href=\"#其他命令：\" class=\"headerlink\" title=\"其他命令：\"></a>其他命令：</h4><ul>\n<li><p>移除lv逻辑卷：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lvdisplay</div><div class=\"line\">lvremove -f <span class=\"regexp\">/dev/</span>vg_bogon<span class=\"regexp\">/LogVol02  **移除该lv逻辑卷**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>lv逻辑卷重命名：<br><code>lvrename /dev/vg_bogon/LogVol02 /dev/vg_bogon/lv_root</code><br>如果无法修改可能是因为激活原因，激活VG就可以修改LV名了<br><code>lvchange -an /dev/vg_bogon/LogVol02</code></p>\n</li>\n<li><p>VG重命名<br><code>vgrename vg_bogon vg_new</code></p>\n</li>\n</ul>\n<p>若不是用于扩容，只是用来做磁盘存储文件，则要挂载分区，开机自动挂载修改<strong>/etc/fastab</strong>文件。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86004.png\" alt=\"\"><br>如果改名的lv卷是启动分区的话，再修改<strong>/etc/grub.conf</strong>文件<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86005.png\" alt=\"\"></p>\n","excerpt":"","more":"<h2 id=\"动态扩容\"><a href=\"#动态扩容\" class=\"headerlink\" title=\"动态扩容\"></a>动态扩容</h2><p>LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。首先我们讨论以下几个LVM术语：</p>\n<ul>\n<li>物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元。</li>\n<li>物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。</li>\n<li>卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。</li>\n<li>逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。</li>\n<li>PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。</li>\n<li>LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。</li>\n</ul>\n<p>简单来说就是：</p>\n<ul>\n<li>PV:是物理的磁盘分区</li>\n<li>VG:LVM中的物理的磁盘分区，也就是PV，必须加入VG，可以将VG理解为一个仓库或者是几个大的硬盘。</li>\n<li>LV：也就是从VG中划分的逻辑分区<br>如下图所示PV、VG、LV三者关系：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86002.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"扩容原理：\"><a href=\"#扩容原理：\" class=\"headerlink\" title=\"扩容原理：\"></a>扩容原理：</h2><h4 id=\"用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\"><a href=\"#用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\" class=\"headerlink\" title=\"用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。\"></a>用新磁盘创建PV，然后合并到现有的VG中，然后再扩容某个LV。</h4><p>貌似全程都不用格式化新建分区</p>\n<p>安装LVM<br>首先确定系统中是否安装了lvm工具：</p>\n<ul>\n<li>Centos:<code>yum install lvm2</code>              </li>\n<li>Ubuntu:<code>apt-get install lvm2</code></li>\n</ul>\n<p><code>df -h</code> 和 <code>fdisk -l</code>  查看分区情况</p>\n<h4 id=\"开始分区：\"><a href=\"#开始分区：\" class=\"headerlink\" title=\"开始分区：\"></a>开始分区：</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb</div><div class=\"line\">n          <span class=\"comment\">#新建</span></div><div class=\"line\">p          <span class=\"comment\">#设定为主分区</span></div><div class=\"line\">回车       <span class=\"comment\">#设定起始扇区</span></div><div class=\"line\">回车       <span class=\"comment\">#设定结束扇区（直接回车默认用全部空间创建，也可以输入+500M设定为500M）</span></div><div class=\"line\"></div><div class=\"line\">t         <span class=\"comment\">#此时输入L能看到所有格式的代码，指定分区格式，8e为LVM</span></div><div class=\"line\">Partition <span class=\"built_in\">number</span>（<span class=\"number\">1</span><span class=\"number\">-4</span>）：<span class=\"number\">1</span>     <span class=\"comment\">#指定分区，即为之后创建的sdb1-4(主分区只能4个)</span></div><div class=\"line\"><span class=\"number\">8</span>e          <span class=\"comment\"># 设定为LVM</span></div><div class=\"line\">p           <span class=\"comment\"># 查看当前分区情况</span></div><div class=\"line\">w           <span class=\"comment\"># 写入硬盘</span></div><div class=\"line\"></div><div class=\"line\">partprobe   <span class=\"comment\"># 重读分区表，可能会提示无法只读。。。。不用理会</span></div></pre></td></tr></table></figure>\n<p>查看当前PV:<br><code>pvdisplay</code> 或 <code>pvscan</code></p>\n<p>创建PV（物理卷）<br><code>pvcreate /dev/sdb1</code>  使用之前创建的sdb1的全部空间创建PV，不想使用全部空间，之前分区时就要注意了。</p>\n<p>查看当前VG（卷组）<br><code>vgdisplay</code> 或 <code>vgscan</code></p>\n<p>用/dev/sdb1创建VG并加到已存在的vg_bogon中<br><code>vgextend vg_bogon /dev/sdb1</code>  <strong>vg_bogon是本机正在使用的vg_name</strong></p>\n<p>查看当前VG<code>vgdisplay</code><br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86003.png\" alt=\"\"><br>发现有9.99G的空间</p>\n<h4 id=\"扩容-分区所在的LV（逻辑卷）\"><a href=\"#扩容-分区所在的LV（逻辑卷）\" class=\"headerlink\" title=\"扩容/分区所在的LV（逻辑卷）\"></a>扩容/分区所在的LV（逻辑卷）</h4><p><strong>/dev/vg_bogon/LogVol01为正在使用的/分区</strong><br><code>lvextend -l +100%FREE /dev/vg_bogon/LogVol01</code>   <strong>路径用/dev/vg_bogon/LogVol01</strong>或<strong>/dev/mapper/vg_bogon-LogVol01</strong>都是可以的,<strong>df -h</strong>就能查看,或 <code>lvextend -L +10G  /dev/vg_bogon/LogVol01</code>   来增加10G空间。</p>\n<p>查看当前VG:<br><code>vgdisplay</code>已经扩容了，但<strong>df -h</strong> 显示没有扩容</p>\n<p>重设逻辑卷大小，对于当前正在使用的LogVol01有效<br><code>resize2fs /dev/vg_bogon/LogVol01</code></p>\n<hr>\n<h4 id=\"缩小其他分区扩容根分区\"><a href=\"#缩小其他分区扩容根分区\" class=\"headerlink\" title=\"缩小其他分区扩容根分区\"></a>缩小其他分区扩容根分区</h4><ul>\n<li><p>1.首先查看磁盘使用情况:<code>df -h</code><br>文件系统 容量  已用 可用  已用% 挂载点<br>Filesystem              Size  Used Avail Use% Mounted on<br>/dev/mapper/VolGroup-lv_root 154G  7.9G  139G   6% /<br>tmpfs                  1.9G  100K  1.9G   1% /dev/shm<br>/dev/sda1              485M   69M  391M  15% /boot<br>/dev/mapper/VolGroup-lv_home 299G  984M  283G   1% /home</p>\n</li>\n<li><p>2、卸载/home <strong>这里缩小home，把扩容/分区</strong><br><code>umount /home</code><br><strong>umount /home</strong> 如果提示无法卸载，则是有进程占用/home，使用如下命令来终止占用进程：<code>fuser -m /home</code></p>\n</li>\n<li><p>3、调整分区大小<br><code>resize2fs -p /dev/mapper/VolGroup-lv_home 20G</code>  <strong>此处缩小home分区到20G</strong><br>如果提示运行“e2fsck -f /dev/mapper/VolGroup-lv_home”，则执行相关命令：<br><code>e2fsck -f /dev/mapper/VolGroup-lv_home</code><br>然后重新执行命令:<code>resize2fs -p /dev/mapper/VolGroup-lv_home 20G</code><br>注：<strong>resize2fs</strong> 为重新设定磁盘大小，只是重新指定一下大小，并不对结果有影响，需要下面lvreduce的配合</p>\n</li>\n<li><p>4、挂载上/home，查看磁盘使用情况</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount /<span class=\"built_in\">home</span></div><div class=\"line\">df -h</div></pre></td></tr></table></figure>\n<p>此时看/home分区只有20G了。</p>\n</li>\n<li><p>5、设置空闲空间<br>使用<strong>lvreduce</strong>指令用于减少LVM逻辑卷占用的空间大小。可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。记得输入 “y”<br><code>lvreduce -L 20G /dev/mapper/VolGroup-lv_home</code> <strong>刚才只是把/home多余的空间标记为不使用，这一步开始真正分割lv，把/home的lv分割为刚刚设定的大小，只能比20G大，比20G小，多分割出来的地方数据会丢失（上面已经设定了为20G了）</strong></p>\n</li>\n</ul>\n<p>注：<strong>lvreduce -L 20G</strong>的意思为设置当前文件系统为20G，如果lvreduce -l 20G是指从当前文件系统上减少20G <strong>(-L设定为指定大小，-l减小指定大小),使用lvreduce减小逻辑卷的大小。注意：减小后的大小不能小于文件的大小，否则会丢失数据。 </strong></p>\n<p>可以使用<strong>vgdisplay</strong>命令等查看一下可以操作的大小。也可以是用fdisk -l命令查看详细信息。<br><code>vgdisplay</code> 注：vgdisplay为显示LVM卷组的元数据信息,此时可以看到有free空间。</p>\n<ul>\n<li>6.把闲置空间挂在到根目录下<br><code>lvextend -l +100%FREE  /dev/mapper/VolGroup-lv_root</code>  <strong>把free空间全部分给/分区</strong><br>注：如果使用<strong>lvextend -L +283G</strong>则为在文件系统上增加283G</li>\n</ul>\n<p><code>resize2fs -p /dev/mapper/VolGroup-lv_root</code>   <strong>重设磁盘大小</strong></p>\n<ul>\n<li>7、检查调整结果<br><code>df -h</code><br>OK扩容完成</li>\n</ul>\n<hr>\n<h4 id=\"其他命令：\"><a href=\"#其他命令：\" class=\"headerlink\" title=\"其他命令：\"></a>其他命令：</h4><ul>\n<li><p>移除lv逻辑卷：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">lvdisplay</div><div class=\"line\">lvremove -f <span class=\"regexp\">/dev/</span>vg_bogon<span class=\"regexp\">/LogVol02  **移除该lv逻辑卷**</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>lv逻辑卷重命名：<br><code>lvrename /dev/vg_bogon/LogVol02 /dev/vg_bogon/lv_root</code><br>如果无法修改可能是因为激活原因，激活VG就可以修改LV名了<br><code>lvchange -an /dev/vg_bogon/LogVol02</code></p>\n</li>\n<li><p>VG重命名<br><code>vgrename vg_bogon vg_new</code></p>\n</li>\n</ul>\n<p>若不是用于扩容，只是用来做磁盘存储文件，则要挂载分区，开机自动挂载修改<strong>/etc/fastab</strong>文件。<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86004.png\" alt=\"\"><br>如果改名的lv卷是启动分区的话，再修改<strong>/etc/grub.conf</strong>文件<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/LVM%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86005.png\" alt=\"\"></p>\n"},{"title":"服务器入侵肉鸡发包","date":"2016-11-03T01:34:15.000Z","_content":"\n安装工具：`yum install ifstat nload iptraf sysstat`\n\n大多数是因为PHP-ddos木马原因导致发包\n\n`watch ifconfig`　**查看数据包新增情况**\n\n`ifstat`　**查看网卡流量**\n\n|       eth0        ||        eth1         ||       \n|----------|---------|-----------|----------|\n|KB/s in   | KB/s out|  KB/s in  | KB/s out |\n|  407.34  |  154.99 |   134.96  |  324.29  |\n|  274.08  |  191.48 |   210.72  |  248.32  |\n|  240.20  |  192.91 |   257.22  |  179.06  |\n|  136.48  |  236.72 |   203.89  |  179.84  |\n\n`nload`　**以流量图显示**\n\n`iptraf`　**很直观的工具**\n\n[root@ct-nat ~]# `sar -n DEV 1 4` 　**查看4次数据**\n\n`netstat -tu -c`   查看发包的端口\n\n用 **lsof -i :39733** 查看端口的进程，Kill就可以了\n\n一篇博客的解决办法：\n从服务器上使用命令`sar -n DEV 1 4 `，确实出现大量发包的问题，（下边是正常的，异常的情况eth0txpck/s 10000左右了）\n\n先进行限速或者拔掉网线：\n开始之前，先要清除 eth0所有队列规则\n`tc qdisc del dev eth0 root 2> /dev/null > /dev/null`\n\n1) 定义最顶层(根)队列规则，并指定 default 类别编号\n```\ntc qdisc add dev eth0 root handle 1: htb default 20\ntc class add dev eth0 parent 1: classid 1:20 htb rate 2000kbit```\n\n（1KB/s = 8KBit/s）\n\nTC命令格式：\n```\ntc qdisc [ add | change | replace | link ] dev DEV [ parent qdisc-id | root ] [ handle qdisc-id ] qdisc [ qdisc specific parameters ]\n\ntc class [ add | change | replace ] dev DEV parent qdisc-id [ classid class-id ] qdisc [ qdisc specific parameters ]\n\ntc filter [ add | change | replace ] dev DEV [ parent qdisc-id | root ] protocol protocol prio priority filtertype [ filtertype specific parameters ] flowid flow-id```\n\n显示\n```\ntc [-s | -d ] qdisc show [ dev DEV ]\ntc [-s | -d ] class show dev DEV tc filter show dev DEV```\n\n查看TC的状态\n```\ntc -s -d qdisc show dev eth0\ntc -s -d class show dev eth0```\n\n删除tc规则\n\n`tc qdisc del dev eth0 root`\n\n查看状态：\n`top` CPU和MEM都正常，看不出异常的进程。\n\n```\nyum install -y tcpdump\ntcpdump -nn```\n找到大量的IP地址\n\n本机（192.168.35.145）和主机114.114.110.110之间的数据\n`tcpdump -n -i eth0 host 192.168.35.145 and 114.114.110.110`\n\n还有截取全部进入服务器的数据可以使用以下的格式\n`tcpdump -n -i eth0 dst 192.168.35.145`\n\n或者服务器有多个IP 可以使用参数\n`tcpdump -n -i eth0 dst 192.168.35.145  or  192.168.35.155`\n\n我们抓取全部进入服务器的TCP数据包使用以下的格式，大家可以参考下\n`tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 and tcp`\n\n从本机出去的数据包\n```\ntcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155\ntcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155 and port ! 22 and tcp```\n或者可以条件可以是or  和 and  配合使用即可筛选出更好的结果。\n\n可以将异常IP加入到**/etc/hosts.deny**中，或者防火墙设置下\n\n**NetHogs**查看网络使用情况\n```\nwget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nrpm -Uvh epel-release-6-8.noarch.rpm\nyum clean all\nyum makecache\nyum install nethogs -y\nnethogs```\n\n下图显示各进程当前网络使用情况：\n![](http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%851.jpg)\n\n按“m”键可以切换到统计视图，显示各进程总的网络使用情况\n![](http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%852.jpg)\n\n使用帮助：\n`nethogs --help`\n  \n\tusage: nethogs [-V] [-b] [-d seconds] [-t] [-p] [device [device [device ...]]]  \n\t\t-V : 显示版本信息，注意是大写字母V.  \n\t\t-d : 延迟更新刷新速率，以秒为单位。默认值为 1.  \n\t\t-t : 跟踪模式.  \n\t\t-b : bug 狩猎模式 — — 意味着跟踪模式.  \n\t\t-p : 混合模式（不推荐）.  \n\t\t设备 : 要监视的设备名称. 默认为 eth0  \n\t当 nethogs 运行时, 按:  \n\t\tq: 退出  \n\t\tm: 总数和当前使用情况模式之间切换  \n找到大量发包的进程，之后kill掉，再排查下这个进程是什么程序，文件路径在哪里，删除掉异常的文件。\n\n\n\n\n\n","source":"_posts/系统管理/2016-11-03-服务器入侵肉鸡发包.md","raw":"---\ntitle: 服务器入侵肉鸡发包\ncategories:\n  - 系统管理\ntags:\n  - 服务器入侵肉鸡发包\ndate: 2016-11-03 09:34:15\n---\n\n安装工具：`yum install ifstat nload iptraf sysstat`\n\n大多数是因为PHP-ddos木马原因导致发包\n\n`watch ifconfig`　**查看数据包新增情况**\n\n`ifstat`　**查看网卡流量**\n\n|       eth0        ||        eth1         ||       \n|----------|---------|-----------|----------|\n|KB/s in   | KB/s out|  KB/s in  | KB/s out |\n|  407.34  |  154.99 |   134.96  |  324.29  |\n|  274.08  |  191.48 |   210.72  |  248.32  |\n|  240.20  |  192.91 |   257.22  |  179.06  |\n|  136.48  |  236.72 |   203.89  |  179.84  |\n\n`nload`　**以流量图显示**\n\n`iptraf`　**很直观的工具**\n\n[root@ct-nat ~]# `sar -n DEV 1 4` 　**查看4次数据**\n\n`netstat -tu -c`   查看发包的端口\n\n用 **lsof -i :39733** 查看端口的进程，Kill就可以了\n\n一篇博客的解决办法：\n从服务器上使用命令`sar -n DEV 1 4 `，确实出现大量发包的问题，（下边是正常的，异常的情况eth0txpck/s 10000左右了）\n\n先进行限速或者拔掉网线：\n开始之前，先要清除 eth0所有队列规则\n`tc qdisc del dev eth0 root 2> /dev/null > /dev/null`\n\n1) 定义最顶层(根)队列规则，并指定 default 类别编号\n```\ntc qdisc add dev eth0 root handle 1: htb default 20\ntc class add dev eth0 parent 1: classid 1:20 htb rate 2000kbit```\n\n（1KB/s = 8KBit/s）\n\nTC命令格式：\n```\ntc qdisc [ add | change | replace | link ] dev DEV [ parent qdisc-id | root ] [ handle qdisc-id ] qdisc [ qdisc specific parameters ]\n\ntc class [ add | change | replace ] dev DEV parent qdisc-id [ classid class-id ] qdisc [ qdisc specific parameters ]\n\ntc filter [ add | change | replace ] dev DEV [ parent qdisc-id | root ] protocol protocol prio priority filtertype [ filtertype specific parameters ] flowid flow-id```\n\n显示\n```\ntc [-s | -d ] qdisc show [ dev DEV ]\ntc [-s | -d ] class show dev DEV tc filter show dev DEV```\n\n查看TC的状态\n```\ntc -s -d qdisc show dev eth0\ntc -s -d class show dev eth0```\n\n删除tc规则\n\n`tc qdisc del dev eth0 root`\n\n查看状态：\n`top` CPU和MEM都正常，看不出异常的进程。\n\n```\nyum install -y tcpdump\ntcpdump -nn```\n找到大量的IP地址\n\n本机（192.168.35.145）和主机114.114.110.110之间的数据\n`tcpdump -n -i eth0 host 192.168.35.145 and 114.114.110.110`\n\n还有截取全部进入服务器的数据可以使用以下的格式\n`tcpdump -n -i eth0 dst 192.168.35.145`\n\n或者服务器有多个IP 可以使用参数\n`tcpdump -n -i eth0 dst 192.168.35.145  or  192.168.35.155`\n\n我们抓取全部进入服务器的TCP数据包使用以下的格式，大家可以参考下\n`tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 and tcp`\n\n从本机出去的数据包\n```\ntcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155\ntcpdump -n -i eth0 src 192.168.35.145 or 192.168.35.155 and port ! 22 and tcp```\n或者可以条件可以是or  和 and  配合使用即可筛选出更好的结果。\n\n可以将异常IP加入到**/etc/hosts.deny**中，或者防火墙设置下\n\n**NetHogs**查看网络使用情况\n```\nwget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nrpm -Uvh epel-release-6-8.noarch.rpm\nyum clean all\nyum makecache\nyum install nethogs -y\nnethogs```\n\n下图显示各进程当前网络使用情况：\n![](http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%851.jpg)\n\n按“m”键可以切换到统计视图，显示各进程总的网络使用情况\n![](http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%852.jpg)\n\n使用帮助：\n`nethogs --help`\n  \n\tusage: nethogs [-V] [-b] [-d seconds] [-t] [-p] [device [device [device ...]]]  \n\t\t-V : 显示版本信息，注意是大写字母V.  \n\t\t-d : 延迟更新刷新速率，以秒为单位。默认值为 1.  \n\t\t-t : 跟踪模式.  \n\t\t-b : bug 狩猎模式 — — 意味着跟踪模式.  \n\t\t-p : 混合模式（不推荐）.  \n\t\t设备 : 要监视的设备名称. 默认为 eth0  \n\t当 nethogs 运行时, 按:  \n\t\tq: 退出  \n\t\tm: 总数和当前使用情况模式之间切换  \n找到大量发包的进程，之后kill掉，再排查下这个进程是什么程序，文件路径在哪里，删除掉异常的文件。\n\n\n\n\n\n","slug":"系统管理-2016-11-03-服务器入侵肉鸡发包","published":1,"updated":"2016-11-03T02:15:29.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ39nnwk002j0gpkeauvxs41","content":"<p>安装工具：<code>yum install ifstat nload iptraf sysstat</code></p>\n<p>大多数是因为PHP-ddos木马原因导致发包</p>\n<p><code>watch ifconfig</code>　<strong>查看数据包新增情况</strong></p>\n<p><code>ifstat</code>　<strong>查看网卡流量</strong></p>\n<table>\n<thead>\n<tr>\n<th>eth0</th>\n<th></th>\n<th>eth1</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KB/s in</td>\n<td>KB/s out</td>\n<td>KB/s in</td>\n<td>KB/s out</td>\n</tr>\n<tr>\n<td>407.34</td>\n<td>154.99</td>\n<td>134.96</td>\n<td>324.29</td>\n</tr>\n<tr>\n<td>274.08</td>\n<td>191.48</td>\n<td>210.72</td>\n<td>248.32</td>\n</tr>\n<tr>\n<td>240.20</td>\n<td>192.91</td>\n<td>257.22</td>\n<td>179.06</td>\n</tr>\n<tr>\n<td>136.48</td>\n<td>236.72</td>\n<td>203.89</td>\n<td>179.84</td>\n</tr>\n</tbody>\n</table>\n<p><code>nload</code>　<strong>以流量图显示</strong></p>\n<p><code>iptraf</code>　<strong>很直观的工具</strong></p>\n<p>[root@ct-nat ~]# <code>sar -n DEV 1 4</code> 　<strong>查看4次数据</strong></p>\n<p><code>netstat -tu -c</code>   查看发包的端口</p>\n<p>用 <strong>lsof -i :39733</strong> 查看端口的进程，Kill就可以了</p>\n<p>一篇博客的解决办法：<br>从服务器上使用命令<code>sar -n DEV 1 4</code>，确实出现大量发包的问题，（下边是正常的，异常的情况eth0txpck/s 10000左右了）</p>\n<p>先进行限速或者拔掉网线：<br>开始之前，先要清除 eth0所有队列规则<br><code>tc qdisc del dev eth0 root 2&gt; /dev/null &gt; /dev/null</code></p>\n<p>1) 定义最顶层(根)队列规则，并指定 default 类别编号<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc qdisc <span class=\"keyword\">add</span><span class=\"bash\"> dev eth0 root handle 1: htb default 20</span></div><div class=\"line\">tc class <span class=\"keyword\">add</span><span class=\"bash\"> dev eth0 parent 1: classid 1:20 htb rate 2000kbit</span></div></pre></td></tr></table></figure></p>\n<p>（1KB/s = 8KBit/s）</p>\n<p>TC命令格式：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc qdisc [ add | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> | <span class=\"keyword\">link</span> ] dev DEV [ <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> | root ] [ handle qdisc-<span class=\"keyword\">id</span> ] qdisc [ qdisc specific <span class=\"keyword\">parameters</span> ]</div><div class=\"line\"></div><div class=\"line\">tc <span class=\"keyword\">class</span> [ <span class=\"keyword\">add</span> | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> ] dev DEV <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> [ classid <span class=\"keyword\">class</span>-<span class=\"keyword\">id</span> ] qdisc [ qdisc specific <span class=\"keyword\">parameters</span> ]</div><div class=\"line\"></div><div class=\"line\">tc filter [ <span class=\"keyword\">add</span> | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> ] dev DEV [ <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> | root ] protocol protocol prio <span class=\"keyword\">priority</span> filtertype [ filtertype specific <span class=\"keyword\">parameters</span> ] flowid flow-<span class=\"keyword\">id</span></div></pre></td></tr></table></figure></p>\n<p>显示<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc [-s | -d ] qdisc <span class=\"built_in\">show</span> [ <span class=\"built_in\">dev</span> DEV ]</div><div class=\"line\">tc [-s | -d ] class <span class=\"built_in\">show</span> <span class=\"built_in\">dev</span> DEV tc filter <span class=\"built_in\">show</span> <span class=\"built_in\">dev</span> DEV</div></pre></td></tr></table></figure></p>\n<p>查看TC的状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc <span class=\"_\">-s</span> <span class=\"_\">-d</span> qdisc show dev eth0</div><div class=\"line\">tc <span class=\"_\">-s</span> <span class=\"_\">-d</span> class show dev eth0</div></pre></td></tr></table></figure></p>\n<p>删除tc规则</p>\n<p><code>tc qdisc del dev eth0 root</code></p>\n<p>查看状态：<br><code>top</code> CPU和MEM都正常，看不出异常的进程。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> -y tcpdump</div><div class=\"line\">tcpdump -nn</div></pre></td></tr></table></figure>\n<p>找到大量的IP地址</p>\n<p>本机（192.168.35.145）和主机114.114.110.110之间的数据<br><code>tcpdump -n -i eth0 host 192.168.35.145 and 114.114.110.110</code></p>\n<p>还有截取全部进入服务器的数据可以使用以下的格式<br><code>tcpdump -n -i eth0 dst 192.168.35.145</code></p>\n<p>或者服务器有多个IP 可以使用参数<br><code>tcpdump -n -i eth0 dst 192.168.35.145  or  192.168.35.155</code></p>\n<p>我们抓取全部进入服务器的TCP数据包使用以下的格式，大家可以参考下<br><code>tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 and tcp</code></p>\n<p>从本机出去的数据包<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -n -i eth0 src <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.145</span> or <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.155</span></div><div class=\"line\">tcpdump -n -i eth0 src <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.145</span> or <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.155</span> and port ! <span class=\"number\">22</span> and tcp</div></pre></td></tr></table></figure></p>\n<p>或者可以条件可以是or  和 and  配合使用即可筛选出更好的结果。</p>\n<p>可以将异常IP加入到<strong>/etc/hosts.deny</strong>中，或者防火墙设置下</p>\n<p><strong>NetHogs</strong>查看网络使用情况<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http:<span class=\"comment\">//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></div><div class=\"line\">rpm -Uvh epel-release-<span class=\"number\">6</span>-<span class=\"number\">8</span><span class=\"selector-class\">.noarch</span><span class=\"selector-class\">.rpm</span></div><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div><div class=\"line\">yum install nethogs -y</div><div class=\"line\">nethogs</div></pre></td></tr></table></figure></p>\n<p>下图显示各进程当前网络使用情况：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%851.jpg\" alt=\"\"></p>\n<p>按“m”键可以切换到统计视图，显示各进程总的网络使用情况<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%852.jpg\" alt=\"\"></p>\n<p>使用帮助：<br><code>nethogs --help</code></p>\n<pre><code>usage: nethogs [-V] [-b] [-d seconds] [-t] [-p] [device [device [device ...]]]  \n    -V : 显示版本信息，注意是大写字母V.  \n    -d : 延迟更新刷新速率，以秒为单位。默认值为 1.  \n    -t : 跟踪模式.  \n    -b : bug 狩猎模式 — — 意味着跟踪模式.  \n    -p : 混合模式（不推荐）.  \n    设备 : 要监视的设备名称. 默认为 eth0  \n当 nethogs 运行时, 按:  \n    q: 退出  \n    m: 总数和当前使用情况模式之间切换  \n</code></pre><p>找到大量发包的进程，之后kill掉，再排查下这个进程是什么程序，文件路径在哪里，删除掉异常的文件。</p>\n","excerpt":"","more":"<p>安装工具：<code>yum install ifstat nload iptraf sysstat</code></p>\n<p>大多数是因为PHP-ddos木马原因导致发包</p>\n<p><code>watch ifconfig</code>　<strong>查看数据包新增情况</strong></p>\n<p><code>ifstat</code>　<strong>查看网卡流量</strong></p>\n<table>\n<thead>\n<tr>\n<th>eth0</th>\n<th></th>\n<th>eth1</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KB/s in</td>\n<td>KB/s out</td>\n<td>KB/s in</td>\n<td>KB/s out</td>\n</tr>\n<tr>\n<td>407.34</td>\n<td>154.99</td>\n<td>134.96</td>\n<td>324.29</td>\n</tr>\n<tr>\n<td>274.08</td>\n<td>191.48</td>\n<td>210.72</td>\n<td>248.32</td>\n</tr>\n<tr>\n<td>240.20</td>\n<td>192.91</td>\n<td>257.22</td>\n<td>179.06</td>\n</tr>\n<tr>\n<td>136.48</td>\n<td>236.72</td>\n<td>203.89</td>\n<td>179.84</td>\n</tr>\n</tbody>\n</table>\n<p><code>nload</code>　<strong>以流量图显示</strong></p>\n<p><code>iptraf</code>　<strong>很直观的工具</strong></p>\n<p>[root@ct-nat ~]# <code>sar -n DEV 1 4</code> 　<strong>查看4次数据</strong></p>\n<p><code>netstat -tu -c</code>   查看发包的端口</p>\n<p>用 <strong>lsof -i :39733</strong> 查看端口的进程，Kill就可以了</p>\n<p>一篇博客的解决办法：<br>从服务器上使用命令<code>sar -n DEV 1 4</code>，确实出现大量发包的问题，（下边是正常的，异常的情况eth0txpck/s 10000左右了）</p>\n<p>先进行限速或者拔掉网线：<br>开始之前，先要清除 eth0所有队列规则<br><code>tc qdisc del dev eth0 root 2&gt; /dev/null &gt; /dev/null</code></p>\n<p>1) 定义最顶层(根)队列规则，并指定 default 类别编号<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc qdisc <span class=\"keyword\">add</span><span class=\"bash\"> dev eth0 root handle 1: htb default 20</div><div class=\"line\"></span>tc class <span class=\"keyword\">add</span><span class=\"bash\"> dev eth0 parent 1: classid 1:20 htb rate 2000kbit</span></div></pre></td></tr></table></figure></p>\n<p>（1KB/s = 8KBit/s）</p>\n<p>TC命令格式：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc qdisc [ add | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> | <span class=\"keyword\">link</span> ] dev DEV [ <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> | root ] [ handle qdisc-<span class=\"keyword\">id</span> ] qdisc [ qdisc specific <span class=\"keyword\">parameters</span> ]</div><div class=\"line\"></div><div class=\"line\">tc <span class=\"keyword\">class</span> [ <span class=\"keyword\">add</span> | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> ] dev DEV <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> [ classid <span class=\"keyword\">class</span>-<span class=\"keyword\">id</span> ] qdisc [ qdisc specific <span class=\"keyword\">parameters</span> ]</div><div class=\"line\"></div><div class=\"line\">tc filter [ <span class=\"keyword\">add</span> | <span class=\"keyword\">change</span> | <span class=\"keyword\">replace</span> ] dev DEV [ <span class=\"keyword\">parent</span> qdisc-<span class=\"keyword\">id</span> | root ] protocol protocol prio <span class=\"keyword\">priority</span> filtertype [ filtertype specific <span class=\"keyword\">parameters</span> ] flowid flow-<span class=\"keyword\">id</span></div></pre></td></tr></table></figure></p>\n<p>显示<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc [-s | -d ] qdisc <span class=\"built_in\">show</span> [ <span class=\"built_in\">dev</span> DEV ]</div><div class=\"line\">tc [-s | -d ] class <span class=\"built_in\">show</span> <span class=\"built_in\">dev</span> DEV tc filter <span class=\"built_in\">show</span> <span class=\"built_in\">dev</span> DEV</div></pre></td></tr></table></figure></p>\n<p>查看TC的状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tc <span class=\"_\">-s</span> <span class=\"_\">-d</span> qdisc show dev eth0</div><div class=\"line\">tc <span class=\"_\">-s</span> <span class=\"_\">-d</span> class show dev eth0</div></pre></td></tr></table></figure></p>\n<p>删除tc规则</p>\n<p><code>tc qdisc del dev eth0 root</code></p>\n<p>查看状态：<br><code>top</code> CPU和MEM都正常，看不出异常的进程。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> -y tcpdump</div><div class=\"line\">tcpdump -nn</div></pre></td></tr></table></figure>\n<p>找到大量的IP地址</p>\n<p>本机（192.168.35.145）和主机114.114.110.110之间的数据<br><code>tcpdump -n -i eth0 host 192.168.35.145 and 114.114.110.110</code></p>\n<p>还有截取全部进入服务器的数据可以使用以下的格式<br><code>tcpdump -n -i eth0 dst 192.168.35.145</code></p>\n<p>或者服务器有多个IP 可以使用参数<br><code>tcpdump -n -i eth0 dst 192.168.35.145  or  192.168.35.155</code></p>\n<p>我们抓取全部进入服务器的TCP数据包使用以下的格式，大家可以参考下<br><code>tcpdump -n -i eth0 dst 192.168.35.145 or 192.168.35.155 and tcp</code></p>\n<p>从本机出去的数据包<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -n -i eth0 src <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.145</span> or <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.155</span></div><div class=\"line\">tcpdump -n -i eth0 src <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.145</span> or <span class=\"number\">192.168</span><span class=\"number\">.35</span><span class=\"number\">.155</span> and port ! <span class=\"number\">22</span> and tcp</div></pre></td></tr></table></figure></p>\n<p>或者可以条件可以是or  和 and  配合使用即可筛选出更好的结果。</p>\n<p>可以将异常IP加入到<strong>/etc/hosts.deny</strong>中，或者防火墙设置下</p>\n<p><strong>NetHogs</strong>查看网络使用情况<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http:<span class=\"comment\">//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></div><div class=\"line\">rpm -Uvh epel-release-<span class=\"number\">6</span>-<span class=\"number\">8</span><span class=\"selector-class\">.noarch</span><span class=\"selector-class\">.rpm</span></div><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div><div class=\"line\">yum install nethogs -y</div><div class=\"line\">nethogs</div></pre></td></tr></table></figure></p>\n<p>下图显示各进程当前网络使用情况：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%851.jpg\" alt=\"\"></p>\n<p>按“m”键可以切换到统计视图，显示各进程总的网络使用情况<br><img src=\"http://ofyfogrgx.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E4%BE%B5%E8%82%89%E9%B8%A1%E5%8F%91%E5%8C%852.jpg\" alt=\"\"></p>\n<p>使用帮助：<br><code>nethogs --help</code></p>\n<pre><code>usage: nethogs [-V] [-b] [-d seconds] [-t] [-p] [device [device [device ...]]]  \n    -V : 显示版本信息，注意是大写字母V.  \n    -d : 延迟更新刷新速率，以秒为单位。默认值为 1.  \n    -t : 跟踪模式.  \n    -b : bug 狩猎模式 — — 意味着跟踪模式.  \n    -p : 混合模式（不推荐）.  \n    设备 : 要监视的设备名称. 默认为 eth0  \n当 nethogs 运行时, 按:  \n    q: 退出  \n    m: 总数和当前使用情况模式之间切换  \n</code></pre><p>找到大量发包的进程，之后kill掉，再排查下这个进程是什么程序，文件路径在哪里，删除掉异常的文件。</p>\n"},{"title":"Git教程","date":"2016-11-04T06:03:40.000Z","_content":"\n# 安装Git\n## Debian/Ubuntu\n`apt-get install git`\n## Centos/RedHat\n`yum install git`\n## Windows\n安装包下载：https://git-for-windows.github.io/\n## Mac\n安装包下载：https://sourceforge.net/projects/git-osx-installer/\n\n`git --version`  　查看版本\n\n---\n\n# Git配置\n`ls -a`\t或 `ls -ah`\t方便查看隐藏文件\n执行`git config`命令就是调用此文件\n`/etc/gitconfig `       全部用户生效 --system调用的文件\n`～/.gitcinfig   `      当前用户有效 --global调用的文件\n`.git/config  `         当前项目的配置文件\n**.git/config**的配置会覆盖**/etc/gitconfig** 中的同名变量。\nwin中配置文件一般在主目录下的对应用户文件夹里**C:\\Documents and Settings\\$USER**\nwin中**/etc/gitconfig**是在安装目录中。\n\n## 用户信息配置\n```\ngit config --global user.name \"leolan\"  #leolan为用户名\ngit config --global user.email 842632422@qq.com   #邮箱\n(用了global选项后当前用户的所有项目默认使用此用户信息，某一项目若使用其它的用户信息。把--global去掉重新配置，会在该项目.git/config中重新生成配置就行了。)\n以下可选：\ngit config --global core.editor emace   #指定emace为默认编辑器，不指定默认为vim\ngit config --global merge.tool vimdiff  #差异化分析工具（冲突合并），git可以理解kdiff3 ,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,opendiff等工具的输出信息。\n\ngit config user.name   #查看配置的用户名，改为user.email则为邮箱。\ngit config --list      #查看已配置的用户信息```\n\n---\n\n# 基本使用方法\n**一般进入某项目的目录后再执行以下命令。**\n```\ngit init\t        #设置当前目录为Git仓库\ngit init 目录名 \t        #指定目录为Git仓库\n\ngit clone ［源］\t\t#从源拷贝项目到本地的当前目录\ngit clone ［源］［目录］\t#指定源下载到某个目录\n例：git clone git://github.com/schacon/grit.git mygrit\n\ngit status\t\t#查看当前目录文件的状态，加 -s 显示简短信息。\"A\"是已添加到缓存、\"M\"为文件有改动、\"空格\"为未缓存的文件，组合显示如：\"AM\"代表已缓存的文件有改动，\"空格M\"代表未缓存的文件有改动。\ngit add 文件名   #添加文件到项目缓存中，没有添加的文件不属于项目文件，也不会痛不到服务器。\ngit add .  \t\t#添加当前目录到项目缓存中，如果添加多个文件，此命令更方便。\ngit commit -m \"项目的版本或简短说明\"\t#可以指定版本号及简单说明改动了哪些内容，同时会把所有改动同步到服务器上。\ngit commit -am \"项目的版本或简短说明\"\t#改动了多个文件又不想一个个添加，此命令自动添加所有改动的文件并同步到服务器。```\n\nGit的所有工作都是现在本地缓存的，只有执行**git commit -m \"简短说明\"** 后才会向服务器提交。\n```\ngit diff\t        #未缓存的改动\ngit diff --cached\t#已缓存的改动\ngit diff HEAD\t\t#已缓存和未缓存的所有改动\ngit diff --stat\t\t#显示摘要而非整个diff\ngit reset -- HEAD 文件\t#取消文件已缓存的内容，--很重要，没有加--表示切换到另一个分支。\ngit rm 文件\t\t#从项目中及本地删除文件,可不用执行。\ngit mv 文件\t\t#从项目中及本地重命名文件,可不用执行。```\n\n---\n# 创建远程仓库\n在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n* 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：`ssh-keygen -t rsa -C \"842632422@qq.com\"`你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，**id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥**，可以放心地告诉任何人。\n\n* 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub（公钥）文件的内容：\n\n点“Add Key”，你就应该看到已经添加的Key：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B001.png)\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B002.png)\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。\n\tssh -T git@github.com\n提示：Hi MyLeoLan! You've successfully authenticated, but GitHub does not provide shell access.　　则成功添加sshkey\n\n在右上角找到“Create a new repo”按钮，创建一个新的仓库：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B003.png)\n目前，在GitHub上的这个仓库还是空的，会提示你创建README.md文件。\n\n##### 可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和**fork**的方式不同，这种方式要删除隐藏的**.git文件夹**因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\n\n---\n\n# 从远程库克隆仓库\n远程库已经准备好了，下一步是用命令git clone克隆一个本地库：\n\tgit clone git@github.com:MyLeoLan/testgit.git\n实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。\n使用https除了速度慢以外，还有个最大的麻烦是**每次推送都必须输入口令**，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。\n\n# 把本地仓库的内容推送到GitHub仓库\n在本地的XXX仓库下运行命令：\n\tgit remote add origin git@github.com:myleolan/learngit.git\n表示把本地的XXX仓库与远程learngit.git库绑定，以后推送都推送到这个库中。地址换成自己的库地址。你的SSH Key公钥不在我的账户列表中是推不上去的。\n\n\n\n---\n\n# 搭建Git服务器\nGitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。搭建Git服务器需要准备一台运行Linux的机器，强烈用Ubuntu、Debian或者Centos、redhat，这样，通过几条简单的apt命令就可以完成安装。\n**root登录**\n\n* 第一步，**安装git：**\n`sudo apt-get install git` 或 `yum install git`\n\n* 第二步，**创建一个git用户，用来运行git服务：**\n`sudo adduser git`\n\n\n* 第三步，**初始化Git仓库：**\n先选定一个目录作为Git仓库，假定是/data/git/learngit.git\n在/data/git/目录下输入命令：\n`sudo git init --bare learngit.git`\n\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。\n`sudo chown -R git:git learngit.git`\n\nGit服务器就已经搭得差不多了。下面我们在客户端clone一下远程仓库\n`git clone git@IP:/data/git/learngit.git`\nCloning into 'learngit'...\nThe authenticity of host '192.168.8.34 (192.168.8.34)' can't be established.\nRSA key fingerprint is 2b:55:45:e7:4c:29:cc:05:33:78:03:bd:a8:cd:08:9d.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.8.34' (RSA) to the list of known hosts.\ngit@192.168.8.34's password:\n**能连接但要密码**，接着下一步。\n\n* **第四步，创建证书登录（Git服务器打开RSA认证）**：然后就可以去Git服务器上添加你的公钥用来验证你的信息了。`vim /etc/ssh/sshd_config`中将RSA认证打开，即：\n```\nRSAAuthentication yes     \nPubkeyAuthentication yes     \nAuthorizedKeysFile  .ssh/authorized_keys```\n\n这里我们可以看到**公钥存放在.ssh/authorized_keys**文件中。所以我们在**/home/git下创建.ssh目录，然后创建authorized_keys文件**，收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到**/home/git/.ssh/authorized_keys文件里，一行一个。**\n此时再次连接已经可以免密钥登录啦。\n\n* **第五步，禁用shell登录：**\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过\n编辑/etc/passwd文件完成。找到类似下面的一行：\n`git:x:1001:1001:,,,:/home/git:/bin/bash`\n改为：\n`git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell`\n\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n\n* 第六步，**克隆远程仓库：**\n现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：\n`git clone git@IP:/data/git/learngit.git`\nCloning into 'sample'...\nwarning: You appear to have cloned an empty repository.\n剩下的推送就简单了。\n\n**管理公钥**\n\n如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用**Gitosis**来管理公钥。\n这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。管理公钥也可用**Gitolite**\n**管理权限**\n有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为**Git支持钩子（hook）**，所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。**Gitolite**就是这个工具。\n这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。\n\n搭建服务器的同时采用Gitolite来管理权限，参考：\nhttps://my.oschina.net/u/2351685/blog/509322\nGitolite的使用，参考：http://www.uml.org.cn/pzgl/201404092.asp\n\n\n---\n\n参考资料：\n连猴子都会的git：\nhttp://backlogtool.com/git-guide/cn/intro/intro1_3.html\n廖雪峰git：\n\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\nPro Git：\nhttp://iissnan.com/progit/\n外国友人git手册:\nhttps://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit\n10个迅速提升你 Git 水平的提示:\nhttp://www.oschina.net/translate/10-tips-git-next-level","source":"_posts/2016-11-04-Git教程.md","raw":"---\ntitle: Git教程\ncategories:\n  - Dev\ntags:\n  - Git教程\ndate: 2016-11-04 14:03:40\n---\n\n# 安装Git\n## Debian/Ubuntu\n`apt-get install git`\n## Centos/RedHat\n`yum install git`\n## Windows\n安装包下载：https://git-for-windows.github.io/\n## Mac\n安装包下载：https://sourceforge.net/projects/git-osx-installer/\n\n`git --version`  　查看版本\n\n---\n\n# Git配置\n`ls -a`\t或 `ls -ah`\t方便查看隐藏文件\n执行`git config`命令就是调用此文件\n`/etc/gitconfig `       全部用户生效 --system调用的文件\n`～/.gitcinfig   `      当前用户有效 --global调用的文件\n`.git/config  `         当前项目的配置文件\n**.git/config**的配置会覆盖**/etc/gitconfig** 中的同名变量。\nwin中配置文件一般在主目录下的对应用户文件夹里**C:\\Documents and Settings\\$USER**\nwin中**/etc/gitconfig**是在安装目录中。\n\n## 用户信息配置\n```\ngit config --global user.name \"leolan\"  #leolan为用户名\ngit config --global user.email 842632422@qq.com   #邮箱\n(用了global选项后当前用户的所有项目默认使用此用户信息，某一项目若使用其它的用户信息。把--global去掉重新配置，会在该项目.git/config中重新生成配置就行了。)\n以下可选：\ngit config --global core.editor emace   #指定emace为默认编辑器，不指定默认为vim\ngit config --global merge.tool vimdiff  #差异化分析工具（冲突合并），git可以理解kdiff3 ,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,opendiff等工具的输出信息。\n\ngit config user.name   #查看配置的用户名，改为user.email则为邮箱。\ngit config --list      #查看已配置的用户信息```\n\n---\n\n# 基本使用方法\n**一般进入某项目的目录后再执行以下命令。**\n```\ngit init\t        #设置当前目录为Git仓库\ngit init 目录名 \t        #指定目录为Git仓库\n\ngit clone ［源］\t\t#从源拷贝项目到本地的当前目录\ngit clone ［源］［目录］\t#指定源下载到某个目录\n例：git clone git://github.com/schacon/grit.git mygrit\n\ngit status\t\t#查看当前目录文件的状态，加 -s 显示简短信息。\"A\"是已添加到缓存、\"M\"为文件有改动、\"空格\"为未缓存的文件，组合显示如：\"AM\"代表已缓存的文件有改动，\"空格M\"代表未缓存的文件有改动。\ngit add 文件名   #添加文件到项目缓存中，没有添加的文件不属于项目文件，也不会痛不到服务器。\ngit add .  \t\t#添加当前目录到项目缓存中，如果添加多个文件，此命令更方便。\ngit commit -m \"项目的版本或简短说明\"\t#可以指定版本号及简单说明改动了哪些内容，同时会把所有改动同步到服务器上。\ngit commit -am \"项目的版本或简短说明\"\t#改动了多个文件又不想一个个添加，此命令自动添加所有改动的文件并同步到服务器。```\n\nGit的所有工作都是现在本地缓存的，只有执行**git commit -m \"简短说明\"** 后才会向服务器提交。\n```\ngit diff\t        #未缓存的改动\ngit diff --cached\t#已缓存的改动\ngit diff HEAD\t\t#已缓存和未缓存的所有改动\ngit diff --stat\t\t#显示摘要而非整个diff\ngit reset -- HEAD 文件\t#取消文件已缓存的内容，--很重要，没有加--表示切换到另一个分支。\ngit rm 文件\t\t#从项目中及本地删除文件,可不用执行。\ngit mv 文件\t\t#从项目中及本地重命名文件,可不用执行。```\n\n---\n# 创建远程仓库\n在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n* 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：`ssh-keygen -t rsa -C \"842632422@qq.com\"`你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，**id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥**，可以放心地告诉任何人。\n\n* 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub（公钥）文件的内容：\n\n点“Add Key”，你就应该看到已经添加的Key：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B001.png)\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B002.png)\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。\n\tssh -T git@github.com\n提示：Hi MyLeoLan! You've successfully authenticated, but GitHub does not provide shell access.　　则成功添加sshkey\n\n在右上角找到“Create a new repo”按钮，创建一个新的仓库：\n![](http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B003.png)\n目前，在GitHub上的这个仓库还是空的，会提示你创建README.md文件。\n\n##### 可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和**fork**的方式不同，这种方式要删除隐藏的**.git文件夹**因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\n\n---\n\n# 从远程库克隆仓库\n远程库已经准备好了，下一步是用命令git clone克隆一个本地库：\n\tgit clone git@github.com:MyLeoLan/testgit.git\n实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。\n使用https除了速度慢以外，还有个最大的麻烦是**每次推送都必须输入口令**，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。\n\n# 把本地仓库的内容推送到GitHub仓库\n在本地的XXX仓库下运行命令：\n\tgit remote add origin git@github.com:myleolan/learngit.git\n表示把本地的XXX仓库与远程learngit.git库绑定，以后推送都推送到这个库中。地址换成自己的库地址。你的SSH Key公钥不在我的账户列表中是推不上去的。\n\n\n\n---\n\n# 搭建Git服务器\nGitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。搭建Git服务器需要准备一台运行Linux的机器，强烈用Ubuntu、Debian或者Centos、redhat，这样，通过几条简单的apt命令就可以完成安装。\n**root登录**\n\n* 第一步，**安装git：**\n`sudo apt-get install git` 或 `yum install git`\n\n* 第二步，**创建一个git用户，用来运行git服务：**\n`sudo adduser git`\n\n\n* 第三步，**初始化Git仓库：**\n先选定一个目录作为Git仓库，假定是/data/git/learngit.git\n在/data/git/目录下输入命令：\n`sudo git init --bare learngit.git`\n\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。\n`sudo chown -R git:git learngit.git`\n\nGit服务器就已经搭得差不多了。下面我们在客户端clone一下远程仓库\n`git clone git@IP:/data/git/learngit.git`\nCloning into 'learngit'...\nThe authenticity of host '192.168.8.34 (192.168.8.34)' can't be established.\nRSA key fingerprint is 2b:55:45:e7:4c:29:cc:05:33:78:03:bd:a8:cd:08:9d.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.8.34' (RSA) to the list of known hosts.\ngit@192.168.8.34's password:\n**能连接但要密码**，接着下一步。\n\n* **第四步，创建证书登录（Git服务器打开RSA认证）**：然后就可以去Git服务器上添加你的公钥用来验证你的信息了。`vim /etc/ssh/sshd_config`中将RSA认证打开，即：\n```\nRSAAuthentication yes     \nPubkeyAuthentication yes     \nAuthorizedKeysFile  .ssh/authorized_keys```\n\n这里我们可以看到**公钥存放在.ssh/authorized_keys**文件中。所以我们在**/home/git下创建.ssh目录，然后创建authorized_keys文件**，收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到**/home/git/.ssh/authorized_keys文件里，一行一个。**\n此时再次连接已经可以免密钥登录啦。\n\n* **第五步，禁用shell登录：**\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过\n编辑/etc/passwd文件完成。找到类似下面的一行：\n`git:x:1001:1001:,,,:/home/git:/bin/bash`\n改为：\n`git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell`\n\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n\n* 第六步，**克隆远程仓库：**\n现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：\n`git clone git@IP:/data/git/learngit.git`\nCloning into 'sample'...\nwarning: You appear to have cloned an empty repository.\n剩下的推送就简单了。\n\n**管理公钥**\n\n如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用**Gitosis**来管理公钥。\n这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。管理公钥也可用**Gitolite**\n**管理权限**\n有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为**Git支持钩子（hook）**，所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。**Gitolite**就是这个工具。\n这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。\n\n搭建服务器的同时采用Gitolite来管理权限，参考：\nhttps://my.oschina.net/u/2351685/blog/509322\nGitolite的使用，参考：http://www.uml.org.cn/pzgl/201404092.asp\n\n\n---\n\n参考资料：\n连猴子都会的git：\nhttp://backlogtool.com/git-guide/cn/intro/intro1_3.html\n廖雪峰git：\n\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\nPro Git：\nhttp://iissnan.com/progit/\n外国友人git手册:\nhttps://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit\n10个迅速提升你 Git 水平的提示:\nhttp://www.oschina.net/translate/10-tips-git-next-level","slug":"Git教程","published":1,"updated":"2016-11-04T10:04:04.563Z","_id":"civ3dl0mu00410gpkk5ddpmh4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian/Ubuntu\"></a>Debian/Ubuntu</h2><p><code>apt-get install git</code></p>\n<h2 id=\"Centos-RedHat\"><a href=\"#Centos-RedHat\" class=\"headerlink\" title=\"Centos/RedHat\"></a>Centos/RedHat</h2><p><code>yum install git</code></p>\n<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><p>安装包下载：<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">https://git-for-windows.github.io/</a></p>\n<h2 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h2><p>安装包下载：<a href=\"https://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/git-osx-installer/</a></p>\n<p><code>git --version</code>  　查看版本</p>\n<hr>\n<h1 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h1><p><code>ls -a</code>    或 <code>ls -ah</code>    方便查看隐藏文件<br>执行<code>git config</code>命令就是调用此文件<br><code>/etc/gitconfig</code>       全部用户生效 –system调用的文件<br><code>～/.gitcinfig</code>      当前用户有效 –global调用的文件<br><code>.git/config</code>         当前项目的配置文件<br><strong>.git/config</strong>的配置会覆盖<strong>/etc/gitconfig</strong> 中的同名变量。<br>win中配置文件一般在主目录下的对应用户文件夹里<strong>C:\\Documents and Settings\\$USER</strong><br>win中<strong>/etc/gitconfig</strong>是在安装目录中。</p>\n<h2 id=\"用户信息配置\"><a href=\"#用户信息配置\" class=\"headerlink\" title=\"用户信息配置\"></a>用户信息配置</h2><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"leolan\"</span>  <span class=\"meta\">#leolan为用户名</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"number\">842632422</span><span class=\"symbol\">@qq</span>.com   <span class=\"meta\">#邮箱</span></div><div class=\"line\">(用了<span class=\"keyword\">global</span>选项后当前用户的所有项目默认使用此用户信息，某一项目若使用其它的用户信息。把--<span class=\"keyword\">global</span>去掉重新配置，会在该项目.git/config中重新生成配置就行了。)</div><div class=\"line\">以下可选：</div><div class=\"line\">git config --<span class=\"keyword\">global</span> core.editor emace   <span class=\"meta\">#指定emace为默认编辑器，不指定默认为vim</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> merge.tool vimdiff  <span class=\"meta\">#差异化分析工具（冲突合并），git可以理解kdiff3 ,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,opendiff等工具的输出信息。</span></div><div class=\"line\"></div><div class=\"line\">git config user.name   <span class=\"meta\">#查看配置的用户名，改为user.email则为邮箱。</span></div><div class=\"line\">git config --list      <span class=\"meta\">#查看已配置的用户信息</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h1><p><strong>一般进入某项目的目录后再执行以下命令。</strong><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init\t        <span class=\"comment\">#设置当前目录为Git仓库</span></div><div class=\"line\">git init 目录名 \t        <span class=\"comment\">#指定目录为Git仓库</span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">［源］\t\t#从源拷贝项目到本地的当前目录</span></div><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">［源］［目录］\t#指定源下载到某个目录</span></div><div class=\"line\">例：git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>://github.com/schacon/grit.git mygrit</div><div class=\"line\"></div><div class=\"line\">git status\t\t<span class=\"comment\">#查看当前目录文件的状态，加 -s 显示简短信息。\"A\"是已添加到缓存、\"M\"为文件有改动、\"空格\"为未缓存的文件，组合显示如：\"AM\"代表已缓存的文件有改动，\"空格M\"代表未缓存的文件有改动。</span></div><div class=\"line\">git add 文件名   <span class=\"comment\">#添加文件到项目缓存中，没有添加的文件不属于项目文件，也不会痛不到服务器。</span></div><div class=\"line\">git add .  \t\t<span class=\"comment\">#添加当前目录到项目缓存中，如果添加多个文件，此命令更方便。</span></div><div class=\"line\">git commit -m <span class=\"string\">\"项目的版本或简短说明\"</span>\t<span class=\"comment\">#可以指定版本号及简单说明改动了哪些内容，同时会把所有改动同步到服务器上。</span></div><div class=\"line\">git commit -am <span class=\"string\">\"项目的版本或简短说明\"</span>\t<span class=\"comment\">#改动了多个文件又不想一个个添加，此命令自动添加所有改动的文件并同步到服务器。</span></div></pre></td></tr></table></figure></p>\n<p>Git的所有工作都是现在本地缓存的，只有执行<strong>git commit -m “简短说明”</strong> 后才会向服务器提交。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">diff\t</span>        <span class=\"comment\">#未缓存的改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>--<span class=\"keyword\">cached\t</span><span class=\"comment\">#已缓存的改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>HEAD\t\t<span class=\"comment\">#已缓存和未缓存的所有改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>--stat\t\t<span class=\"comment\">#显示摘要而非整个diff</span></div><div class=\"line\">git reset -- HEAD 文件\t<span class=\"comment\">#取消文件已缓存的内容，--很重要，没有加--表示切换到另一个分支。</span></div><div class=\"line\">git rm 文件\t\t<span class=\"comment\">#从项目中及本地删除文件,可不用执行。</span></div><div class=\"line\">git mv 文件\t\t<span class=\"comment\">#从项目中及本地重命名文件,可不用执行。</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h1><p>在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>\n<ul>\n<li>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<code>ssh-keygen -t rsa -C &quot;842632422@qq.com&quot;</code>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</li>\n</ul>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，<strong>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥</strong>，可以放心地告诉任何人。</p>\n<ul>\n<li>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub（公钥）文件的内容：</li>\n</ul>\n<p>点“Add Key”，你就应该看到已经添加的Key：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B002.png\" alt=\"\"></p>\n<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。<br>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。<br>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。<br>    ssh -T git@github.com<br>提示：Hi MyLeoLan! You’ve successfully authenticated, but GitHub does not provide shell access.　　则成功添加sshkey</p>\n<p>在右上角找到“Create a new repo”按钮，创建一个新的仓库：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B003.png\" alt=\"\"><br>目前，在GitHub上的这个仓库还是空的，会提示你创建README.md文件。</p>\n<h5 id=\"可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的-git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\"><a href=\"#可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的-git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\" class=\"headerlink\" title=\"可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的.git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\"></a>可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和<strong>fork</strong>的方式不同，这种方式要删除隐藏的<strong>.git文件夹</strong>因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。</h5><hr>\n<h1 id=\"从远程库克隆仓库\"><a href=\"#从远程库克隆仓库\" class=\"headerlink\" title=\"从远程库克隆仓库\"></a>从远程库克隆仓库</h1><p>远程库已经准备好了，下一步是用命令git clone克隆一个本地库：<br>    git clone git@github.com:MyLeoLan/testgit.git<br>实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。<br>使用https除了速度慢以外，还有个最大的麻烦是<strong>每次推送都必须输入口令</strong>，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</p>\n<h1 id=\"把本地仓库的内容推送到GitHub仓库\"><a href=\"#把本地仓库的内容推送到GitHub仓库\" class=\"headerlink\" title=\"把本地仓库的内容推送到GitHub仓库\"></a>把本地仓库的内容推送到GitHub仓库</h1><p>在本地的XXX仓库下运行命令：<br>    git remote add origin git@github.com:myleolan/learngit.git<br>表示把本地的XXX仓库与远程learngit.git库绑定，以后推送都推送到这个库中。地址换成自己的库地址。你的SSH Key公钥不在我的账户列表中是推不上去的。</p>\n<hr>\n<h1 id=\"搭建Git服务器\"><a href=\"#搭建Git服务器\" class=\"headerlink\" title=\"搭建Git服务器\"></a>搭建Git服务器</h1><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。搭建Git服务器需要准备一台运行Linux的机器，强烈用Ubuntu、Debian或者Centos、redhat，这样，通过几条简单的apt命令就可以完成安装。<br><strong>root登录</strong></p>\n<ul>\n<li><p>第一步，<strong>安装git：</strong><br><code>sudo apt-get install git</code> 或 <code>yum install git</code></p>\n</li>\n<li><p>第二步，<strong>创建一个git用户，用来运行git服务：</strong><br><code>sudo adduser git</code></p>\n</li>\n</ul>\n<ul>\n<li>第三步，<strong>初始化Git仓库：</strong><br>先选定一个目录作为Git仓库，假定是/data/git/learngit.git<br>在/data/git/目录下输入命令：<br><code>sudo git init --bare learngit.git</code></li>\n</ul>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。<br><code>sudo chown -R git:git learngit.git</code></p>\n<p>Git服务器就已经搭得差不多了。下面我们在客户端clone一下远程仓库<br><code>git clone git@IP:/data/git/learngit.git</code><br>Cloning into ‘learngit’…<br>The authenticity of host ‘192.168.8.34 (192.168.8.34)’ can’t be established.<br>RSA key fingerprint is 2b:55:45:e7:4c:29:cc:05:33:78:03:bd:a8:cd:08:9d.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘192.168.8.34’ (RSA) to the list of known hosts.<br>git@192.168.8.34’s password:<br><strong>能连接但要密码</strong>，接着下一步。</p>\n<ul>\n<li><strong>第四步，创建证书登录（Git服务器打开RSA认证）</strong>：然后就可以去Git服务器上添加你的公钥用来验证你的信息了。<code>vim /etc/ssh/sshd_config</code>中将RSA认证打开，即：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">RSAAuthentication</span> <span class=\"literal\">yes</span>     </div><div class=\"line\">PubkeyAuthentication <span class=\"literal\">yes</span>     </div><div class=\"line\">AuthorizedKeysFile  .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们可以看到<strong>公钥存放在.ssh/authorized_keys</strong>文件中。所以我们在<strong>/home/git下创建.ssh目录，然后创建authorized_keys文件</strong>，收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到<strong>/home/git/.ssh/authorized_keys文件里，一行一个。</strong><br>此时再次连接已经可以免密钥登录啦。</p>\n<ul>\n<li><strong>第五步，禁用shell登录：</strong><br>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过<br>编辑/etc/passwd文件完成。找到类似下面的一行：<br><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code><br>改为：<br><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></li>\n</ul>\n<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<ul>\n<li>第六步，<strong>克隆远程仓库：</strong><br>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：<br><code>git clone git@IP:/data/git/learngit.git</code><br>Cloning into ‘sample’…<br>warning: You appear to have cloned an empty repository.<br>剩下的推送就简单了。</li>\n</ul>\n<p><strong>管理公钥</strong></p>\n<p>如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<strong>Gitosis</strong>来管理公钥。<br>这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。管理公钥也可用<strong>Gitolite</strong><br><strong>管理权限</strong><br>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为<strong>Git支持钩子（hook）</strong>，所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<strong>Gitolite</strong>就是这个工具。<br>这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</p>\n<p>搭建服务器的同时采用Gitolite来管理权限，参考：<br><a href=\"https://my.oschina.net/u/2351685/blog/509322\" target=\"_blank\" rel=\"external\">https://my.oschina.net/u/2351685/blog/509322</a><br>Gitolite的使用，参考：<a href=\"http://www.uml.org.cn/pzgl/201404092.asp\" target=\"_blank\" rel=\"external\">http://www.uml.org.cn/pzgl/201404092.asp</a></p>\n<hr>\n<p>参考资料：<br>连猴子都会的git：<br><a href=\"http://backlogtool.com/git-guide/cn/intro/intro1_3.html\" target=\"_blank\" rel=\"external\">http://backlogtool.com/git-guide/cn/intro/intro1_3.html</a><br>廖雪峰git：</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br>Pro Git：<br><a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"external\">http://iissnan.com/progit/</a><br>外国友人git手册:<br><a href=\"https://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit</a><br>10个迅速提升你 Git 水平的提示:<br><a href=\"http://www.oschina.net/translate/10-tips-git-next-level\" target=\"_blank\" rel=\"external\">http://www.oschina.net/translate/10-tips-git-next-level</a></p>\n","excerpt":"","more":"<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian/Ubuntu\"></a>Debian/Ubuntu</h2><p><code>apt-get install git</code></p>\n<h2 id=\"Centos-RedHat\"><a href=\"#Centos-RedHat\" class=\"headerlink\" title=\"Centos/RedHat\"></a>Centos/RedHat</h2><p><code>yum install git</code></p>\n<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><p>安装包下载：<a href=\"https://git-for-windows.github.io/\">https://git-for-windows.github.io/</a></p>\n<h2 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h2><p>安装包下载：<a href=\"https://sourceforge.net/projects/git-osx-installer/\">https://sourceforge.net/projects/git-osx-installer/</a></p>\n<p><code>git --version</code>  　查看版本</p>\n<hr>\n<h1 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h1><p><code>ls -a</code>    或 <code>ls -ah</code>    方便查看隐藏文件<br>执行<code>git config</code>命令就是调用此文件<br><code>/etc/gitconfig</code>       全部用户生效 –system调用的文件<br><code>～/.gitcinfig</code>      当前用户有效 –global调用的文件<br><code>.git/config</code>         当前项目的配置文件<br><strong>.git/config</strong>的配置会覆盖<strong>/etc/gitconfig</strong> 中的同名变量。<br>win中配置文件一般在主目录下的对应用户文件夹里<strong>C:\\Documents and Settings\\$USER</strong><br>win中<strong>/etc/gitconfig</strong>是在安装目录中。</p>\n<h2 id=\"用户信息配置\"><a href=\"#用户信息配置\" class=\"headerlink\" title=\"用户信息配置\"></a>用户信息配置</h2><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"leolan\"</span>  <span class=\"meta\">#leolan为用户名</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"number\">842632422</span><span class=\"symbol\">@qq</span>.com   <span class=\"meta\">#邮箱</span></div><div class=\"line\">(用了<span class=\"keyword\">global</span>选项后当前用户的所有项目默认使用此用户信息，某一项目若使用其它的用户信息。把--<span class=\"keyword\">global</span>去掉重新配置，会在该项目.git/config中重新生成配置就行了。)</div><div class=\"line\">以下可选：</div><div class=\"line\">git config --<span class=\"keyword\">global</span> core.editor emace   <span class=\"meta\">#指定emace为默认编辑器，不指定默认为vim</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> merge.tool vimdiff  <span class=\"meta\">#差异化分析工具（冲突合并），git可以理解kdiff3 ,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,opendiff等工具的输出信息。</span></div><div class=\"line\"></div><div class=\"line\">git config user.name   <span class=\"meta\">#查看配置的用户名，改为user.email则为邮箱。</span></div><div class=\"line\">git config --list      <span class=\"meta\">#查看已配置的用户信息</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h1><p><strong>一般进入某项目的目录后再执行以下命令。</strong><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init\t        <span class=\"comment\">#设置当前目录为Git仓库</span></div><div class=\"line\">git init 目录名 \t        <span class=\"comment\">#指定目录为Git仓库</span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">［源］\t\t#从源拷贝项目到本地的当前目录</div><div class=\"line\">git</span> <span class=\"keyword\">clone</span> <span class=\"title\">［源］［目录］\t#指定源下载到某个目录</div><div class=\"line\">例：git</span> <span class=\"keyword\">clone</span> <span class=\"title\">git</span>://github.com/schacon/grit.git mygrit</div><div class=\"line\"></div><div class=\"line\">git status\t\t<span class=\"comment\">#查看当前目录文件的状态，加 -s 显示简短信息。\"A\"是已添加到缓存、\"M\"为文件有改动、\"空格\"为未缓存的文件，组合显示如：\"AM\"代表已缓存的文件有改动，\"空格M\"代表未缓存的文件有改动。</span></div><div class=\"line\">git add 文件名   <span class=\"comment\">#添加文件到项目缓存中，没有添加的文件不属于项目文件，也不会痛不到服务器。</span></div><div class=\"line\">git add .  \t\t<span class=\"comment\">#添加当前目录到项目缓存中，如果添加多个文件，此命令更方便。</span></div><div class=\"line\">git commit -m <span class=\"string\">\"项目的版本或简短说明\"</span>\t<span class=\"comment\">#可以指定版本号及简单说明改动了哪些内容，同时会把所有改动同步到服务器上。</span></div><div class=\"line\">git commit -am <span class=\"string\">\"项目的版本或简短说明\"</span>\t<span class=\"comment\">#改动了多个文件又不想一个个添加，此命令自动添加所有改动的文件并同步到服务器。</span></div></pre></td></tr></table></figure></p>\n<p>Git的所有工作都是现在本地缓存的，只有执行<strong>git commit -m “简短说明”</strong> 后才会向服务器提交。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">diff\t</span>        <span class=\"comment\">#未缓存的改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>--<span class=\"keyword\">cached\t</span><span class=\"comment\">#已缓存的改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>HEAD\t\t<span class=\"comment\">#已缓存和未缓存的所有改动</span></div><div class=\"line\">git <span class=\"keyword\">diff </span>--stat\t\t<span class=\"comment\">#显示摘要而非整个diff</span></div><div class=\"line\">git reset -- HEAD 文件\t<span class=\"comment\">#取消文件已缓存的内容，--很重要，没有加--表示切换到另一个分支。</span></div><div class=\"line\">git rm 文件\t\t<span class=\"comment\">#从项目中及本地删除文件,可不用执行。</span></div><div class=\"line\">git mv 文件\t\t<span class=\"comment\">#从项目中及本地重命名文件,可不用执行。</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h1><p>在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>\n<ul>\n<li>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<code>ssh-keygen -t rsa -C &quot;842632422@qq.com&quot;</code>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</li>\n</ul>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，<strong>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥</strong>，可以放心地告诉任何人。</p>\n<ul>\n<li>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub（公钥）文件的内容：</li>\n</ul>\n<p>点“Add Key”，你就应该看到已经添加的Key：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B001.png\" alt=\"\"><br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B002.png\" alt=\"\"></p>\n<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。<br>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。<br>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。<br>    ssh -T git@github.com<br>提示：Hi MyLeoLan! You’ve successfully authenticated, but GitHub does not provide shell access.　　则成功添加sshkey</p>\n<p>在右上角找到“Create a new repo”按钮，创建一个新的仓库：<br><img src=\"http://ofyfogrgx.bkt.clouddn.com//blog/git%E6%95%99%E7%A8%8B003.png\" alt=\"\"><br>目前，在GitHub上的这个仓库还是空的，会提示你创建README.md文件。</p>\n<h5 id=\"可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的-git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\"><a href=\"#可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的-git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\" class=\"headerlink\" title=\"可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和fork的方式不同，这种方式要删除隐藏的.git文件夹因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。\"></a>可以从这个仓库克隆出新的仓库（克隆到本地），也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库（本地的项目或克隆了别人的项目推送到自己的仓库，和<strong>fork</strong>的方式不同，这种方式要删除隐藏的<strong>.git文件夹</strong>因为是别人的库信息，你是推送不到自己的库上去的，删掉之后添加的才是自己的信息）。</h5><hr>\n<h1 id=\"从远程库克隆仓库\"><a href=\"#从远程库克隆仓库\" class=\"headerlink\" title=\"从远程库克隆仓库\"></a>从远程库克隆仓库</h1><p>远程库已经准备好了，下一步是用命令git clone克隆一个本地库：<br>    git clone git@github.com:MyLeoLan/testgit.git<br>实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。<br>使用https除了速度慢以外，还有个最大的麻烦是<strong>每次推送都必须输入口令</strong>，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</p>\n<h1 id=\"把本地仓库的内容推送到GitHub仓库\"><a href=\"#把本地仓库的内容推送到GitHub仓库\" class=\"headerlink\" title=\"把本地仓库的内容推送到GitHub仓库\"></a>把本地仓库的内容推送到GitHub仓库</h1><p>在本地的XXX仓库下运行命令：<br>    git remote add origin git@github.com:myleolan/learngit.git<br>表示把本地的XXX仓库与远程learngit.git库绑定，以后推送都推送到这个库中。地址换成自己的库地址。你的SSH Key公钥不在我的账户列表中是推不上去的。</p>\n<hr>\n<h1 id=\"搭建Git服务器\"><a href=\"#搭建Git服务器\" class=\"headerlink\" title=\"搭建Git服务器\"></a>搭建Git服务器</h1><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。搭建Git服务器需要准备一台运行Linux的机器，强烈用Ubuntu、Debian或者Centos、redhat，这样，通过几条简单的apt命令就可以完成安装。<br><strong>root登录</strong></p>\n<ul>\n<li><p>第一步，<strong>安装git：</strong><br><code>sudo apt-get install git</code> 或 <code>yum install git</code></p>\n</li>\n<li><p>第二步，<strong>创建一个git用户，用来运行git服务：</strong><br><code>sudo adduser git</code></p>\n</li>\n</ul>\n<ul>\n<li>第三步，<strong>初始化Git仓库：</strong><br>先选定一个目录作为Git仓库，假定是/data/git/learngit.git<br>在/data/git/目录下输入命令：<br><code>sudo git init --bare learngit.git</code></li>\n</ul>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。<br><code>sudo chown -R git:git learngit.git</code></p>\n<p>Git服务器就已经搭得差不多了。下面我们在客户端clone一下远程仓库<br><code>git clone git@IP:/data/git/learngit.git</code><br>Cloning into ‘learngit’…<br>The authenticity of host ‘192.168.8.34 (192.168.8.34)’ can’t be established.<br>RSA key fingerprint is 2b:55:45:e7:4c:29:cc:05:33:78:03:bd:a8:cd:08:9d.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘192.168.8.34’ (RSA) to the list of known hosts.<br>git@192.168.8.34’s password:<br><strong>能连接但要密码</strong>，接着下一步。</p>\n<ul>\n<li><strong>第四步，创建证书登录（Git服务器打开RSA认证）</strong>：然后就可以去Git服务器上添加你的公钥用来验证你的信息了。<code>vim /etc/ssh/sshd_config</code>中将RSA认证打开，即：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">RSAAuthentication</span> <span class=\"literal\">yes</span>     </div><div class=\"line\">PubkeyAuthentication <span class=\"literal\">yes</span>     </div><div class=\"line\">AuthorizedKeysFile  .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们可以看到<strong>公钥存放在.ssh/authorized_keys</strong>文件中。所以我们在<strong>/home/git下创建.ssh目录，然后创建authorized_keys文件</strong>，收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到<strong>/home/git/.ssh/authorized_keys文件里，一行一个。</strong><br>此时再次连接已经可以免密钥登录啦。</p>\n<ul>\n<li><strong>第五步，禁用shell登录：</strong><br>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过<br>编辑/etc/passwd文件完成。找到类似下面的一行：<br><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code><br>改为：<br><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></li>\n</ul>\n<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<ul>\n<li>第六步，<strong>克隆远程仓库：</strong><br>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：<br><code>git clone git@IP:/data/git/learngit.git</code><br>Cloning into ‘sample’…<br>warning: You appear to have cloned an empty repository.<br>剩下的推送就简单了。</li>\n</ul>\n<p><strong>管理公钥</strong></p>\n<p>如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<strong>Gitosis</strong>来管理公钥。<br>这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。管理公钥也可用<strong>Gitolite</strong><br><strong>管理权限</strong><br>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为<strong>Git支持钩子（hook）</strong>，所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<strong>Gitolite</strong>就是这个工具。<br>这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。</p>\n<p>搭建服务器的同时采用Gitolite来管理权限，参考：<br><a href=\"https://my.oschina.net/u/2351685/blog/509322\">https://my.oschina.net/u/2351685/blog/509322</a><br>Gitolite的使用，参考：<a href=\"http://www.uml.org.cn/pzgl/201404092.asp\">http://www.uml.org.cn/pzgl/201404092.asp</a></p>\n<hr>\n<p>参考资料：<br>连猴子都会的git：<br><a href=\"http://backlogtool.com/git-guide/cn/intro/intro1_3.html\">http://backlogtool.com/git-guide/cn/intro/intro1_3.html</a><br>廖雪峰git：</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br>Pro Git：<br><a href=\"http://iissnan.com/progit/\">http://iissnan.com/progit/</a><br>外国友人git手册:<br><a href=\"https://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit\">https://pan.baidu.com/s/1kU5OCOB#path=%252Fpub%252Fgit</a><br>10个迅速提升你 Git 水平的提示:<br><a href=\"http://www.oschina.net/translate/10-tips-git-next-level\">http://www.oschina.net/translate/10-tips-git-next-level</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civ39nnqq00040gpkkqc7qd25","category_id":"civ39nnqy00060gpkwejmyvcp","_id":"civ39nnr7000b0gpkoe8bw4dg"},{"post_id":"civ39nnqv00050gpkmzodduxq","category_id":"civ39nnr600090gpk9jdn4sux","_id":"civ39nnr7000f0gpkbqa129ku"},{"post_id":"civ39nnr300080gpkpmx5b4by","category_id":"civ39nnr7000c0gpk4nffkb3a","_id":"civ39nnr7000i0gpk5n3dl9ie"},{"post_id":"civ39nnsx000n0gpk7l1bj95u","category_id":"civ39nnth000p0gpkj4rbi4gr","_id":"civ39nntz000z0gpkenldaw99"},{"post_id":"civ39nnsx000o0gpk0h1ijywn","category_id":"civ39nnts000u0gpkl4jrapn6","_id":"civ39nnue00160gpkhpsb46kk"},{"post_id":"civ39nntk000r0gpkneu8okkl","category_id":"civ39nntz00110gpk0k75ekp3","_id":"civ39nnuu001c0gpkjopfxbs4"},{"post_id":"civ39nnue00150gpk1841th23","category_id":"civ39nntz00110gpk0k75ekp3","_id":"civ39nnuu001g0gpkudvur5yc"},{"post_id":"civ39nntm000s0gpk2s2s1zfg","category_id":"civ39nntz00110gpk0k75ekp3","_id":"civ39nnuu001j0gpkvjap86bh"},{"post_id":"civ39nnuu001f0gpke52jtgg1","category_id":"civ39nntz00110gpk0k75ekp3","_id":"civ39nnva001n0gpkwcknbnwg"},{"post_id":"civ39nntp000t0gpkmiptdkcn","category_id":"civ39nnts000u0gpkl4jrapn6","_id":"civ39nnva001q0gpkf1t6ibkd"},{"post_id":"civ39nnuu001i0gpk2xhah9iu","category_id":"civ39nntz00110gpk0k75ekp3","_id":"civ39nnvp001u0gpk3jlnzewx"},{"post_id":"civ39nnva001l0gpkvm2go8xp","category_id":"civ39nnuu001k0gpkf1mzhmwl","_id":"civ39nnvp001x0gpkbswk1cvm"},{"post_id":"civ39nntw000x0gpkob5y4642","category_id":"civ39nnuu001k0gpkf1mzhmwl","_id":"civ39nnw500210gpkvrq8pdmg"},{"post_id":"civ39nntz00100gpk3ngsaumr","category_id":"civ39nnuu001k0gpkf1mzhmwl","_id":"civ39nnw500240gpkbxmv64da"},{"post_id":"civ39nntz00130gpk4bwsjgyx","category_id":"civ39nnuu001k0gpkf1mzhmwl","_id":"civ39nnw500290gpk2utiendn"},{"post_id":"civ39nnue00190gpkdrzm8a1o","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnwk002f0gpkbmq6ptd3"},{"post_id":"civ39nnue001b0gpksrvnt8xx","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002l0gpkwgalyhlj"},{"post_id":"civ39nnwk002h0gpk55030ni0","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002o0gpkyzrha8xg"},{"post_id":"civ39nnwk002j0gpkeauvxs41","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002q0gpkpbpp17bb"},{"post_id":"civ39nnva001p0gpk9njjpbze","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002t0gpkpstnxrkk"},{"post_id":"civ39nnvp001s0gpkm07l1sp5","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002u0gpks4uqb1na"},{"post_id":"civ39nnvp001v0gpk8nx9u2sb","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0002y0gpksrouhskg"},{"post_id":"civ39nnw5001z0gpk0l2bg2im","category_id":"civ39nnx0002w0gpktdg0wqum","_id":"civ39nnx000320gpku9kii7z6"},{"post_id":"civ39nnw500220gpk1jsinbjl","category_id":"civ39nnx0002w0gpktdg0wqum","_id":"civ39nnx000360gpk9o4r31c4"},{"post_id":"civ39nnw500260gpkxvw98otg","category_id":"civ39nnw500250gpkdirja7yn","_id":"civ39nnx0003a0gpklhj4ca2b"},{"post_id":"civ39nnw500280gpkiw7uti3d","category_id":"civ39nnx000370gpkwmce2wv9","_id":"civ39nnxg003e0gpkk0g9cch7"},{"post_id":"civ39nnw5002b0gpkwry8yto4","category_id":"civ39nnx0002w0gpktdg0wqum","_id":"civ39nnxg003i0gpkvz1w4p85"},{"post_id":"civ39nnwk002d0gpk3dir2wq5","category_id":"civ39nnx0002w0gpktdg0wqum","_id":"civ39nnxg003l0gpkomajegux"},{"post_id":"civ3dl0mu00410gpkk5ddpmh4","category_id":"civ39nnr7000c0gpk4nffkb3a","_id":"civ3dycxh00430gpkcsky5ex7"}],"PostTag":[{"post_id":"civ39nnqq00040gpkkqc7qd25","tag_id":"civ39nnr200070gpks1tse5gb","_id":"civ39nnr7000e0gpkskxagfhh"},{"post_id":"civ39nnqq00040gpkkqc7qd25","tag_id":"civ39nnr7000a0gpky0qzvf53","_id":"civ39nnr7000g0gpkw2dvpszn"},{"post_id":"civ39nnqv00050gpkmzodduxq","tag_id":"civ39nnr7000d0gpkoov23lwd","_id":"civ39nnr7000k0gpkr2u5lb8y"},{"post_id":"civ39nnqv00050gpkmzodduxq","tag_id":"civ39nnr7000h0gpkxibhc1r2","_id":"civ39nnr7000l0gpk32kamf4w"},{"post_id":"civ39nnr300080gpkpmx5b4by","tag_id":"civ39nnr7000j0gpkgtolu1vj","_id":"civ39nnr7000m0gpkwdq9jjmf"},{"post_id":"civ39nntm000s0gpk2s2s1zfg","tag_id":"civ39nnr7000j0gpkgtolu1vj","_id":"civ39nntv000w0gpk2xxeq72i"},{"post_id":"civ39nnsx000n0gpk7l1bj95u","tag_id":"civ39nntj000q0gpkqeik72o6","_id":"civ39nnty000y0gpkdo8pqt6b"},{"post_id":"civ39nnsx000o0gpk0h1ijywn","tag_id":"civ39nntt000v0gpk08dgc4yt","_id":"civ39nnue00140gpkkofn5c73"},{"post_id":"civ39nntk000r0gpkneu8okkl","tag_id":"civ39nntz00120gpk1xcb39z5","_id":"civ39nnue001a0gpk01vl788d"},{"post_id":"civ39nntp000t0gpkmiptdkcn","tag_id":"civ39nnue00180gpkr89tdybf","_id":"civ39nnuu001h0gpkckt9q9pt"},{"post_id":"civ39nntw000x0gpkob5y4642","tag_id":"civ39nnuu001e0gpk0jrt2cf9","_id":"civ39nnva001o0gpksim5db20"},{"post_id":"civ39nntz00100gpk3ngsaumr","tag_id":"civ39nnva001m0gpktm8rg9nl","_id":"civ39nnvp001w0gpk3brrwfhv"},{"post_id":"civ39nntz00130gpk4bwsjgyx","tag_id":"civ39nnvp001t0gpkpa6mrq5i","_id":"civ39nnw500230gpkq0ra51pb"},{"post_id":"civ39nnue00150gpk1841th23","tag_id":"civ39nnw500200gpkrwokqq8z","_id":"civ39nnw5002a0gpkdoanm1a6"},{"post_id":"civ39nnue00190gpkdrzm8a1o","tag_id":"civ39nnw500270gpkrepiel67","_id":"civ39nnwk002g0gpkxczpn42u"},{"post_id":"civ39nnue001b0gpksrvnt8xx","tag_id":"civ39nnwk002e0gpk1isxk3db","_id":"civ39nnx0002n0gpkmfw2v5is"},{"post_id":"civ39nnuu001f0gpke52jtgg1","tag_id":"civ39nnx0002k0gpksv3bleq5","_id":"civ39nnx0002s0gpk9wpcmr5b"},{"post_id":"civ39nnuu001i0gpk2xhah9iu","tag_id":"civ39nnx0002p0gpk6qas0dlg","_id":"civ39nnx0002x0gpkl9j688rj"},{"post_id":"civ39nnva001l0gpkvm2go8xp","tag_id":"civ39nnx0002v0gpkd8ppncyy","_id":"civ39nnx000310gpk59ri586b"},{"post_id":"civ39nnva001p0gpk9njjpbze","tag_id":"civ39nnx0002z0gpkjil4i00n","_id":"civ39nnx000350gpk0miatwi3"},{"post_id":"civ39nnvp001s0gpkm07l1sp5","tag_id":"civ39nnx000340gpk97xlc8q8","_id":"civ39nnx000390gpkeweplr8a"},{"post_id":"civ39nnvp001v0gpk8nx9u2sb","tag_id":"civ39nnx000380gpk9px89ucq","_id":"civ39nnxg003d0gpku0b46fzk"},{"post_id":"civ39nnw5001z0gpk0l2bg2im","tag_id":"civ39nnxg003c0gpkba38ks2q","_id":"civ39nnxg003h0gpkyvigpmau"},{"post_id":"civ39nnw500220gpk1jsinbjl","tag_id":"civ39nnxg003g0gpkb24m7vjv","_id":"civ39nnxg003k0gpk7tzmk2pe"},{"post_id":"civ39nnw500260gpkxvw98otg","tag_id":"civ39nnxg003j0gpksbu85l9u","_id":"civ39nnxg003n0gpk9i0vo7ts"},{"post_id":"civ39nnw500280gpkiw7uti3d","tag_id":"civ39nnxg003m0gpktsg3hzr5","_id":"civ39nnxg003r0gpkiikmuvg8"},{"post_id":"civ39nnw500280gpkiw7uti3d","tag_id":"civ39nnxg003o0gpkd8scf1mj","_id":"civ39nnxg003s0gpkfonny1b4"},{"post_id":"civ39nnw500280gpkiw7uti3d","tag_id":"civ39nnxg003p0gpk07txulwk","_id":"civ39nnxg003u0gpkarzq37eh"},{"post_id":"civ39nnw5002b0gpkwry8yto4","tag_id":"civ39nnxg003q0gpkeh0p9sq4","_id":"civ39nnxg003v0gpkj5blgby7"},{"post_id":"civ39nnwk002h0gpk55030ni0","tag_id":"civ39nnxg003t0gpkfcg3182m","_id":"civ39nnxg003y0gpk0q9mkxfr"},{"post_id":"civ39nnwk002h0gpk55030ni0","tag_id":"civ39nnxg003w0gpkgvkl3b4v","_id":"civ39nnxg003z0gpk9lml5bvi"},{"post_id":"civ39nnwk002j0gpkeauvxs41","tag_id":"civ39nnxg003x0gpknq5gionw","_id":"civ39nnxg00400gpk94ac4g1b"},{"post_id":"civ3dl0mu00410gpkk5ddpmh4","tag_id":"civ3dycxg00420gpkgtk0vtta","_id":"civ3dycxi00440gpk0pcsyina"}],"Tag":[{"name":"穷人VPN","_id":"civ39nnr200070gpks1tse5gb"},{"name":"免安装VPN","_id":"civ39nnr7000a0gpky0qzvf53"},{"name":"OpenResty","_id":"civ39nnr7000d0gpkoov23lwd"},{"name":"高性能web服务器","_id":"civ39nnr7000h0gpkxibhc1r2"},{"name":"网页链接更新页","_id":"civ39nnr7000j0gpkgtolu1vj"},{"name":"MySQL常用命令","_id":"civ39nntj000q0gpkqeik72o6"},{"name":"vim常用命令","_id":"civ39nntt000v0gpk08dgc4yt"},{"name":"Linux学习流程发展","_id":"civ39nntz00120gpk1xcb39z5"},{"name":"工具集","_id":"civ39nnue00180gpkr89tdybf"},{"name":"ruby2.3.1安装","_id":"civ39nnuu001e0gpk0jrt2cf9"},{"name":"Centos7 lanm","_id":"civ39nnva001m0gpktm8rg9nl"},{"name":"Centos PHP","_id":"civ39nnvp001t0gpkpa6mrq5i"},{"name":"工作总结","_id":"civ39nnw500200gpkrwokqq8z"},{"name":"Centos网络端口","_id":"civ39nnw500270gpkrepiel67"},{"name":"Linux内核升级","_id":"civ39nnwk002e0gpk1isxk3db"},{"name":"高并发系统之降级特技","_id":"civ39nnx0002k0gpksv3bleq5"},{"name":"创业的公司","_id":"civ39nnx0002p0gpk6qas0dlg"},{"name":"Node.js","_id":"civ39nnx0002v0gpkd8ppncyy"},{"name":"grub引导修复","_id":"civ39nnx0002z0gpkjil4i00n"},{"name":"ssh远程重装centos系统","_id":"civ39nnx000340gpk97xlc8q8"},{"name":"iptables防火墙","_id":"civ39nnx000380gpk9px89ucq"},{"name":"Docker安装","_id":"civ39nnxg003c0gpkba38ks2q"},{"name":"Docker常用命令","_id":"civ39nnxg003g0gpkb24m7vjv"},{"name":"VNC服务","_id":"civ39nnxg003j0gpksbu85l9u"},{"name":"集群","_id":"civ39nnxg003m0gpktsg3hzr5"},{"name":"自动化","_id":"civ39nnxg003o0gpkd8scf1mj"},{"name":"堡垒机","_id":"civ39nnxg003p0gpk07txulwk"},{"name":"KVM","_id":"civ39nnxg003q0gpkeh0p9sq4"},{"name":"LVM磁盘管理","_id":"civ39nnxg003t0gpkfcg3182m"},{"name":"LVM扩容","_id":"civ39nnxg003w0gpkgvkl3b4v"},{"name":"服务器入侵肉鸡发包","_id":"civ39nnxg003x0gpknq5gionw"},{"name":"Git教程","_id":"civ3dycxg00420gpkgtk0vtta"}]}}